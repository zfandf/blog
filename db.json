{"Asset":[{"_id":"themes/pacman/source/font/FontAwesome.otf","path":"font/FontAwesome.otf","modified":false},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.eot","path":"font/coveredbyyourgrace-webfont.eot","modified":false},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.svg","path":"font/coveredbyyourgrace-webfont.svg","modified":false},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.ttf","path":"font/coveredbyyourgrace-webfont.ttf","modified":false},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.woff","path":"font/coveredbyyourgrace-webfont.woff","modified":false},{"_id":"themes/pacman/source/font/fontawesome-webfont.eot","path":"font/fontawesome-webfont.eot","modified":false},{"_id":"themes/pacman/source/font/fontawesome-webfont.svg","path":"font/fontawesome-webfont.svg","modified":false},{"_id":"themes/pacman/source/font/fontawesome-webfont.ttf","path":"font/fontawesome-webfont.ttf","modified":false},{"_id":"themes/pacman/source/font/fontawesome-webfont.woff","path":"font/fontawesome-webfont.woff","modified":false},{"_id":"themes/pacman/source/img/author.jpg","path":"img/author.jpg","modified":false},{"_id":"themes/pacman/source/img/favicon.ico","path":"img/favicon.ico","modified":false},{"_id":"themes/pacman/source/img/logo.svg","path":"img/logo.svg","modified":false},{"_id":"themes/pacman/source/img/pacman.jpg","path":"img/pacman.jpg","modified":false},{"_id":"themes/pacman/source/js/jquery-2.1.0.min.js","path":"js/jquery-2.1.0.min.js","modified":false},{"_id":"themes/pacman/source/css/style.styl","path":"css/style.styl","modified":false},{"_id":"themes/pacman/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":false},{"_id":"themes/pacman/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":false},{"_id":"themes/pacman/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":false},{"_id":"themes/pacman/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":false},{"_id":"themes/pacman/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":false},{"_id":"themes/pacman/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":false},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":false},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":false},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":false},{"_id":"themes/pacman/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":false},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":false},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":false},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":false},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":false},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":false},{"_id":"source/CNAME","path":"CNAME","modified":false},{"_id":"source/img/favicon.ico","path":"img/favicon.ico","modified":false},{"_id":"source/img/icon.png","path":"img/icon.png","modified":false}],"Cache":[{"_id":"scaffolds/draft.md","mtime":1422544158000},{"_id":"scaffolds/page.md","mtime":1422544158000},{"_id":"scaffolds/photo.md","mtime":1422544158000},{"_id":"scaffolds/post.md","mtime":1422544158000},{"_id":"source/_posts/2012-02-22-github-pages.md","mtime":1422544870000},{"_id":"source/_posts/2015-01-27-arguments-callee.md","mtime":1422544878000},{"_id":"source/_posts/2015-01-27-element-select.md","mtime":1422551271000},{"_id":"source/_posts/2015-01-27-jquery-plugns.md","mtime":1422544925000},{"_id":"source/_posts/2015-01-27-js-apply-call.md","mtime":1422544938000},{"_id":"source/_posts/2015-01-27-js-base64decode.md","mtime":1422551417000},{"_id":"source/_posts/2015-01-27-maintainable-javascript.md","mtime":1422544975000},{"_id":"source/_posts/hello-world.md","mtime":1422551523000},{"_id":"themes/pacman/LICENSE","mtime":1422550073000},{"_id":"themes/pacman/README.md","mtime":1422550073000},{"_id":"themes/pacman/_config.yml","mtime":1422582151000},{"_id":"themes/pacman/languages/default.yml","mtime":1422550073000},{"_id":"themes/pacman/languages/zh-CN.yml","mtime":1422550073000},{"_id":"themes/pacman/languages/zh-TW.yml","mtime":1422550073000},{"_id":"themes/pacman/scripts/fancybox.js","mtime":1422550073000},{"_id":"themes/pacman/layout/archive.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/category.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/index.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/layout.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/page.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/post.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/tag.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/_widget/archive.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/_widget/category.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/_widget/links.ejs","mtime":1422580133000},{"_id":"themes/pacman/layout/_widget/rss.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/_widget/tag.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/_widget/tagcloud.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/_partial/after_footer.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/_partial/archive.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/_partial/article.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/_partial/categories.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/_partial/footer.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/_partial/google_analytics.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/_partial/head.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/_partial/header.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/_partial/pagination.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/_partial/search.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/_partial/sidebar.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/_partial/tags.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/_partial/post/article.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/_partial/post/catetags.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/_partial/post/comment.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/_partial/post/footer.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/_partial/post/gallery.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/_partial/post/header.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/_partial/post/jiathis.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/_partial/post/pagination.ejs","mtime":1422550073000},{"_id":"themes/pacman/source/font/FontAwesome.otf","mtime":1422550073000},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.eot","mtime":1422550073000},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.svg","mtime":1422550073000},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.ttf","mtime":1422550073000},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.woff","mtime":1422550073000},{"_id":"themes/pacman/source/font/fontawesome-webfont.eot","mtime":1422550073000},{"_id":"themes/pacman/source/font/fontawesome-webfont.svg","mtime":1422550073000},{"_id":"themes/pacman/source/font/fontawesome-webfont.ttf","mtime":1422550073000},{"_id":"themes/pacman/source/font/fontawesome-webfont.woff","mtime":1422550073000},{"_id":"themes/pacman/source/img/author.jpg","mtime":1422550073000},{"_id":"themes/pacman/source/img/favicon.ico","mtime":1422585618000},{"_id":"themes/pacman/source/img/logo.svg","mtime":1422550073000},{"_id":"themes/pacman/source/img/pacman.jpg","mtime":1422550073000},{"_id":"themes/pacman/source/js/jquery-2.1.0.min.js","mtime":1422550073000},{"_id":"themes/pacman/source/css/style.styl","mtime":1422550073000},{"_id":"themes/pacman/source/css/_base/code.styl","mtime":1422550073000},{"_id":"themes/pacman/source/css/_base/font.styl","mtime":1422550073000},{"_id":"themes/pacman/source/css/_base/public.styl","mtime":1422550073000},{"_id":"themes/pacman/source/css/_base/variable.styl","mtime":1422550073000},{"_id":"themes/pacman/source/css/_partial/article.styl","mtime":1422550073000},{"_id":"themes/pacman/source/css/_partial/aside.styl","mtime":1422550073000},{"_id":"themes/pacman/source/css/_partial/duoshuo.styl","mtime":1422550073000},{"_id":"themes/pacman/source/css/_partial/footer.styl","mtime":1422550073000},{"_id":"themes/pacman/source/css/_partial/gallery.styl","mtime":1422550073000},{"_id":"themes/pacman/source/css/_partial/header.styl","mtime":1422550073000},{"_id":"themes/pacman/source/css/_partial/helper.styl","mtime":1422550073000},{"_id":"themes/pacman/source/css/_partial/index.styl","mtime":1422550073000},{"_id":"themes/pacman/source/fancybox/blank.gif","mtime":1422550073000},{"_id":"themes/pacman/source/fancybox/fancybox_loading.gif","mtime":1422550073000},{"_id":"themes/pacman/source/fancybox/fancybox_loading@2x.gif","mtime":1422550073000},{"_id":"themes/pacman/source/fancybox/fancybox_overlay.png","mtime":1422550073000},{"_id":"themes/pacman/source/fancybox/fancybox_sprite.png","mtime":1422550073000},{"_id":"themes/pacman/source/fancybox/fancybox_sprite@2x.png","mtime":1422550073000},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.css","mtime":1422550073000},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.js","mtime":1422550073000},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.pack.js","mtime":1422550073000},{"_id":"themes/pacman/source/fancybox/helpers/fancybox_buttons.png","mtime":1422550073000},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-buttons.css","mtime":1422550073000},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-buttons.js","mtime":1422550073000},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-media.js","mtime":1422550073000},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","mtime":1422550073000},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","mtime":1422550073000},{"_id":"source/CNAME","mtime":1422582467000},{"_id":"source/img/favicon.ico","mtime":1422529473000},{"_id":"source/img/icon.png","mtime":1422529473000},{"_id":"themes/pacman/package.json","mtime":1422585661000}],"Category":[{"name":"JavaScript","_id":"d7v8yrn6h2wumkxz","posts":["1pfrgzknzisc7ioa"]}],"Page":[],"Post":[{"title":"select 样式重定义","content":"<h3 id=\"select_样式重定义\">select 样式重定义</h3>\n<p>留个记录, 来源<a href=\"http://stackoverflow.com/questions/1895476/how-to-style-a-select-dropdown-with-css-only-without-javascript\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/1895476/how-to-style-a-select-dropdown-with-css-only-without-javascript</a></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">select</span> <span class=\"rules\">{</span></div><div class=\"line\">   <span class=\"rule\"><span class=\"attribute\">-webkit-appearance</span>:<span class=\"value\"> none</span></span>;</div><div class=\"line\">   <span class=\"rule\"><span class=\"attribute\">-moz-appearance</span>:<span class=\"value\"> none</span></span>;</div><div class=\"line\">   <span class=\"rule\"><span class=\"attribute\">appearance</span>:<span class=\"value\"> none</span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-01-27-element-select.md","raw":"title: select 样式重定义\n---\n\n### select 样式重定义\n\n\n留个记录, 来源[http://stackoverflow.com/questions/1895476/how-to-style-a-select-dropdown-with-css-only-without-javascript](http://stackoverflow.com/questions/1895476/how-to-style-a-select-dropdown-with-css-only-without-javascript)\n````\nselect {\n   -webkit-appearance: none;\n   -moz-appearance: none;\n   appearance: none;\n}\n````\n\n\n","slug":"2015-01-27-element-select","date":1422551271000,"updated":1422551271000,"excerpt":"","_id":"rp01yd4mctngcowb","categories":[],"tags":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"关于 JavaScript 中 apply 和 call","content":"<h3 id=\"关于_JavaScript_中_apply_和_call\">关于 JavaScript 中 apply 和 call</h3>\n<p>首先 apply 和 call 都是为了改变某个函数运行时的 context 即上下文而存在的, 换句话说, 就是为了改变函数体内部 this 的指向.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span><span class=\"params\">(arg1, arg2)</span> </span>{</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'arg1&gt;&gt;&gt;: '</span> + arg1);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'arg2&gt;&gt;&gt;: '</span> + arg2);</div><div class=\"line\">    <span class=\"keyword\">return</span> arg1 + arg2;</div><div class=\"line\">}</div><div class=\"line\">a.apply(<span class=\"keyword\">this</span>, [<span class=\"number\">1</span>,<span class=\"number\">2</span>]);</div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-01-27-js-apply-call.md","raw":"title: 关于 JavaScript 中 apply 和 call\n---\n\n### 关于 JavaScript 中 apply 和 call\n\n\n首先 apply 和 call 都是为了改变某个函数运行时的 context 即上下文而存在的, 换句话说, 就是为了改变函数体内部 this 的指向.\n```\nfunction a(arg1, arg2) {\n    console.log('arg1>>>: ' + arg1);\n    console.log('arg2>>>: ' + arg2);\n    return arg1 + arg2;\n}\na.apply(this, [1,2]);\n```\n","slug":"2015-01-27-js-apply-call","date":1422544938000,"updated":1422544938000,"excerpt":"","_id":"ao4s94bdqa8d7pzn","categories":[],"tags":[],"comments":true,"layout":"post","photos":[],"link":""},{"toc":false,"title":"JavaScript Base64编码转换","content":"<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> base64EncodeChars = <span class=\"string\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> base64DecodeChars = [</div><div class=\"line\">    -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>,</div><div class=\"line\">    -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>,</div><div class=\"line\">    -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, <span class=\"number\">62</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, <span class=\"number\">63</span>,</div><div class=\"line\">    <span class=\"number\">52</span>, <span class=\"number\">53</span>, <span class=\"number\">54</span>, <span class=\"number\">55</span>, <span class=\"number\">56</span>, <span class=\"number\">57</span>, <span class=\"number\">58</span>, <span class=\"number\">59</span>, <span class=\"number\">60</span>, <span class=\"number\">61</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>,</div><div class=\"line\">    -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>,</div><div class=\"line\">    <span class=\"number\">15</span>, <span class=\"number\">16</span>, <span class=\"number\">17</span>, <span class=\"number\">18</span>, <span class=\"number\">19</span>, <span class=\"number\">20</span>, <span class=\"number\">21</span>, <span class=\"number\">22</span>, <span class=\"number\">23</span>, <span class=\"number\">24</span>, <span class=\"number\">25</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>,</div><div class=\"line\">    -<span class=\"number\">1</span>, <span class=\"number\">26</span>, <span class=\"number\">27</span>, <span class=\"number\">28</span>, <span class=\"number\">29</span>, <span class=\"number\">30</span>, <span class=\"number\">31</span>, <span class=\"number\">32</span>, <span class=\"number\">33</span>, <span class=\"number\">34</span>, <span class=\"number\">35</span>, <span class=\"number\">36</span>, <span class=\"number\">37</span>, <span class=\"number\">38</span>, <span class=\"number\">39</span>, <span class=\"number\">40</span>,</div><div class=\"line\">    <span class=\"number\">41</span>, <span class=\"number\">42</span>, <span class=\"number\">43</span>, <span class=\"number\">44</span>, <span class=\"number\">45</span>, <span class=\"number\">46</span>, <span class=\"number\">47</span>, <span class=\"number\">48</span>, <span class=\"number\">49</span>, <span class=\"number\">50</span>, <span class=\"number\">51</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>];</div><div class=\"line\">function base64encode(str) {</div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"keyword\">out</span>, i, len;</div><div class=\"line\">    <span class=\"keyword\">var</span> c1, c2, c3;</div><div class=\"line\">    len = str.length;</div><div class=\"line\">    i = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">out</span> = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(i &lt; len) {</div><div class=\"line\">        c1 = str.charCodeAt(i++) & <span class=\"number\">0xff</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (i == len) {</div><div class=\"line\">            <span class=\"keyword\">out</span> += base64EncodeChars.charAt(c1 &gt;&gt; <span class=\"number\">2</span>);</div><div class=\"line\">            <span class=\"keyword\">out</span> += base64EncodeChars.charAt((c1 & <span class=\"number\">0x3</span>) &lt;&lt; <span class=\"number\">4</span>);</div><div class=\"line\">            <span class=\"keyword\">out</span> += <span class=\"string\">\"==\"</span>;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        }</div><div class=\"line\">        c2 = str.charCodeAt(i++);</div><div class=\"line\">        <span class=\"keyword\">if</span> (i == len) {</div><div class=\"line\">            <span class=\"keyword\">out</span> += base64EncodeChars.charAt(c1 &gt;&gt; <span class=\"number\">2</span>);</div><div class=\"line\">            <span class=\"keyword\">out</span> += base64EncodeChars.charAt(((c1 & <span class=\"number\">0x3</span>)&lt;&lt; <span class=\"number\">4</span>) | ((c2 & <span class=\"number\">0xF0</span>) &gt;&gt; <span class=\"number\">4</span>));</div><div class=\"line\">            <span class=\"keyword\">out</span> += base64EncodeChars.charAt((c2 & <span class=\"number\">0xF</span>) &lt;&lt; <span class=\"number\">2</span>);</div><div class=\"line\">            <span class=\"keyword\">out</span> += <span class=\"string\">\"=\"</span>;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        }</div><div class=\"line\">        c3 = str.charCodeAt(i++);</div><div class=\"line\">        <span class=\"keyword\">out</span> += base64EncodeChars.charAt(c1 &gt;&gt; <span class=\"number\">2</span>);</div><div class=\"line\">        <span class=\"keyword\">out</span> += base64EncodeChars.charAt(((c1 & <span class=\"number\">0x3</span>)&lt;&lt; <span class=\"number\">4</span>) | ((c2 & <span class=\"number\">0xF0</span>) &gt;&gt; <span class=\"number\">4</span>));</div><div class=\"line\">        <span class=\"keyword\">out</span> += base64EncodeChars.charAt(((c2 & <span class=\"number\">0xF</span>) &lt;&lt; <span class=\"number\">2</span>) | ((c3 & <span class=\"number\">0xC0</span>) &gt;&gt;<span class=\"number\">6</span>));</div><div class=\"line\">        <span class=\"keyword\">out</span> += base64EncodeChars.charAt(c3 & <span class=\"number\">0x3F</span>);</div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">out</span>;</div><div class=\"line\">}</div><div class=\"line\">function base64decode(str) {</div><div class=\"line\">    <span class=\"keyword\">var</span> c1, c2, c3, c4;</div><div class=\"line\">    <span class=\"keyword\">var</span> i, len, <span class=\"keyword\">out</span>;</div><div class=\"line\">    len = str.length;</div><div class=\"line\">    i = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">out</span> = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(i &lt; len) {</div><div class=\"line\">        <span class=\"comment\">/* c1 */</span></div><div class=\"line\">        <span class=\"keyword\">do</span> {</div><div class=\"line\">            c1 = base64DecodeChars[str.charCodeAt(i++) & <span class=\"number\">0xff</span>];</div><div class=\"line\">        } <span class=\"keyword\">while</span>(i &lt; len && c1 == -<span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span>(c1 == -<span class=\"number\">1</span>) {</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        }</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/* c2 */</span></div><div class=\"line\">        <span class=\"keyword\">do</span> {</div><div class=\"line\">            c2 = base64DecodeChars[str.charCodeAt(i++) & <span class=\"number\">0xff</span>];</div><div class=\"line\">        } <span class=\"keyword\">while</span>(i &lt; len && c2 == -<span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span>(c2 == -<span class=\"number\">1</span>)</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">out</span> += String.fromCharCode((c1 &lt;&lt; <span class=\"number\">2</span>) | ((c2 & <span class=\"number\">0x30</span>) &gt;&gt; <span class=\"number\">4</span>));</div><div class=\"line\">        <span class=\"comment\">/* c3 */</span></div><div class=\"line\">        <span class=\"keyword\">do</span> {</div><div class=\"line\">            c3 = str.charCodeAt(i++) & <span class=\"number\">0xff</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span>(c3 == <span class=\"number\">61</span>)</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">out</span>;</div><div class=\"line\">            c3 = base64DecodeChars[c3];</div><div class=\"line\">        } <span class=\"keyword\">while</span>(i &lt; len && c3 == -<span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span>(c3 == -<span class=\"number\">1</span>)</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">out</span> += String.fromCharCode(((c2 & <span class=\"number\">0XF</span>) &lt;&lt; <span class=\"number\">4</span>) | ((c3 & <span class=\"number\">0x3C</span>) &gt;&gt; <span class=\"number\">2</span>));</div><div class=\"line\">        <span class=\"comment\">/* c4 */</span></div><div class=\"line\">        <span class=\"keyword\">do</span> {</div><div class=\"line\">            c4 = str.charCodeAt(i++) & <span class=\"number\">0xff</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span>(c4 == <span class=\"number\">61</span>)</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">out</span>;</div><div class=\"line\">            c4 = base64DecodeChars[c4];</div><div class=\"line\">        } <span class=\"keyword\">while</span>(i &lt; len && c4 == -<span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span>(c4 == -<span class=\"number\">1</span>)</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">out</span> += String.fromCharCode(((c3 & <span class=\"number\">0x03</span>) &lt;&lt; <span class=\"number\">6</span>) | c4);</div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">out</span>;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<h3 id=\"下面附带两个utf8_和_utf16_之间转换方法\">下面附带两个utf8 和 utf16 之间转换方法</h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\">function utf16to8(str) {</div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"keyword\">out</span>, i, len, c;</div><div class=\"line\">    <span class=\"keyword\">out</span> = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    len = str.length;</div><div class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; len; i++) {</div><div class=\"line\">        c = str.charCodeAt(i);</div><div class=\"line\">        <span class=\"keyword\">if</span> ((c &gt;= <span class=\"number\">0x0001</span>) && (c &lt;= <span class=\"number\">0x007F</span>)) {</div><div class=\"line\">            <span class=\"keyword\">out</span> += str.charAt(i);</div><div class=\"line\">        } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (c &gt; <span class=\"number\">0x07FF</span>) {</div><div class=\"line\">            <span class=\"keyword\">out</span> += String.fromCharCode(<span class=\"number\">0xE0</span> | ((c &gt;&gt; <span class=\"number\">12</span>) & <span class=\"number\">0x0F</span>));</div><div class=\"line\">            <span class=\"keyword\">out</span> += String.fromCharCode(<span class=\"number\">0x80</span> | ((c &gt;&gt; <span class=\"number\">6</span>) & <span class=\"number\">0x3F</span>));</div><div class=\"line\">            <span class=\"keyword\">out</span> += String.fromCharCode(<span class=\"number\">0x80</span> | ((c &gt;&gt; <span class=\"number\">0</span>) & <span class=\"number\">0x3F</span>));</div><div class=\"line\">        } <span class=\"keyword\">else</span> {</div><div class=\"line\">            <span class=\"keyword\">out</span> += String.fromCharCode(<span class=\"number\">0xC0</span> | ((c &gt;&gt; <span class=\"number\">6</span>) & <span class=\"number\">0x1F</span>));</div><div class=\"line\">            <span class=\"keyword\">out</span> += String.fromCharCode(<span class=\"number\">0x80</span> | ((c &gt;&gt; <span class=\"number\">0</span>) & <span class=\"number\">0x3F</span>));</div><div class=\"line\">        }</div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">out</span>;</div><div class=\"line\">}</div><div class=\"line\">function utf8to16(str) {</div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"keyword\">out</span>, i, len, c;</div><div class=\"line\">    <span class=\"keyword\">var</span> char2, char3;</div><div class=\"line\">    <span class=\"keyword\">out</span> = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    len = str.length;</div><div class=\"line\">    i = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(i &lt; len) {</div><div class=\"line\">        c = str.charCodeAt(i++);</div><div class=\"line\">        <span class=\"keyword\">switch</span>(c &gt;&gt; <span class=\"number\">4</span>) {</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">0</span>: <span class=\"keyword\">case</span> <span class=\"number\">1</span>: <span class=\"keyword\">case</span> <span class=\"number\">2</span>: <span class=\"keyword\">case</span> <span class=\"number\">3</span>: <span class=\"keyword\">case</span> <span class=\"number\">4</span>: <span class=\"keyword\">case</span> <span class=\"number\">5</span>: <span class=\"keyword\">case</span> <span class=\"number\">6</span>: <span class=\"keyword\">case</span> <span class=\"number\">7</span>:</div><div class=\"line\">                <span class=\"comment\">// 0xxxxxxx</span></div><div class=\"line\">                <span class=\"keyword\">out</span> += str.charAt(i-<span class=\"number\">1</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">12</span>: <span class=\"keyword\">case</span> <span class=\"number\">13</span>:</div><div class=\"line\">                <span class=\"comment\">// 110x xxxx　 10xx xxxx</span></div><div class=\"line\">                char2 = str.charCodeAt(i++);</div><div class=\"line\">                <span class=\"keyword\">out</span> += String.fromCharCode(((c & <span class=\"number\">0x1F</span>) &lt;&lt; <span class=\"number\">6</span>) | (char2 & <span class=\"number\">0x3F</span>));</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">14</span>:</div><div class=\"line\">                <span class=\"comment\">// 1110 xxxx　10xx xxxx　10xx xxxx</span></div><div class=\"line\">                char2 = str.charCodeAt(i++);</div><div class=\"line\">                char3 = str.charCodeAt(i++);</div><div class=\"line\">                <span class=\"keyword\">out</span> += String.fromCharCode(((c & <span class=\"number\">0x0F</span>) &lt;&lt; <span class=\"number\">12</span>) | ((char2 & <span class=\"number\">0x3F</span>) &lt;&lt; <span class=\"number\">6</span>) | ((char3 & <span class=\"number\">0x3F</span>) &lt;&lt; <span class=\"number\">0</span>));</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        }</div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">out</span>;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">function doit() {</div><div class=\"line\">    <span class=\"keyword\">var</span> f = document.f;</div><div class=\"line\">    <span class=\"keyword\">if</span> (f.source.<span class=\"keyword\">value</span>) {</div><div class=\"line\">        f.output.<span class=\"keyword\">value</span> = base64encode(utf16to8(f.source.<span class=\"keyword\">value</span>));</div><div class=\"line\">    }</div><div class=\"line\">    f.decode.<span class=\"keyword\">value</span> = utf8to16(base64decode(f.output.<span class=\"keyword\">value</span>));</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>the end</p>\n","source":"_posts/2015-01-27-js-base64decode.md","raw":"toc: false\ntitle: JavaScript Base64编码转换\ncategory: JavaScript\ntag: JavaScript\n---\n\n\n````\nvar base64EncodeChars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nvar base64DecodeChars = [\n    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63,\n    52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1,\n    -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\n    15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1,\n    -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n    41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1];\nfunction base64encode(str) {\n    var out, i, len;\n    var c1, c2, c3;\n    len = str.length;\n    i = 0;\n    out = \"\";\n    while(i < len) {\n        c1 = str.charCodeAt(i++) & 0xff;\n        if (i == len) {\n            out += base64EncodeChars.charAt(c1 >> 2);\n            out += base64EncodeChars.charAt((c1 & 0x3) << 4);\n            out += \"==\";\n            break;\n        }\n        c2 = str.charCodeAt(i++);\n        if (i == len) {\n            out += base64EncodeChars.charAt(c1 >> 2);\n            out += base64EncodeChars.charAt(((c1 & 0x3)<< 4) | ((c2 & 0xF0) >> 4));\n            out += base64EncodeChars.charAt((c2 & 0xF) << 2);\n            out += \"=\";\n            break;\n        }\n        c3 = str.charCodeAt(i++);\n        out += base64EncodeChars.charAt(c1 >> 2);\n        out += base64EncodeChars.charAt(((c1 & 0x3)<< 4) | ((c2 & 0xF0) >> 4));\n        out += base64EncodeChars.charAt(((c2 & 0xF) << 2) | ((c3 & 0xC0) >>6));\n        out += base64EncodeChars.charAt(c3 & 0x3F);\n    }\n    return out;\n}\nfunction base64decode(str) {\n    var c1, c2, c3, c4;\n    var i, len, out;\n    len = str.length;\n    i = 0;\n    out = \"\";\n    while(i < len) {\n        /* c1 */\n        do {\n            c1 = base64DecodeChars[str.charCodeAt(i++) & 0xff];\n        } while(i < len && c1 == -1);\n        if(c1 == -1) {\n            break;\n        }\n\n        /* c2 */\n        do {\n            c2 = base64DecodeChars[str.charCodeAt(i++) & 0xff];\n        } while(i < len && c2 == -1);\n        if(c2 == -1)\n            break;\n        out += String.fromCharCode((c1 << 2) | ((c2 & 0x30) >> 4));\n        /* c3 */\n        do {\n            c3 = str.charCodeAt(i++) & 0xff;\n            if(c3 == 61)\n                return out;\n            c3 = base64DecodeChars[c3];\n        } while(i < len && c3 == -1);\n        if(c3 == -1)\n            break;\n        out += String.fromCharCode(((c2 & 0XF) << 4) | ((c3 & 0x3C) >> 2));\n        /* c4 */\n        do {\n            c4 = str.charCodeAt(i++) & 0xff;\n            if(c4 == 61)\n                return out;\n            c4 = base64DecodeChars[c4];\n        } while(i < len && c4 == -1);\n        if(c4 == -1)\n            break;\n        out += String.fromCharCode(((c3 & 0x03) << 6) | c4);\n    }\n    return out;\n}\n````\n\n### 下面附带两个utf8 和 utf16 之间转换方法\n\n````\nfunction utf16to8(str) {\n    var out, i, len, c;\n    out = \"\";\n    len = str.length;\n    for(i = 0; i < len; i++) {\n        c = str.charCodeAt(i);\n        if ((c >= 0x0001) && (c <= 0x007F)) {\n            out += str.charAt(i);\n        } else if (c > 0x07FF) {\n            out += String.fromCharCode(0xE0 | ((c >> 12) & 0x0F));\n            out += String.fromCharCode(0x80 | ((c >> 6) & 0x3F));\n            out += String.fromCharCode(0x80 | ((c >> 0) & 0x3F));\n        } else {\n            out += String.fromCharCode(0xC0 | ((c >> 6) & 0x1F));\n            out += String.fromCharCode(0x80 | ((c >> 0) & 0x3F));\n        }\n    }\n    return out;\n}\nfunction utf8to16(str) {\n    var out, i, len, c;\n    var char2, char3;\n    out = \"\";\n    len = str.length;\n    i = 0;\n    while(i < len) {\n        c = str.charCodeAt(i++);\n        switch(c >> 4) {\n            case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7:\n                // 0xxxxxxx\n                out += str.charAt(i-1);\n                break;\n            case 12: case 13:\n                // 110x xxxx　 10xx xxxx\n                char2 = str.charCodeAt(i++);\n                out += String.fromCharCode(((c & 0x1F) << 6) | (char2 & 0x3F));\n            break;\n            case 14:\n                // 1110 xxxx　10xx xxxx　10xx xxxx\n                char2 = str.charCodeAt(i++);\n                char3 = str.charCodeAt(i++);\n                out += String.fromCharCode(((c & 0x0F) << 12) | ((char2 & 0x3F) << 6) | ((char3 & 0x3F) << 0));\n                break;\n        }\n    }\n    return out;\n}\n\nfunction doit() {\n    var f = document.f;\n    if (f.source.value) {\n        f.output.value = base64encode(utf16to8(f.source.value));\n    }\n    f.decode.value = utf8to16(base64decode(f.output.value));\n}\n````\n\nthe end\n\n","slug":"2015-01-27-js-base64decode","date":1422551417000,"updated":1422551417000,"categories":["d7v8yrn6h2wumkxz"],"tags":["l2cau3o5i5wrqmpz"],"excerpt":"","_id":"1pfrgzknzisc7ioa","comments":true,"layout":"post","photos":[],"link":""},{"title":"jQuery 自定义插件","content":"<h3 id=\"jQuery_自定义插件\">jQuery 自定义插件</h3>\n<h2 id=\"基本要点\">基本要点</h2>\n<ul>\n<li>命名: 以 jquery.[插件名].js 命令</li>\n<li>所有的对象方法都附加到 jQuery.fn 对象上, 所有的全局函数都附加到 jQuery 上.</li>\n<li>this 指向</li>\n<li>this.each</li>\n<li>为了稳妥, 可以在插件头部各添加分号</li>\n<li>插件应该返回一个 jQuery 对象, 以保证插件的链式操作. 除非插件需要返回的是一些需要获取的量, 比如字符串或者数组.</li>\n<li>在插件中, 尽量不要使用 $ 作为 jQuery 对象的别名. 如果使用闭包来回避这个问题.</li>\n</ul>\n<h2 id=\"基本格式\">基本格式</h2>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">;(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($)</span> </span>{</div><div class=\"line\">    <span class=\"comment\">// 代码块</span></div><div class=\"line\">})(jQuery);</div></pre></td></tr></table></figure>\n\n<h2 id=\"插件类型\">插件类型</h2>\n<ul>\n<li>封装 jQuery 对象方法的插件</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">;(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($)</span> </span>{</div><div class=\"line\">    $.fn.extend({</div><div class=\"line\">        <span class=\"string\">'对象方法名'</span>: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">            <span class=\"comment\">// 方法内容</span></div><div class=\"line\">        }</div><div class=\"line\">    });</div><div class=\"line\">})(jQuery);</div></pre></td></tr></table></figure>\n\n<ul>\n<li>封装全局函数的插件</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">;(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($)</span> </span>{</div><div class=\"line\">    $.extend({</div><div class=\"line\">        <span class=\"string\">'方法名'</span>: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">            <span class=\"comment\">// 方法内容</span></div><div class=\"line\">        }</div><div class=\"line\">    });</div><div class=\"line\">})(jQuery);</div></pre></td></tr></table></figure>\n\n<ul>\n<li>自定义选择器<br>  这个实验了一下, 只有 jQuery1.7.2可用, 故而..</li>\n</ul>\n","source":"_posts/2015-01-27-jquery-plugns.md","raw":"title: jQuery 自定义插件\n---\n\n### jQuery 自定义插件\n## 基本要点\n* 命名: 以 jquery.[插件名].js 命令\n* 所有的对象方法都附加到 jQuery.fn 对象上, 所有的全局函数都附加到 jQuery 上.\n* this 指向\n* this.each\n* 为了稳妥, 可以在插件头部各添加分号\n* 插件应该返回一个 jQuery 对象, 以保证插件的链式操作. 除非插件需要返回的是一些需要获取的量, 比如字符串或者数组.\n* 在插件中, 尽量不要使用 $ 作为 jQuery 对象的别名. 如果使用闭包来回避这个问题.\n\n## 基本格式\n````javascript\n;(function($) {\n    // 代码块\n})(jQuery);\n````\n## 插件类型\n* 封装 jQuery 对象方法的插件\n\n````\n;(function($) {\n    $.fn.extend({\n        '对象方法名': function() {\n            // 方法内容\n        }\n    });\n})(jQuery);\n````\n* 封装全局函数的插件\n\n````\n;(function($) {\n    $.extend({\n        '方法名': function() {\n            // 方法内容\n        }\n    });\n})(jQuery);\n````\n* 自定义选择器\n    这个实验了一下, 只有 jQuery1.7.2可用, 故而..\n\n\n\n\n","slug":"2015-01-27-jquery-plugns","date":1422544925000,"updated":1422544925000,"excerpt":"","_id":"z2eae7hg424zx80z","categories":[],"tags":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"Hello World","content":"<p>Welcome to <a href=\"http://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"http://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"http://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">trobuleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick_Start\">Quick Start</h2>\n<h3 id=\"Create_a_new_post\">Create a new post</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"http://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run_server\">Run server</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"http://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate_static_files\">Generate static files</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"http://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy_to_remote_sites\">Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"http://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","source":"_posts/hello-world.md","raw":"title: Hello World\n---\nWelcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [trobuleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)","slug":"hello-world","date":1422551523000,"updated":1422551523000,"excerpt":"","_id":"03u9pr2swnxttegn","categories":[],"tags":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"使用Github Pages建独立博客","content":"<p><a href=\"http://github.com\" title=\"Github\" target=\"_blank\" rel=\"external\">Github</a>很好的将代码和社区联系在了一起，于是发生了很多有趣的事情，世界也因为他美好了一点点。Github作为现在最流行的代码仓库，已经得到很多大公司和项目的青睐，比如<a href=\"https://github.com/jquery/jquery\" title=\"jQuery@github\" target=\"_blank\" rel=\"external\">jQuery</a>、<a href=\"https://github.com/twitter/bootstrap\" title=\"Twitter@github\" target=\"_blank\" rel=\"external\">Twitter</a>等。为使项目更方便的被人理解，介绍页面少不了，甚至会需要完整的文档站，Github替你想到了这一点，他提供了<a href=\"http://pages.github.com/\" title=\"Github Pages\" target=\"_blank\" rel=\"external\">Github Pages</a>的服务，不仅可以方便的为项目建立介绍站点，也可以用来建立个人博客。</p>\n<p>Github Pages有以下几个优点：</p>\n<ul><br>    <li>轻量级的博客系统，没有麻烦的配置</li><br>    <li>使用标记语言，比如<a href=\"http://markdown.tw\" target=\"_blank\" rel=\"external\">Markdown</a></li><br>    <li>无需自己搭建服务器</li><br>    <li>根据Github的限制，对应的每个站有300MB空间</li><br>    <li>可以绑定自己的域名</li><br></ul>\n\n<p>当然他也有缺点：</p>\n<ul>\n<li>使用<a href=\"https://github.com/mojombo/jekyll\" title=\"Jekyll\" target=\"_blank\" rel=\"external\">Jekyll</a>模板系统，相当于静态页发布，适合博客，文档介绍等。</li>\n<li>动态程序的部分相当局限，比如没有评论，不过还好我们有解决方案。</li>\n<li>基于Git，很多东西需要动手，不像Wordpress有强大的后台</li>\n</ul>\n<p>大致介绍到此，作为个人博客来说，简洁清爽的表达自己的工作、心得，就已达目标，所以Github Pages是我认为此需求最完美的解决方案了。</p>\n<h2 id=\"购买、绑定独立域名\">购买、绑定独立域名</h2>\n<p>虽说<a href=\"http://www.godaddy.com/\" title=\"Godaddy\" target=\"_blank\" rel=\"external\">Godaddy</a>曾支持过SOPA，并且首页放着极其不专业的大胸美女，但是作为域名服务商他做的还不赖，选择它最重要的原因是他支持支付宝，没有信用卡有时真的很难过。</p>\n<p>域名的购买不用多讲，注册、选域名、支付，有网购经验的都毫无压力，优惠码也遍地皆是。域名的配置需要提醒一下，因为伟大英明的GFW的存在，我们必须多做些事情。</p>\n<p>流传Godaddy的域名解析服务器被墙掉，导致域名无法访问，后来这个事情在<a href=\"http://beiyuu.com\" title=\"BeiYuu\" target=\"_blank\" rel=\"external\">BeiYuu</a>也发生了，不得已需要把域名解析服务迁移到国内比较稳定的服务商处，这个迁移对于域名来说没有什么风险，最终的控制权还是在Godaddy那里，你随时都可以改回去。</p>\n<p>我们选择<a href=\"https://www.dnspod.cn/\" title=\"DNSPod\" target=\"_blank\" rel=\"external\">DNSPod</a>的服务，他们的产品做得不错，易用、免费，收费版有更高端的功能，暂不需要。注册登录之后，按照DNSPod的说法，只需三步（我们插入一步）：</p>\n<ul><br>    <li>首先添加域名记录，可参考DNSPod的帮助文档：<a href=\"https://www.dnspod.cn/Support\" target=\"_blank\" rel=\"external\">https://www.dnspod.cn/Support</a></li><br>    <li>在DNSPod自己的域名下添加一条<a href=\"http://baike.baidu.com/view/65575.htm\" target=\"_blank\" rel=\"external\">A记录</a>，地址就是Github Pages的服务IP地址：207.97.227.245</li><br>    <li>在域名注册商处修改DNS服务:去Godaddy修改Nameservers为这两个地址：f1g1ns1.dnspod.net、f1g1ns2.dnspod.net。如果你不明白在哪里修改，可以参考这里：<a href=\"https://www.dnspod.cn/support/index/fid/119\" target=\"_blank\" rel=\"external\">Godaddy注册的域名如何使用DNSPod</a></li><br>    <li>等待域名解析生效</li><br></ul>\n\n<p>域名的配置部分完成，跪谢方校长。</p>\n<h2 id=\"配置和使用Github\">配置和使用Github</h2>\n<p>Git是版本管理的未来，他的优点我不再赘述，相关资料很多。推荐这本<a href=\"http://progit.org/book/zh/\" title=\"Pro Git中文版\" target=\"_blank\" rel=\"external\">Git中文教程</a>。</p>\n<p>要使用Git，需要安装它的客户端，推荐在Linux下使用Git，会比较方便。Windows版的下载地址在这里：<a href=\"http://code.google.com/p/msysgit/downloads/list\" title=\"Windows版Git客户端\" target=\"_blank\" rel=\"external\">http://code.google.com/p/msysgit/downloads/list</a>。其他系统的安装也可以参考官方的<a href=\"http://help.github.com/mac-set-up-git/\" title=\"Mac下Git安装\" target=\"_blank\" rel=\"external\">安装教程</a>。</p>\n<p>下载安装客户端之后，各个系统的配置就类似了，我们使用windows作为例子，Linux和Mac与此类似。</p>\n<p>在Windows下，打开Git Bash，其他系统下面则打开终端（Terminal）：<br><img src=\"/images/githubpages/bootcamp_1_win_gitbash.jpg\" alt=\"Git Bash\"></p>\n<h3 id=\"1、检查SSH_keys的设置\">1、检查SSH keys的设置</h3>\n<p>首先我们需要检查你电脑上现有的ssh key：</p>\n<pre><code>$ <span class=\"built_in\">cd</span> ~/.ssh\n</code></pre><p>如果显示“No such file or directory”，跳到第三步，否则继续。</p>\n<h3 id=\"2、备份和移除原来的ssh_key设置：\">2、备份和移除原来的ssh key设置：</h3>\n<p>因为已经存在key文件，所以需要备份旧的数据并删除：</p>\n<pre><code><span class=\"variable\">$ </span>ls\nconfig    id_rsa    id_rsa.pub    known_hosts\n<span class=\"variable\">$ </span>mkdir key_backup\n<span class=\"variable\">$ </span>cp id_rsa* key_backup\n<span class=\"variable\">$ </span>rm id_rsa*\n</code></pre><h3 id=\"3、生成新的SSH_Key：\">3、生成新的SSH Key：</h3>\n<p>输入下面的代码，就可以生成新的key文件，我们只需要默认设置就好，所以当需要输入文件名的时候，回车就好。</p>\n<pre><code>$ ssh-keygen -t rsa -C <span class=\"string\">\"邮件地址@youremail.com\"</span>\nGenerating <span class=\"keyword\">public</span>/<span class=\"keyword\">private</span> rsa <span class=\"keyword\">key</span> pair.\nEnter file <span class=\"keyword\">in</span> which <span class=\"keyword\">to</span> save the <span class=\"keyword\">key</span> (/Users/your_user_directory/.ssh/id_rsa):&lt;回车就好&gt;\n</code></pre><p>然后系统会要你输入加密串（<a href=\"http://help.github.com/ssh-key-passphrases/\" target=\"_blank\" rel=\"external\">Passphrase</a>）：</p>\n<pre><code><span class=\"constant\">Enter</span> passphrase (empty <span class=\"keyword\">for</span> no passphrase)<span class=\"symbol\">:&lt;</span>输入加密串&gt;\n<span class=\"constant\">Enter</span> same passphrase <span class=\"symbol\">again:</span>&lt;再次输入加密串&gt;\n</code></pre><p>最后看到这样的界面，就成功设置ssh key了：<br><img src=\"/images/githubpages/ssh-key-set.png\" alt=\"ssh key success\"></p>\n<h3 id=\"4、添加SSH_Key到GitHub：\">4、添加SSH Key到GitHub：</h3>\n<p>在本机设置SSH Key之后，需要添加到GitHub上，以完成SSH链接的设置。</p>\n<p>用文本编辑工具打开id_rsa.pub文件，如果看不到这个文件，你需要设置显示隐藏文件。准确的复制这个文件的内容，才能保证设置的成功。</p>\n<p>在GitHub的主页上点击设置按钮：<br><img src=\"/images/githubpages/github-account-setting.png\" alt=\"github account setting\"></p>\n<p>选择SSH Keys项，把复制的内容粘贴进去，然后点击Add Key按钮即可：<br><img src=\"/images/githubpages/bootcamp_1_ssh.jpg\" alt=\"set ssh keys\"></p>\n<p>PS：如果需要配置多个GitHub账号，可以参看这个<a href=\"http://omiga.org/blog/archives/2269\" target=\"_blank\" rel=\"external\">多个github帐号的SSH key切换</a>，不过需要提醒一下的是，如果你只是通过这篇文章中所述配置了Host，那么你多个账号下面的提交用户会是一个人，所以需要通过命令<code>git config --global --unset user.email</code>删除用户账户设置，在每一个repo下面使用<code>git config --local user.email &#39;你的github邮箱@mail.com&#39;</code> 命令单独设置用户账户信息</p>\n<h3 id=\"5、测试一下\">5、测试一下</h3>\n<p>可以输入下面的命令，看看设置是否成功，<code>git@github.com</code>的部分不要修改：</p>\n<pre><code><span class=\"variable\">$ </span>ssh -<span class=\"constant\">T</span> git<span class=\"variable\">@github</span>.com\n</code></pre><p>如果是下面的反应：</p>\n<pre><code>The authenticity <span class=\"keyword\">of</span> host <span class=\"comment\">'github.com (207.97.227.239)' can't be established.</span>\nRSA <span class=\"keyword\">key</span> fingerprint <span class=\"keyword\">is</span> <span class=\"number\">16</span>:<span class=\"number\">27</span>:ac:a5:<span class=\"number\">76</span>:<span class=\"number\">28</span>:<span class=\"number\">2</span>d:<span class=\"number\">36</span>:<span class=\"number\">63</span>:<span class=\"number\">1</span>b:<span class=\"number\">56</span>:<span class=\"number\">4</span>d:eb:df:a6:<span class=\"number\">48.</span>\nAre you sure you want <span class=\"keyword\">to</span> <span class=\"keyword\">continue</span> connecting (yes/no)?\n</code></pre><p>不要紧张，输入<code>yes</code>就好，然后会看到：</p>\n<pre><code>Hi &lt;em&gt;username&lt;/em&gt;! You<span class=\"attribute\">'ve</span> successfully authenticated, but GitHub does <span class=\"keyword\">not</span> provide shell <span class=\"keyword\">access</span>.\n</code></pre><h3 id=\"6、设置你的账号信息\">6、设置你的账号信息</h3>\n<p>现在你已经可以通过SSH链接到GitHub了，还有一些个人信息需要完善的。</p>\n<p>Git会根据用户的名字和邮箱来记录提交。GitHub也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的，名字必须是你的真名，而不是GitHub的昵称。</p>\n<pre><code>$ git config --global <span class=\"literal\">user</span>.name <span class=\"string\">\"你的名字\"</span>\n$ git config --global <span class=\"literal\">user</span>.email <span class=\"string\">\"your_email@youremail.com\"</span>\n</code></pre><h4 id=\"设置GitHub的token\">设置GitHub的token</h4>\n<p>2012-4-28补充：新版的接口已经不需要配置token了，所以下面这段可以跳过了</p>\n<p>有些工具没有通过SSH来链接GitHub。如果要使用这类工具，你需要找到然后设置你的API Token。</p>\n<p>在GitHub上，你可以点击<em>Account Setting &gt; Account Admin</em>：<br><img src=\"/images/githubpages/bootcamp_1_token.jpg\" alt=\"set ssh keys\"></p>\n<p>然后在你的命令行中，输入下面的命令，把token添加进去：</p>\n<pre><code>$ git config --global <span class=\"literal\">user</span>.name <span class=\"string\">\"你的名字\"</span>\n$ git config --global <span class=\"literal\">user</span>.token <span class=\"number\">0123456789</span>your123456789token\n</code></pre><p>如果你改了GitHub的密码，需要重新设置token。</p>\n<h3 id=\"成功了\">成功了</h3>\n<p>好了，你已经可以成功连接GitHub了。</p>\n<h2 id=\"使用GitHub_Pages建立博客\">使用GitHub Pages建立博客</h2>\n<p>与GitHub建立好链接之后，就可以方便的使用它提供的Pages服务，GitHub Pages分两种，一种是你的GitHub用户名建立的<code>username.github.io</code>这样的用户&amp;组织页（站），另一种是依附项目的pages。</p>\n<h3 id=\"User_&amp;_Organization_Pages\">User &amp; Organization Pages</h3>\n<p>想建立个人博客是用的第一种，形如<code>beiyuu.github.io</code>这样的可访问的站，每个用户名下面只能建立一个，创建之后点击<code>Admin</code>进入项目管理，可以看到是这样的：<br><img src=\"/images/githubpages/user-pages.png\" alt=\"user pages\"><br>而普通的项目是这样的，即使你也是用的<code>othername.github.io</code>：<br><img src=\"/images/githubpages/other-pages.png\" alt=\"other pages\"></p>\n<p>创建好<code>username.github.io</code>项目之后，提交一个<code>index.html</code>文件，然后<code>push</code>到GitHub的<code>master</code>分支（也就是普通意义上的主干）。第一次页面生效需要一些时间，大概10分钟左右。</p>\n<p>生效之后，访问<code>username.github.io</code>就可以看到你上传的页面了，<a href=\"http://beiyuu.github.com\" target=\"_blank\" rel=\"external\">beiyuu.github.com</a>就是一个例子。</p>\n<p>关于第二种项目<code>pages</code>，简单提一下，他和用户pages使用的后台程序是同一套，只不过它的目的是项目的帮助文档等跟项目绑定的内容，所以需要在项目的<code>gh-pages</code>分支上去提交相应的文件，GitHub会自动帮你生成项目pages。具体的使用帮助可以参考<a href=\"http://pages.github.com/\" title=\"Github Pages\" target=\"_blank\" rel=\"external\">Github Pages</a>的官方文档：</p>\n<h3 id=\"绑定域名\">绑定域名</h3>\n<p>我们在第一部分就提到了在DNS部分的设置，再来看在GitHub的配置，要想让<code>username.github.io</code>能通过你自己的域名来访问，需要在项目的根目录下新建一个名为<code>CNAME</code>的文件，文件内容形如：</p>\n<pre><code>beiyuu.<span class=\"keyword\">com</span>\n</code></pre><p>你也可以绑定在二级域名上：</p>\n<pre><code>blog.beiyuu.<span class=\"keyword\">com</span>\n</code></pre><p>需要提醒的一点是，如果你使用形如<code>beiyuu.com</code>这样的一级域名的话，需要在DNS处设置A记录到<code>207.97.227.245</code>（<strong>这个地址会有变动，<a href=\"https://help.github.com/articles/my-custom-domain-isn-t-working\" target=\"_blank\" rel=\"external\">这里</a>查看</strong>），而不是在DNS处设置为CNAME的形式，否则可能会对其他服务（比如email）造成影响。</p>\n<p>设置成功后，根据DNS的情况，最长可能需要一天才能生效，耐心等待吧。</p>\n<h2 id=\"Jekyll模板系统\">Jekyll模板系统</h2>\n<p>GitHub Pages为了提供对HTML内容的支持，选择了<a href=\"https://github.com/mojombo/jekyll\" title=\"Jekyll\" target=\"_blank\" rel=\"external\">Jekyll</a>作为模板系统，Jekyll是一个强大的静态模板系统，作为个人博客使用，基本上可以满足要求，也能保持管理的方便，你可以查看<a href=\"https://github.com/mojombo/jekyll/blob/master/README.textile\" target=\"_blank\" rel=\"external\">Jekyll官方文档</a>。</p>\n<p>你可以直接fork<a href=\"https://github.com/beiyuu/beiyuu.github.com\" target=\"_blank\" rel=\"external\">我的项目</a>，然后改名，就有了你自己的满足Jekyll要求的文档了，当然你也可以按照下面的介绍自己创建。</p>\n<h3 id=\"Jekyll基本结构\">Jekyll基本结构</h3>\n<p>Jekyll的核心其实就是一个文本的转换引擎，用你最喜欢的标记语言写文档，可以是Markdown、Textile或者HTML等等，再通过<code>layout</code>将文档拼装起来，根据你设置的URL规则来展现，这些都是通过严格的配置文件来定义，最终的产出就是web页面。</p>\n<p>基本的Jekyll结构如下：</p>\n<pre><code><span class=\"comment\">|</span><span class=\"literal\">-</span><span class=\"literal\">-</span> <span class=\"comment\">_config</span><span class=\"string\">.</span><span class=\"comment\">yml</span>\n<span class=\"comment\">|</span><span class=\"literal\">-</span><span class=\"literal\">-</span> <span class=\"comment\">_includes</span>\n<span class=\"comment\">|</span><span class=\"literal\">-</span><span class=\"literal\">-</span> <span class=\"comment\">_layouts</span>\n<span class=\"comment\">|</span>   <span class=\"comment\">|</span><span class=\"literal\">-</span><span class=\"literal\">-</span> <span class=\"comment\">default</span><span class=\"string\">.</span><span class=\"comment\">html</span>\n<span class=\"comment\">|</span>   <span class=\"comment\">`</span><span class=\"literal\">-</span><span class=\"literal\">-</span> <span class=\"comment\">post</span><span class=\"string\">.</span><span class=\"comment\">html</span>\n<span class=\"comment\">|</span><span class=\"literal\">-</span><span class=\"literal\">-</span> <span class=\"comment\">_posts</span>\n<span class=\"comment\">|</span>   <span class=\"comment\">|</span><span class=\"literal\">-</span><span class=\"literal\">-</span> <span class=\"comment\">2007</span><span class=\"literal\">-</span><span class=\"comment\">10</span><span class=\"literal\">-</span><span class=\"comment\">29</span><span class=\"literal\">-</span><span class=\"comment\">why</span><span class=\"literal\">-</span><span class=\"comment\">every</span><span class=\"literal\">-</span><span class=\"comment\">programmer</span><span class=\"literal\">-</span><span class=\"comment\">should</span><span class=\"literal\">-</span><span class=\"comment\">play</span><span class=\"literal\">-</span><span class=\"comment\">nethack</span><span class=\"string\">.</span><span class=\"comment\">textile</span>\n<span class=\"comment\">|</span>   <span class=\"comment\">`</span><span class=\"literal\">-</span><span class=\"literal\">-</span> <span class=\"comment\">2009</span><span class=\"literal\">-</span><span class=\"comment\">04</span><span class=\"literal\">-</span><span class=\"comment\">26</span><span class=\"literal\">-</span><span class=\"comment\">barcamp</span><span class=\"literal\">-</span><span class=\"comment\">boston</span><span class=\"literal\">-</span><span class=\"comment\">4</span><span class=\"literal\">-</span><span class=\"comment\">roundup</span><span class=\"string\">.</span><span class=\"comment\">textile</span>\n<span class=\"comment\">|</span><span class=\"literal\">-</span><span class=\"literal\">-</span> <span class=\"comment\">_site</span>\n<span class=\"comment\">`</span><span class=\"literal\">-</span><span class=\"literal\">-</span> <span class=\"comment\">index</span><span class=\"string\">.</span><span class=\"comment\">html</span>\n</code></pre><p>简单介绍一下他们的作用：</p>\n<h4 id=\"_config-yml\">_config.yml</h4>\n<p>配置文件，用来定义你想要的效果，设置之后就不用关心了。</p>\n<h4 id=\"_includes\">_includes</h4>\n<p>可以用来存放一些小的可复用的模块，方便通过<code>{ % include file.ext %}</code>（去掉前两个{中或者{与%中的空格，下同）灵活的调用。这条命令会调用_includes/file.ext文件。</p>\n<h4 id=\"_layouts\">_layouts</h4>\n<p>这是模板文件存放的位置。模板需要通过<a href=\"https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter\" target=\"_blank\" rel=\"external\">YAML front matter</a>来定义，后面会讲到，<code>{ { content }}</code>标记用来将数据插入到这些模板中来。</p>\n<h4 id=\"_posts\">_posts</h4>\n<p>你的动态内容，一般来说就是你的博客正文存放的文件夹。他的命名有严格的规定，必须是<code>2012-02-22-artical-title.MARKUP</code>这样的形式，MARKUP是你所使用标记语言的文件后缀名，根据_config.yml中设定的链接规则，可以根据你的文件名灵活调整，文章的日期和标记语言后缀与文章的标题的独立的。</p>\n<h4 id=\"_site\">_site</h4>\n<p>这个是Jekyll生成的最终的文档，不用去关心。最好把他放在你的<code>.gitignore</code>文件中忽略它。</p>\n<h4 id=\"其他文件夹\">其他文件夹</h4>\n<p>你可以创建任何的文件夹，在根目录下面也可以创建任何文件，假设你创建了<code>project</code>文件夹，下面有一个<code>github-pages.md</code>的文件，那么你就可以通过<code>yoursite.com/project/github-pages</code>访问的到，如果你是使用一级域名的话。文件后缀可以是<code>.html</code>或者<code>markdown</code>或者<code>textile</code>。这里还有很多的例子：<a href=\"https://github.com/mojombo/jekyll/wiki/Sites\" target=\"_blank\" rel=\"external\">https://github.com/mojombo/jekyll/wiki/Sites</a></p>\n<h3 id=\"Jekyll的配置\">Jekyll的配置</h3>\n<p>Jekyll的配置写在_config.yml文件中，可配置项有很多，我们不去一一追究了，很多配置虽有用但是一般不需要去关心，<a href=\"https://github.com/mojombo/jekyll/wiki/configuration\" target=\"_blank\" rel=\"external\">官方配置文档</a>有很详细的说明，确实需要了可以去这里查，我们主要说两个比较重要的东西，一个是<code>Permalink</code>，还有就是自定义项。</p>\n<p><code>Permalink</code>项用来定义你最终的文章链接是什么形式，他有下面几个变量：</p>\n<ul>\n<li><code>year</code> 文件名中的年份</li>\n<li><code>month</code> 文件名中的月份</li>\n<li><code>day</code> 文件名中的日期</li>\n<li><code>title</code> 文件名中的文章标题</li>\n<li><code>categories</code> 文章的分类，如果文章没有分类，会忽略</li>\n<li><code>i-month</code> 文件名中的除去前缀0的月份</li>\n<li><code>i-day</code> 文件名中的除去前缀0的日期</li>\n</ul>\n<p>看看最终的配置效果：</p>\n<ul>\n<li><code>permalink: pretty</code> /2009/04/29/slap-chop/index.html</li>\n<li><code>permalink: /:month-:day-:year/:title.html</code> /04-29-2009/slap-chop.html</li>\n<li><code>permalink: /blog/:year/:month/:day/:title</code> /blog/2009/04/29/slap-chop/index.html</li>\n</ul>\n<p>我使用的是：</p>\n<ul>\n<li><code>permalink: /:title</code> /github-pages</li>\n</ul>\n<p>自定义项的内容，例如我们定义了<code>title:BeiYuu的博客</code>这样一项，那么你就可以在文章中使用<code>{ { site.title }}</code>来引用这个变量了，非常方便定义些全局变量。</p>\n<h3 id=\"YAML_Front_Matter和模板变量\">YAML Front Matter和模板变量</h3>\n<p>对于使用YAML定义格式的文章，Jekyll会特别对待，他的格式要求比较严格，必须是这样的形式：</p>\n<pre><code><span class=\"bullet\">---\n</span>layout: post\n<span class=\"header\">title: Blogging Like a Hacker\n---</span>\n</code></pre><p>前后的<code>---</code>不能省略，在这之间，你可以定一些你需要的变量，layout就是调用<code>_layouts</code>下面的某一个模板，他还有一些其他的变量可以使用：</p>\n<ul>\n<li><code>permalink</code> 你可以对某一篇文章使用通用设置之外的永久链接</li>\n<li><code>published</code> 可以单独设置某一篇文章是否需要发布</li>\n<li><code>category</code> 设置文章的分类</li>\n<li><code>tags</code> 设置文章的tag</li>\n</ul>\n<p>上面的<code>title</code>就是自定义的内容，你也可以设置其他的内容，在文章中可以通过<code>{ { page.title }}</code>这样的形式调用。</p>\n<p>模板变量，我们之前也涉及了不少了，还有其他需要的变量，可以参考官方的文档：<a href=\"https://github.com/mojombo/jekyll/wiki/template-data\" title=\"Jekyll Template Data\" target=\"_blank\" rel=\"external\">https://github.com/mojombo/jekyll/wiki/template-data</a></p>\n<h2 id=\"使用Disqus管理评论\">使用Disqus管理评论</h2>\n<p>模板部分到此就算是配置完毕了，但是Jekyll只是个静态页面的发布系统，想做到关爽场倒是很容易，如果想要评论呢？也很简单。</p>\n<p>现在专做评论模块的产品有很多，比如<a href=\"http://disqus.com/\" target=\"_blank\" rel=\"external\">Disqus</a>，还有国产的<a href=\"http://duoshuo.com/\" target=\"_blank\" rel=\"external\">多说</a>，Disqus对现在各种系统的支持都比较全面，到写博客为止，多说现在仅是WordPress的一个插件，所以我这里暂时也使用不了，多说与国内的社交网络紧密结合，还是有很多亮点的，值得期待一下。我先选择了Disqus。</p>\n<p>注册账号什么的就不提了，Disqus支持很多的博客平台，参见下图：<br><img src=\"/images/githubpages/disqus-site.jpg\" alt=\"Disqus sites\"></p>\n<p>我们选择最下面的<code>Universal Code</code>就好，然后会看到一个介绍页面，把下面这段代码复制到你的模板里面，可以只复制到显示文章的模板中：</p>\n<pre><code><span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"disqus_thread\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">script</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\">\n    <span class=\"comment\">/* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */</span>\n    <span class=\"keyword\">var</span> disqus_shortname = <span class=\"string\">'example'</span>; <span class=\"comment\">// required: replace example with your forum shortname 这个地方需要改成你配置的网站名</span>\n\n    <span class=\"comment\">/* * * DON'T EDIT BELOW THIS LINE * * */</span>\n    (<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n        <span class=\"keyword\">var</span> dsq = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>); dsq.type = <span class=\"string\">'text/javascript'</span>; dsq.async = <span class=\"literal\">true</span>;\n        dsq.src = <span class=\"string\">'http://'</span> + disqus_shortname + <span class=\"string\">'.disqus.com/embed.js'</span>;\n        (<span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>] || <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'body'</span>)[<span class=\"number\">0</span>]).appendChild(dsq);\n    })();\n</span><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">noscript</span>&gt;</span>Please enable JavaScript to view the <span class=\"tag\">&lt;<span class=\"title\">a</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"http://disqus.com/?ref_noscript\"</span>&gt;</span>comments powered by Disqus.<span class=\"tag\">&lt;/<span class=\"title\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">noscript</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">a</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"http://disqus.com\"</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"dsq-brlink\"</span>&gt;</span>blog comments powered by <span class=\"tag\">&lt;<span class=\"title\">span</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"logo-disqus\"</span>&gt;</span>Disqus<span class=\"tag\">&lt;/<span class=\"title\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">a</span>&gt;</span>\n</code></pre><p>配置完之后，你也可以做一些异步加载的处理，提高性能，比如我就在最开始页面打开的时候不显示评论，当你想看评论的时候，点击“显示评论”再加载Disqus的模块。代码很简单，你可以参考我的写法。</p>\n<pre><code>$(<span class=\"string\">'#disqus_container .comment'</span>).on(<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>{\n        $(<span class=\"keyword\">this</span>).html(<span class=\"string\">'加载中...'</span>);\n        <span class=\"keyword\">var</span> disqus_shortname = <span class=\"string\">'beiyuu'</span>;\n        <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;\n        BYB.includeScript(<span class=\"string\">'http://'</span> + disqus_shortname + <span class=\"string\">'.disqus.com/embed.js'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>{$(that).remove()}); <span class=\"comment\">//这是一个加载js的函数</span>\n});\n</code></pre><p>如果你不喜欢Disqus的样式，你也可以根据他生成的HTML结构，自己改写样式覆盖它的，Disqus现在也提供每个页面的评论数接口，<a href=\"http://docs.disqus.com/developers/universal/\" target=\"_blank\" rel=\"external\">帮助文档</a>在这里可以看到。</p>\n<h2 id=\"代码高亮插件\">代码高亮插件</h2>\n<p>如果写技术博客，代码高亮少不了，有两个可选插件<a href=\"http://mihai.bazon.net/projects/javascript-syntax-highlighting-engine\" target=\"_blank\" rel=\"external\">DlHightLight代码高亮组件</a>和<a href=\"http://code.google.com/p/google-code-prettify/\" target=\"_blank\" rel=\"external\">Google Code Prettify</a>。DLHightLight支持的语言相对较少一些，有js、css、xml和html，Google的高亮插件基本上任何语言都支持，也可以自定义语言，也支持自动识别，也有行号的特别支持。</p>\n<p>Google的高亮插件使用也比较方便，只需要在<code>&lt;pre&gt;</code>的标签上加入<code>prettyprint</code>即可。所以我选择了Google Code Prettify。</p>\n<h2 id=\"搭建本地jekyll环境\">搭建本地jekyll环境</h2>\n<p>这里主要介绍一下在Mac OS X下面的安装过程，其他操作系统可以参考官方的<a href=\"https://github.com/mojombo/jekyll/wiki/Install\" target=\"_blank\" rel=\"external\">jekyll安装</a>。</p>\n<p>作为生活在水深火热的墙内人民，有必要进行下面一步修改gem的源，方便我们更快的下载所需组建：</p>\n<pre><code><span class=\"built_in\">sudo</span> gem sources --remove http://rubygems.org/ \n<span class=\"built_in\">sudo</span> gem sources <span class=\"operator\">-a</span> http://ruby.taobao.org/ \n</code></pre><p>然后用Gem安装jekyll</p>\n<pre><code><span class=\"variable\">$ </span>gem install jekyll\n</code></pre><p>不过一般如果有出错提示，你可能需要这样安装：</p>\n<pre><code>$ <span class=\"built_in\">sudo</span> gem install jekyll\n</code></pre><p>我到了这一步的时候总是提示错误<code>Failed to build gem native extension</code>，很可能的一个原因是没有安装rvm，<a href=\"https://rvm.io/rvm/install/\" target=\"_blank\" rel=\"external\">rvm的安装</a>可以参考这里，或者敲入下面的命令：</p>\n<pre><code>$ curl -L http<span class=\"variable\">s:</span>//<span class=\"built_in\">get</span>.rvm.io | bash -<span class=\"keyword\">s</span> stable --<span class=\"keyword\">ruby</span>\n</code></pre><p>然后还需要安装Markdown的解释器，这个需要在你的_config.yml里面设置<code>markdown:rdiscount</code>：</p>\n<pre><code><span class=\"variable\">$ </span>gem install jekyll rdiscount\n</code></pre><p>好了，如果一切顺利的话，本地环境就基本搭建完成了，进入之前我们建立的博客目录，运行下面的命令：</p>\n<pre><code><span class=\"comment\">$</span> <span class=\"comment\">jekyll</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">server</span>\n</code></pre><p>这个时候，你就可以通过<code>localhost:4000</code>来访问了。还有关于<a href=\"http://jekyllbootstrap.com/\" target=\"_blank\" rel=\"external\">jekyll bootstrap</a>的资料，需要自己修改调试的，可以研究一下。</p>\n<p>我在这个过程中还遇到两个诡异的没有解决的问题，一个是我放在根目录下面的blog.md等文件，在GitHub的pages服务上一切正常，可以通过<code>beiyuu.com/blog</code>访问的到，但是在本地环境下，总是<code>not found</code>，很是让人郁闷，看生成的<code>_site</code>目录下面的文件，也是正常的<code>blog.html</code>，但就是找不到，只有当我把URL改为<code>localhost:4000/blog.html</code>的时候，才能访问的到，环境不同真糟糕。</p>\n<p>还有一个是关于<code>category</code>的问题，根据<code>YAML</code>的语法，我们在文章头部可以定义文章所属的类别，也可以定义为<code>category:[blog,rss]</code>这样子的多类别，我在本地试一切正常，但是push到GitHub之后，就无法读取了，真让人着急，没有办法，只能采用别的办法满足我的需求了。这里还有一篇<a href=\"http://chxt6896.github.com/blog/2012/02/13/blog-jekyll-native.html\" target=\"_blank\" rel=\"external\">Jekyll 本地调试之若干问题</a>，安装中如果有其他问题，也可以对照参考一下。</p>\n<h2 id=\"结语\">结语</h2>\n<p>如果你跟着这篇不那么详尽的教程，成功搭建了自己的博客，恭喜你！剩下的就是保持热情的去写自己的文章吧。</p>\n","source":"_posts/2012-02-22-github-pages.md","raw":"title: 使用Github Pages建独立博客\r\n---\r\n\r\n[Github][]很好的将代码和社区联系在了一起，于是发生了很多有趣的事情，世界也因为他美好了一点点。Github作为现在最流行的代码仓库，已经得到很多大公司和项目的青睐，比如[jQuery][]、[Twitter][]等。为使项目更方便的被人理解，介绍页面少不了，甚至会需要完整的文档站，Github替你想到了这一点，他提供了[Github Pages][]的服务，不仅可以方便的为项目建立介绍站点，也可以用来建立个人博客。\r\n\r\nGithub Pages有以下几个优点：\r\n\r\n<ul>\r\n    <li>轻量级的博客系统，没有麻烦的配置</li>\r\n    <li>使用标记语言，比如<a href=\"http://markdown.tw\">Markdown</a></li>\r\n    <li>无需自己搭建服务器</li>\r\n    <li>根据Github的限制，对应的每个站有300MB空间</li>\r\n    <li>可以绑定自己的域名</li>\r\n</ul>\r\n\r\n当然他也有缺点：\r\n\r\n* 使用[Jekyll][]模板系统，相当于静态页发布，适合博客，文档介绍等。\r\n* 动态程序的部分相当局限，比如没有评论，不过还好我们有解决方案。\r\n* 基于Git，很多东西需要动手，不像Wordpress有强大的后台\r\n\r\n大致介绍到此，作为个人博客来说，简洁清爽的表达自己的工作、心得，就已达目标，所以Github Pages是我认为此需求最完美的解决方案了。\r\n\r\n## 购买、绑定独立域名\r\n虽说[Godaddy][]曾支持过SOPA，并且首页放着极其不专业的大胸美女，但是作为域名服务商他做的还不赖，选择它最重要的原因是他支持支付宝，没有信用卡有时真的很难过。\r\n\r\n域名的购买不用多讲，注册、选域名、支付，有网购经验的都毫无压力，优惠码也遍地皆是。域名的配置需要提醒一下，因为伟大英明的GFW的存在，我们必须多做些事情。\r\n\r\n流传Godaddy的域名解析服务器被墙掉，导致域名无法访问，后来这个事情在[BeiYuu][]也发生了，不得已需要把域名解析服务迁移到国内比较稳定的服务商处，这个迁移对于域名来说没有什么风险，最终的控制权还是在Godaddy那里，你随时都可以改回去。\r\n\r\n我们选择[DNSPod][]的服务，他们的产品做得不错，易用、免费，收费版有更高端的功能，暂不需要。注册登录之后，按照DNSPod的说法，只需三步（我们插入一步）：\r\n\r\n<ul>\r\n\t<li>首先添加域名记录，可参考DNSPod的帮助文档：<a href=\"https://www.dnspod.cn/Support\">https://www.dnspod.cn/Support</a></li>\r\n\t<li>在DNSPod自己的域名下添加一条<a href=\"http://baike.baidu.com/view/65575.htm\">A记录</a>，地址就是Github Pages的服务IP地址：207.97.227.245</li>\r\n\t<li>在域名注册商处修改DNS服务:去Godaddy修改Nameservers为这两个地址：f1g1ns1.dnspod.net、f1g1ns2.dnspod.net。如果你不明白在哪里修改，可以参考这里：<a href=\"https://www.dnspod.cn/support/index/fid/119\">Godaddy注册的域名如何使用DNSPod</a></li>\r\n\t<li>等待域名解析生效</li>\r\n</ul>\r\n\r\n域名的配置部分完成，跪谢方校长。\r\n\r\n## 配置和使用Github\r\nGit是版本管理的未来，他的优点我不再赘述，相关资料很多。推荐这本[Git中文教程][4]。\r\n\r\n要使用Git，需要安装它的客户端，推荐在Linux下使用Git，会比较方便。Windows版的下载地址在这里：[http://code.google.com/p/msysgit/downloads/list](http://code.google.com/p/msysgit/downloads/list \"Windows版Git客户端\")。其他系统的安装也可以参考官方的[安装教程][5]。\r\n\r\n下载安装客户端之后，各个系统的配置就类似了，我们使用windows作为例子，Linux和Mac与此类似。\r\n\r\n在Windows下，打开Git Bash，其他系统下面则打开终端（Terminal）：\r\n![Git Bash](/images/githubpages/bootcamp_1_win_gitbash.jpg)\r\n\r\n###1、检查SSH keys的设置\r\n首先我们需要检查你电脑上现有的ssh key：\r\n\r\n    $ cd ~/.ssh\r\n\r\n如果显示“No such file or directory”，跳到第三步，否则继续。\r\n\r\n###2、备份和移除原来的ssh key设置：\r\n因为已经存在key文件，所以需要备份旧的数据并删除：\r\n\r\n    $ ls\r\n    config\tid_rsa\tid_rsa.pub\tknown_hosts\r\n    $ mkdir key_backup\r\n    $ cp id_rsa* key_backup\r\n    $ rm id_rsa*\r\n\r\n###3、生成新的SSH Key：\r\n输入下面的代码，就可以生成新的key文件，我们只需要默认设置就好，所以当需要输入文件名的时候，回车就好。\r\n\r\n    $ ssh-keygen -t rsa -C \"邮件地址@youremail.com\"\r\n    Generating public/private rsa key pair.\r\n    Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):<回车就好>\r\n\r\n然后系统会要你输入加密串（[Passphrase][6]）：\r\n\r\n    Enter passphrase (empty for no passphrase):<输入加密串>\r\n    Enter same passphrase again:<再次输入加密串>\r\n\r\n最后看到这样的界面，就成功设置ssh key了：\r\n![ssh key success](/images/githubpages/ssh-key-set.png)\r\n\r\n###4、添加SSH Key到GitHub：\r\n在本机设置SSH Key之后，需要添加到GitHub上，以完成SSH链接的设置。\r\n\r\n用文本编辑工具打开id_rsa.pub文件，如果看不到这个文件，你需要设置显示隐藏文件。准确的复制这个文件的内容，才能保证设置的成功。\r\n\r\n在GitHub的主页上点击设置按钮：\r\n![github account setting](/images/githubpages/github-account-setting.png)\r\n\r\n选择SSH Keys项，把复制的内容粘贴进去，然后点击Add Key按钮即可：\r\n![set ssh keys](/images/githubpages/bootcamp_1_ssh.jpg)\r\n\r\nPS：如果需要配置多个GitHub账号，可以参看这个[多个github帐号的SSH key切换](http://omiga.org/blog/archives/2269)，不过需要提醒一下的是，如果你只是通过这篇文章中所述配置了Host，那么你多个账号下面的提交用户会是一个人，所以需要通过命令`git config --global --unset user.email`删除用户账户设置，在每一个repo下面使用`git config --local user.email '你的github邮箱@mail.com'` 命令单独设置用户账户信息\r\n\r\n###5、测试一下\r\n可以输入下面的命令，看看设置是否成功，`git@github.com`的部分不要修改：\r\n\r\n    $ ssh -T git@github.com\r\n\r\n\r\n如果是下面的反应：\r\n\r\n    The authenticity of host 'github.com (207.97.227.239)' can't be established.\r\n    RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.\r\n    Are you sure you want to continue connecting (yes/no)?\r\n\r\n\r\n不要紧张，输入`yes`就好，然后会看到：\r\n\r\n    Hi <em>username</em>! You've successfully authenticated, but GitHub does not provide shell access.\r\n\r\n###6、设置你的账号信息\r\n现在你已经可以通过SSH链接到GitHub了，还有一些个人信息需要完善的。\r\n\r\nGit会根据用户的名字和邮箱来记录提交。GitHub也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的，名字必须是你的真名，而不是GitHub的昵称。\r\n\r\n    $ git config --global user.name \"你的名字\"\r\n    $ git config --global user.email \"your_email@youremail.com\"\r\n\r\n####设置GitHub的token\r\n\r\n2012-4-28补充：新版的接口已经不需要配置token了，所以下面这段可以跳过了\r\n\r\n有些工具没有通过SSH来链接GitHub。如果要使用这类工具，你需要找到然后设置你的API Token。\r\n\r\n在GitHub上，你可以点击*Account Setting > Account Admin*：\r\n![set ssh keys](/images/githubpages/bootcamp_1_token.jpg)\r\n\r\n然后在你的命令行中，输入下面的命令，把token添加进去：\r\n\r\n    $ git config --global user.name \"你的名字\"\r\n    $ git config --global user.token 0123456789your123456789token\r\n\r\n如果你改了GitHub的密码，需要重新设置token。\r\n\r\n###成功了\r\n好了，你已经可以成功连接GitHub了。\r\n\r\n## 使用GitHub Pages建立博客\r\n与GitHub建立好链接之后，就可以方便的使用它提供的Pages服务，GitHub Pages分两种，一种是你的GitHub用户名建立的`username.github.io`这样的用户&组织页（站），另一种是依附项目的pages。\r\n\r\n###User & Organization Pages\r\n想建立个人博客是用的第一种，形如`beiyuu.github.io`这样的可访问的站，每个用户名下面只能建立一个，创建之后点击`Admin`进入项目管理，可以看到是这样的：\r\n![user pages](/images/githubpages/user-pages.png)\r\n而普通的项目是这样的，即使你也是用的`othername.github.io`：\r\n![other pages](/images/githubpages/other-pages.png)\r\n\r\n创建好`username.github.io`项目之后，提交一个`index.html`文件，然后`push`到GitHub的`master`分支（也就是普通意义上的主干）。第一次页面生效需要一些时间，大概10分钟左右。\r\n\r\n生效之后，访问`username.github.io`就可以看到你上传的页面了，[beiyuu.github.com][7]就是一个例子。\r\n\r\n关于第二种项目`pages`，简单提一下，他和用户pages使用的后台程序是同一套，只不过它的目的是项目的帮助文档等跟项目绑定的内容，所以需要在项目的`gh-pages`分支上去提交相应的文件，GitHub会自动帮你生成项目pages。具体的使用帮助可以参考[Github Pages][]的官方文档：\r\n\r\n###绑定域名\r\n我们在第一部分就提到了在DNS部分的设置，再来看在GitHub的配置，要想让`username.github.io`能通过你自己的域名来访问，需要在项目的根目录下新建一个名为`CNAME`的文件，文件内容形如：\r\n\r\n    beiyuu.com\r\n\r\n你也可以绑定在二级域名上：\r\n\r\n    blog.beiyuu.com\r\n\r\n需要提醒的一点是，如果你使用形如`beiyuu.com`这样的一级域名的话，需要在DNS处设置A记录到`207.97.227.245`（**这个地址会有变动，[这里][a-record]查看**），而不是在DNS处设置为CNAME的形式，否则可能会对其他服务（比如email）造成影响。\r\n\r\n设置成功后，根据DNS的情况，最长可能需要一天才能生效，耐心等待吧。\r\n\r\n##Jekyll模板系统\r\nGitHub Pages为了提供对HTML内容的支持，选择了[Jekyll][]作为模板系统，Jekyll是一个强大的静态模板系统，作为个人博客使用，基本上可以满足要求，也能保持管理的方便，你可以查看[Jekyll官方文档][8]。\r\n\r\n你可以直接fork[我的项目][11]，然后改名，就有了你自己的满足Jekyll要求的文档了，当然你也可以按照下面的介绍自己创建。\r\n\r\n###Jekyll基本结构\r\nJekyll的核心其实就是一个文本的转换引擎，用你最喜欢的标记语言写文档，可以是Markdown、Textile或者HTML等等，再通过`layout`将文档拼装起来，根据你设置的URL规则来展现，这些都是通过严格的配置文件来定义，最终的产出就是web页面。\r\n\r\n基本的Jekyll结构如下：\r\n\r\n    |-- _config.yml\r\n    |-- _includes\r\n    |-- _layouts\r\n    |   |-- default.html\r\n    |   `-- post.html\r\n    |-- _posts\r\n    |   |-- 2007-10-29-why-every-programmer-should-play-nethack.textile\r\n    |   `-- 2009-04-26-barcamp-boston-4-roundup.textile\r\n    |-- _site\r\n    `-- index.html\r\n\r\n\r\n简单介绍一下他们的作用：\r\n####_config.yml\r\n配置文件，用来定义你想要的效果，设置之后就不用关心了。\r\n\r\n####_includes\r\n可以用来存放一些小的可复用的模块，方便通过`{ % include file.ext %}`（去掉前两个{中或者{与%中的空格，下同）灵活的调用。这条命令会调用_includes/file.ext文件。\r\n\r\n####_layouts\r\n这是模板文件存放的位置。模板需要通过[YAML front matter][9]来定义，后面会讲到，`{ { content }}`标记用来将数据插入到这些模板中来。\r\n\r\n####_posts\r\n你的动态内容，一般来说就是你的博客正文存放的文件夹。他的命名有严格的规定，必须是`2012-02-22-artical-title.MARKUP`这样的形式，MARKUP是你所使用标记语言的文件后缀名，根据_config.yml中设定的链接规则，可以根据你的文件名灵活调整，文章的日期和标记语言后缀与文章的标题的独立的。\r\n\r\n####_site\r\n这个是Jekyll生成的最终的文档，不用去关心。最好把他放在你的`.gitignore`文件中忽略它。\r\n\r\n####其他文件夹\r\n你可以创建任何的文件夹，在根目录下面也可以创建任何文件，假设你创建了`project`文件夹，下面有一个`github-pages.md`的文件，那么你就可以通过`yoursite.com/project/github-pages`访问的到，如果你是使用一级域名的话。文件后缀可以是`.html`或者`markdown`或者`textile`。这里还有很多的例子：[https://github.com/mojombo/jekyll/wiki/Sites](https://github.com/mojombo/jekyll/wiki/Sites)\r\n\r\n###Jekyll的配置\r\nJekyll的配置写在_config.yml文件中，可配置项有很多，我们不去一一追究了，很多配置虽有用但是一般不需要去关心，[官方配置文档][10]有很详细的说明，确实需要了可以去这里查，我们主要说两个比较重要的东西，一个是`Permalink`，还有就是自定义项。\r\n\r\n`Permalink`项用来定义你最终的文章链接是什么形式，他有下面几个变量：\r\n\r\n* `year` 文件名中的年份\r\n* `month` 文件名中的月份\r\n* `day` 文件名中的日期\r\n* `title` 文件名中的文章标题\r\n* `categories` 文章的分类，如果文章没有分类，会忽略\r\n* `i-month` 文件名中的除去前缀0的月份\r\n* `i-day` 文件名中的除去前缀0的日期\r\n\r\n看看最终的配置效果：\r\n\r\n* `permalink: pretty` /2009/04/29/slap-chop/index.html\r\n* `permalink: /:month-:day-:year/:title.html` /04-29-2009/slap-chop.html\r\n* `permalink: /blog/:year/:month/:day/:title` /blog/2009/04/29/slap-chop/index.html\r\n\r\n我使用的是：\r\n\r\n* `permalink: /:title` /github-pages\r\n\r\n自定义项的内容，例如我们定义了`title:BeiYuu的博客`这样一项，那么你就可以在文章中使用`{ { site.title }}`来引用这个变量了，非常方便定义些全局变量。\r\n\r\n###YAML Front Matter和模板变量\r\n对于使用YAML定义格式的文章，Jekyll会特别对待，他的格式要求比较严格，必须是这样的形式：\r\n\r\n    ---\r\n    layout: post\r\n    title: Blogging Like a Hacker\r\n    ---\r\n\r\n前后的`---`不能省略，在这之间，你可以定一些你需要的变量，layout就是调用`_layouts`下面的某一个模板，他还有一些其他的变量可以使用：\r\n\r\n* `permalink` 你可以对某一篇文章使用通用设置之外的永久链接\r\n* `published` 可以单独设置某一篇文章是否需要发布\r\n* `category` 设置文章的分类\r\n* `tags` 设置文章的tag\r\n\r\n上面的`title`就是自定义的内容，你也可以设置其他的内容，在文章中可以通过`{ { page.title }}`这样的形式调用。\r\n\r\n模板变量，我们之前也涉及了不少了，还有其他需要的变量，可以参考官方的文档：[https://github.com/mojombo/jekyll/wiki/template-data](https://github.com/mojombo/jekyll/wiki/template-data \"Jekyll Template Data\")\r\n\r\n## 使用Disqus管理评论\r\n模板部分到此就算是配置完毕了，但是Jekyll只是个静态页面的发布系统，想做到关爽场倒是很容易，如果想要评论呢？也很简单。\r\n\r\n现在专做评论模块的产品有很多，比如[Disqus][]，还有国产的[多说][]，Disqus对现在各种系统的支持都比较全面，到写博客为止，多说现在仅是WordPress的一个插件，所以我这里暂时也使用不了，多说与国内的社交网络紧密结合，还是有很多亮点的，值得期待一下。我先选择了Disqus。\r\n\r\n注册账号什么的就不提了，Disqus支持很多的博客平台，参见下图：\r\n![Disqus sites](/images/githubpages/disqus-site.jpg)\r\n\r\n我们选择最下面的`Universal Code`就好，然后会看到一个介绍页面，把下面这段代码复制到你的模板里面，可以只复制到显示文章的模板中：\r\n\r\n    <div id=\"disqus_thread\"></div>\r\n    <script type=\"text/javascript\">\r\n        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */\r\n        var disqus_shortname = 'example'; // required: replace example with your forum shortname 这个地方需要改成你配置的网站名\r\n\r\n        /* * * DON'T EDIT BELOW THIS LINE * * */\r\n        (function() {\r\n            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;\r\n            dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';\r\n            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);\r\n        })();\r\n    </script>\r\n    <noscript>Please enable JavaScript to view the <a href=\"http://disqus.com/?ref_noscript\">comments powered by Disqus.</a></noscript>\r\n    <a href=\"http://disqus.com\" class=\"dsq-brlink\">blog comments powered by <span class=\"logo-disqus\">Disqus</span></a>\r\n\r\n配置完之后，你也可以做一些异步加载的处理，提高性能，比如我就在最开始页面打开的时候不显示评论，当你想看评论的时候，点击“显示评论”再加载Disqus的模块。代码很简单，你可以参考我的写法。\r\n\r\n    $('#disqus_container .comment').on('click',function(){\r\n            $(this).html('加载中...');\r\n            var disqus_shortname = 'beiyuu';\r\n            var that = this;\r\n            BYB.includeScript('http://' + disqus_shortname + '.disqus.com/embed.js',function(){$(that).remove()}); //这是一个加载js的函数\r\n    });\r\n\r\n如果你不喜欢Disqus的样式，你也可以根据他生成的HTML结构，自己改写样式覆盖它的，Disqus现在也提供每个页面的评论数接口，[帮助文档][12]在这里可以看到。\r\n\r\n##代码高亮插件\r\n如果写技术博客，代码高亮少不了，有两个可选插件[DlHightLight代码高亮组件][13]和[Google Code Prettify][14]。DLHightLight支持的语言相对较少一些，有js、css、xml和html，Google的高亮插件基本上任何语言都支持，也可以自定义语言，也支持自动识别，也有行号的特别支持。\r\n\r\nGoogle的高亮插件使用也比较方便，只需要在`<pre>`的标签上加入`prettyprint`即可。所以我选择了Google Code Prettify。\r\n\r\n##搭建本地jekyll环境\r\n这里主要介绍一下在Mac OS X下面的安装过程，其他操作系统可以参考官方的[jekyll安装][15]。\r\n\r\n作为生活在水深火热的墙内人民，有必要进行下面一步修改gem的源，方便我们更快的下载所需组建：\r\n\r\n    sudo gem sources --remove http://rubygems.org/ \r\n    sudo gem sources -a http://ruby.taobao.org/ \r\n\r\n然后用Gem安装jekyll\r\n\r\n    $ gem install jekyll\r\n\r\n不过一般如果有出错提示，你可能需要这样安装：\r\n\r\n    $ sudo gem install jekyll\r\n\r\n我到了这一步的时候总是提示错误`Failed to build gem native extension`，很可能的一个原因是没有安装rvm，[rvm的安装][16]可以参考这里，或者敲入下面的命令：\r\n\r\n    $ curl -L https://get.rvm.io | bash -s stable --ruby\r\n\r\n然后还需要安装Markdown的解释器，这个需要在你的_config.yml里面设置`markdown:rdiscount`：\r\n\r\n    $ gem install jekyll rdiscount\r\n\r\n好了，如果一切顺利的话，本地环境就基本搭建完成了，进入之前我们建立的博客目录，运行下面的命令：\r\n\r\n    $ jekyll --server\r\n\r\n这个时候，你就可以通过`localhost:4000`来访问了。还有关于[jekyll bootstrap][17]的资料，需要自己修改调试的，可以研究一下。\r\n\r\n我在这个过程中还遇到两个诡异的没有解决的问题，一个是我放在根目录下面的blog.md等文件，在GitHub的pages服务上一切正常，可以通过`beiyuu.com/blog`访问的到，但是在本地环境下，总是`not found`，很是让人郁闷，看生成的`_site`目录下面的文件，也是正常的`blog.html`，但就是找不到，只有当我把URL改为`localhost:4000/blog.html`的时候，才能访问的到，环境不同真糟糕。\r\n\r\n还有一个是关于`category`的问题，根据`YAML`的语法，我们在文章头部可以定义文章所属的类别，也可以定义为`category:[blog,rss]`这样子的多类别，我在本地试一切正常，但是push到GitHub之后，就无法读取了，真让人着急，没有办法，只能采用别的办法满足我的需求了。这里还有一篇[Jekyll 本地调试之若干问题][18]，安装中如果有其他问题，也可以对照参考一下。\r\n\r\n##结语\r\n如果你跟着这篇不那么详尽的教程，成功搭建了自己的博客，恭喜你！剩下的就是保持热情的去写自己的文章吧。\r\n\r\n\r\n[BeiYuu]:    http://beiyuu.com  \"BeiYuu\"\r\n[Github]:   http://github.com \"Github\"\r\n[jQuery]:   https://github.com/jquery/jquery \"jQuery@github\"\r\n[Twitter]:  https://github.com/twitter/bootstrap \"Twitter@github\"\r\n[Github Pages]: http://pages.github.com/ \"Github Pages\"\r\n[Godaddy]:  http://www.godaddy.com/ \"Godaddy\"\r\n[Jekyll]:   https://github.com/mojombo/jekyll \"Jekyll\"\r\n[DNSPod]:   https://www.dnspod.cn/ \"DNSPod\"\r\n[Disqus]: http://disqus.com/\r\n[多说]: http://duoshuo.com/\r\n[1]:    {{ page.url}}  ({{ page.title }})\r\n[2]: http://markdown.tw/    \"Markdown语法\"\r\n[3]:    http://baike.baidu.com/view/65575.htm \"A记录\"\r\n[4]: http://progit.org/book/zh/ \"Pro Git中文版\"\r\n[5]: http://help.github.com/mac-set-up-git/ \"Mac下Git安装\"\r\n[6]: http://help.github.com/ssh-key-passphrases/\r\n[7]: http://beiyuu.github.com\r\n[8]: https://github.com/mojombo/jekyll/blob/master/README.textile\r\n[9]: https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter\r\n[10]: https://github.com/mojombo/jekyll/wiki/configuration\r\n[11]: https://github.com/beiyuu/beiyuu.github.com\r\n[12]: http://docs.disqus.com/developers/universal/\r\n[13]: http://mihai.bazon.net/projects/javascript-syntax-highlighting-engine\r\n[14]: http://code.google.com/p/google-code-prettify/\r\n[15]: https://github.com/mojombo/jekyll/wiki/Install\r\n[16]: https://rvm.io/rvm/install/\r\n[17]: http://jekyllbootstrap.com/\r\n[18]: http://chxt6896.github.com/blog/2012/02/13/blog-jekyll-native.html\r\n[a-record]: https://help.github.com/articles/my-custom-domain-isn-t-working\r\n","slug":"2012-02-22-github-pages","date":1422544870000,"updated":1422544870000,"excerpt":"","_id":"me934zzyhphvaxsq","categories":[],"tags":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"关于 JavaScript arguments.callee","content":"<h3 id=\"关于_JavaScript_arguments-callee\">关于 JavaScript arguments.callee</h3>\n<p>昨天无意间看到 arguments.callee , 今天就真对这个名词查看一下吧</p>\n<h3 id=\"摘要\">摘要</h3>\n<p>arguments.callee 包含了当前正在执行的函数</p>\n<h3 id=\"描述\">描述</h3>\n<p>callee 是 arguments 的一个属性, 它被用于在当前正在执行的函数内部指当前函数, 当函数没有名字的时候这是有用的, 比如一个无名的函数表达式(或者匿名函数).</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">注意:在第五版的 <span class=\"variable\">ECMAScript</span> 规范中, 当处于严格模式(use strict)时, 禁止使用 arguments.callee().</div><div class=\"line\">当函数必须调用它自己时, 可以通过为一个函数表达式命名或者使用函数声明来避免使用函数表达式.</div></pre></td></tr></table></figure>\n\n<h3 id=\"为什么_ECMAScript5_严格模式下禁用_callee?\">为什么 ECMAScript5 严格模式下禁用 callee?</h3>\n<p>JavaScript 的早期版本不允许为函数表达式命名, 因为这个原因函数表达式不能被递归调用.</p>\n<p>比如, 下面这个语法是行得通的</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span> <span class=\"params\">(n)</span> {</span></div><div class=\"line\">    <span class=\"keyword\">return</span> !(n &gt; <span class=\"number\">1</span>) ? <span class=\"number\">1</span> : <span class=\"built_in\">factorial</span>(n - <span class=\"number\">1</span>) * n;</div><div class=\"line\">}</div><div class=\"line\"><span class=\"matrix\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>].</span>map(<span class=\"built_in\">factorial</span>);</div></pre></td></tr></table></figure>\n\n<p>但是, 这种方式</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>].map(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(n)</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">return</span> !(n &gt; <span class=\"number\">1</span>) ? <span class=\"number\">1</span> : <span class=\"comment\">/* what goes here? */</span> (n - <span class=\"number\">1</span>) * n;</div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n<p>是不行的. 为了解决这个问题 arguments.callee 被引入进来, 你可以使用下面的语法</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>].map(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(n)</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">return</span> !(n &gt; <span class=\"number\">1</span>) ? <span class=\"number\">1</span> : <span class=\"built_in\">arguments</span>.callee(n - <span class=\"number\">1</span>) * n;</div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n<p>然而, 这是一个糟糕的解决方案, 在通常情况下这个方案(连同其它 arguments, callee 和 callee 问题)不能使用内联和尾递归(你能通过调试一些实例来实现它, 但即使是最好的代码以被检测为最优的, 这种方式也不是必须的). 最主要的问题是, 这种方式的递归调用会改变 this 值.比如:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> global = <span class=\"keyword\">this</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> sillyFunction = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(recursed)</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">if</span> (!recursed) { <span class=\"keyword\">return</span> <span class=\"built_in\">arguments</span>.callee(<span class=\"literal\">true</span>); }</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> !== global) {</div><div class=\"line\">        alert(<span class=\"string\">\"This is: \"</span> + <span class=\"keyword\">this</span>);</div><div class=\"line\">    } <span class=\"keyword\">else</span> {</div><div class=\"line\">        alert(<span class=\"string\">\"This is the global\"</span>);</div><div class=\"line\">    }</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">sillyFunction();</div></pre></td></tr></table></figure>\n\n<p>ECMAScript3 解决了这个问题通过允许为函数表达式命名, 例如:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"matrix\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>].</span>map(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span> <span class=\"params\">(n)</span> {</span></div><div class=\"line\">    <span class=\"keyword\">return</span> !(n &gt; <span class=\"number\">1</span>) ? <span class=\"number\">1</span> : <span class=\"built_in\">factorial</span>(n-<span class=\"number\">1</span>)*n;</div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n<p>这个转变有很多好处:</p>\n<ul>\n<li>在你的函数代码内部这个函数能像其它函数一样被调用</li>\n<li>在不会在外部产生一个额外的变量(不包含IE8及以下)</li>\n<li>相比通过 arguments 对象调用, 这种方式性能更好.</li>\n</ul>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/callee\" target=\"_blank\" rel=\"external\">原文</a></p>\n","source":"_posts/2015-01-27-arguments-callee.md","raw":"title: 关于 JavaScript arguments.callee\n---\n\n### 关于 JavaScript arguments.callee\n\n\n昨天无意间看到 arguments.callee , 今天就真对这个名词查看一下吧\n\n### 摘要\narguments.callee 包含了当前正在执行的函数\n### 描述\ncallee 是 arguments 的一个属性, 它被用于在当前正在执行的函数内部指当前函数, 当函数没有名字的时候这是有用的, 比如一个无名的函数表达式(或者匿名函数).\n\n````\n注意:在第五版的 ECMAScript 规范中, 当处于严格模式(use strict)时, 禁止使用 arguments.callee().\n当函数必须调用它自己时, 可以通过为一个函数表达式命名或者使用函数声明来避免使用函数表达式.\n````\n### 为什么 ECMAScript5 严格模式下禁用 callee?\nJavaScript 的早期版本不允许为函数表达式命名, 因为这个原因函数表达式不能被递归调用.\n\n比如, 下面这个语法是行得通的\n\n````\nfunction factorial (n) {\n    return !(n > 1) ? 1 : factorial(n - 1) * n;\n}\n[1,2,3,4,5].map(factorial);\n````\n但是, 这种方式\n\n````\n[1,2,3,4,5].map(function (n) {\n    return !(n > 1) ? 1 : /* what goes here? */ (n - 1) * n;\n});\n````\n是不行的. 为了解决这个问题 arguments.callee 被引入进来, 你可以使用下面的语法\n\n````\n[1,2,3,4,5].map(function (n) {\n    return !(n > 1) ? 1 : arguments.callee(n - 1) * n;\n});\n````\n然而, 这是一个糟糕的解决方案, 在通常情况下这个方案(连同其它 arguments, callee 和 callee 问题)不能使用内联和尾递归(你能通过调试一些实例来实现它, 但即使是最好的代码以被检测为最优的, 这种方式也不是必须的). 最主要的问题是, 这种方式的递归调用会改变 this 值.比如:\n\n````\nvar global = this;\n\nvar sillyFunction = function (recursed) {\n    if (!recursed) { return arguments.callee(true); }\n    if (this !== global) {\n        alert(\"This is: \" + this);\n    } else {\n        alert(\"This is the global\");\n    }\n}\n\nsillyFunction();\n````\nECMAScript3 解决了这个问题通过允许为函数表达式命名, 例如:\n\n````\n[1,2,3,4,5].map(function factorial (n) {\n    return !(n > 1) ? 1 : factorial(n-1)*n;\n});\n````\n这个转变有很多好处:\n* 在你的函数代码内部这个函数能像其它函数一样被调用\n* 在不会在外部产生一个额外的变量(不包含IE8及以下)\n* 相比通过 arguments 对象调用, 这种方式性能更好.\n\n\n[原文](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/callee)\n","slug":"2015-01-27-arguments-callee","date":1422544878000,"updated":1422544878000,"excerpt":"","_id":"ublusw0pe0ukk7ry","categories":[],"tags":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"<编写可维护的 JavaScript> 要点","content":"<h3 id=\"&lt;编写可维护的_JavaScript&gt;_要点\">&lt;编写可维护的 JavaScript&gt; 要点</h3>\n","source":"_posts/2015-01-27-maintainable-javascript.md","raw":"title: <编写可维护的 JavaScript> 要点\n---\n\n### <编写可维护的 JavaScript> 要点\n","slug":"2015-01-27-maintainable-javascript","date":1422544975000,"updated":1422544975000,"excerpt":"","_id":"jo00s8ag2lyhdvv7","categories":[],"tags":[],"comments":true,"layout":"post","photos":[],"link":""}],"Tag":[{"name":"JavaScript","_id":"l2cau3o5i5wrqmpz","posts":["1pfrgzknzisc7ioa"]}]}