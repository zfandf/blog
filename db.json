{"Asset":[{"_id":"themes/pacman/source/font/FontAwesome.otf","path":"font/FontAwesome.otf","modified":false},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.eot","path":"font/coveredbyyourgrace-webfont.eot","modified":false},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.svg","path":"font/coveredbyyourgrace-webfont.svg","modified":false},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.ttf","path":"font/coveredbyyourgrace-webfont.ttf","modified":false},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.woff","path":"font/coveredbyyourgrace-webfont.woff","modified":false},{"_id":"themes/pacman/source/font/fontawesome-webfont.eot","path":"font/fontawesome-webfont.eot","modified":false},{"_id":"themes/pacman/source/font/fontawesome-webfont.svg","path":"font/fontawesome-webfont.svg","modified":false},{"_id":"themes/pacman/source/font/fontawesome-webfont.ttf","path":"font/fontawesome-webfont.ttf","modified":false},{"_id":"themes/pacman/source/font/fontawesome-webfont.woff","path":"font/fontawesome-webfont.woff","modified":false},{"_id":"themes/pacman/source/img/author.jpg","path":"img/author.jpg","modified":false},{"_id":"themes/pacman/source/img/favicon.ico","path":"img/favicon.ico","modified":false},{"_id":"themes/pacman/source/img/icon.png","path":"img/icon.png","modified":false},{"_id":"themes/pacman/source/img/logo.svg","path":"img/logo.svg","modified":false},{"_id":"themes/pacman/source/img/pacman.jpg","path":"img/pacman.jpg","modified":false},{"_id":"themes/pacman/source/js/jquery-2.1.0.min.js","path":"js/jquery-2.1.0.min.js","modified":false},{"_id":"themes/pacman/source/css/style.styl","path":"css/style.styl","modified":false},{"_id":"themes/pacman/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":false},{"_id":"themes/pacman/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":false},{"_id":"themes/pacman/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":false},{"_id":"themes/pacman/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":false},{"_id":"themes/pacman/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":false},{"_id":"themes/pacman/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":false},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":false},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":false},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":false},{"_id":"themes/pacman/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":false},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":false},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":false},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":false},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":false},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":false},{"_id":"source/CNAME","path":"CNAME","modified":true},{"_id":"source/img/favicon.ico","path":"img/favicon.ico","modified":false},{"_id":"source/img/icon.png","path":"img/icon.png","modified":false},{"_id":"source/test/constructor.js","path":"test/constructor.js","modified":false},{"_id":"source/test/myfile.js","path":"test/myfile.js","modified":false},{"_id":"source/test/test_singleton.js","path":"test/test_singleton.js","modified":false},{"_id":"source/test/javascript_design_module/contructor.js","path":"test/javascript_design_module/contructor.js","modified":false},{"_id":"source/test/javascript_design_module/module.js","path":"test/javascript_design_module/module.js","modified":false},{"_id":"source/test/javascript_design_module/revealing_module.js","path":"test/javascript_design_module/revealing_module.js","modified":false},{"_id":"source/web/css/watch.sh","path":"web/css/watch.sh","modified":false},{"_id":"source/web/css/css/animate.css","path":"web/css/css/animate.css","modified":false},{"_id":"source/web/css/css/button.css","path":"web/css/css/button.css","modified":false},{"_id":"source/web/css/css/circle.css","path":"web/css/css/circle.css","modified":false},{"_id":"source/web/css/css/normalize.css","path":"web/css/css/normalize.css","modified":false},{"_id":"source/web/css/css/normalizev1.css","path":"web/css/css/normalizev1.css","modified":false},{"_id":"source/web/css/css/slide.css","path":"web/css/css/slide.css","modified":false},{"_id":"source/web/css/img/1.jpg","path":"web/css/img/1.jpg","modified":false},{"_id":"source/web/css/img/10.jpg","path":"web/css/img/10.jpg","modified":false},{"_id":"source/web/css/img/11.jpg","path":"web/css/img/11.jpg","modified":false},{"_id":"source/web/css/img/12.jpg","path":"web/css/img/12.jpg","modified":false},{"_id":"source/web/css/img/13.jpg","path":"web/css/img/13.jpg","modified":false},{"_id":"source/web/css/img/14.jpg","path":"web/css/img/14.jpg","modified":false},{"_id":"source/web/css/img/15.jpg","path":"web/css/img/15.jpg","modified":false},{"_id":"source/web/css/img/16.jpg","path":"web/css/img/16.jpg","modified":false},{"_id":"source/web/css/img/2.jpg","path":"web/css/img/2.jpg","modified":false},{"_id":"source/web/css/img/3.jpg","path":"web/css/img/3.jpg","modified":false},{"_id":"source/web/css/img/4.jpg","path":"web/css/img/4.jpg","modified":false},{"_id":"source/web/css/img/5.jpg","path":"web/css/img/5.jpg","modified":false},{"_id":"source/web/css/img/6.jpg","path":"web/css/img/6.jpg","modified":false},{"_id":"source/web/css/img/7.jpg","path":"web/css/img/7.jpg","modified":false},{"_id":"source/web/css/img/8.jpg","path":"web/css/img/8.jpg","modified":false},{"_id":"source/web/css/img/9.jpg","path":"web/css/img/9.jpg","modified":false},{"_id":"source/web/css/img/9.png","path":"web/css/img/9.png","modified":false},{"_id":"source/web/css/img/favicon.ico","path":"web/css/img/favicon.ico","modified":false},{"_id":"source/web/css/scss/animate.scss","path":"web/css/scss/animate.scss","modified":false},{"_id":"source/web/css/scss/button.scss","path":"web/css/scss/button.scss","modified":false},{"_id":"source/web/css/scss/circle.scss","path":"web/css/scss/circle.scss","modified":false},{"_id":"source/web/css/scss/normalize.scss","path":"web/css/scss/normalize.scss","modified":false},{"_id":"source/web/css/scss/slide.scss","path":"web/css/scss/slide.scss","modified":false}],"Cache":[{"_id":"scaffolds/draft.md","mtime":1422544158000},{"_id":"scaffolds/page.md","mtime":1422544158000},{"_id":"scaffolds/photo.md","mtime":1422544158000},{"_id":"scaffolds/post.md","mtime":1422544158000},{"_id":"themes/pacman/LICENSE","mtime":1422550073000},{"_id":"themes/pacman/README.md","mtime":1422550073000},{"_id":"themes/pacman/_config.yml","mtime":1427276287000},{"_id":"themes/pacman/package.json","mtime":1422585661000},{"_id":"themes/pacman/languages/default.yml","mtime":1422550073000},{"_id":"themes/pacman/languages/zh-CN.yml","mtime":1422550073000},{"_id":"themes/pacman/languages/zh-TW.yml","mtime":1422550073000},{"_id":"themes/pacman/scripts/fancybox.js","mtime":1422550073000},{"_id":"themes/pacman/layout/archive.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/category.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/index.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/layout.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/page.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/post.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/tag.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/_widget/archive.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/_widget/category.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/_widget/links.ejs","mtime":1422624257000},{"_id":"themes/pacman/layout/_widget/rss.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/_widget/tag.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/_widget/tagcloud.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/_partial/after_footer.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/_partial/archive.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/_partial/article.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/_partial/categories.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/_partial/footer.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/_partial/google_analytics.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/_partial/head.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/_partial/header.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/_partial/pagination.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/_partial/search.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/_partial/sidebar.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/_partial/tags.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/_partial/post/article.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/_partial/post/catetags.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/_partial/post/comment.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/_partial/post/footer.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/_partial/post/gallery.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/_partial/post/header.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/_partial/post/jiathis.ejs","mtime":1422550073000},{"_id":"themes/pacman/layout/_partial/post/pagination.ejs","mtime":1422550073000},{"_id":"themes/pacman/source/font/FontAwesome.otf","mtime":1422550073000},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.eot","mtime":1422550073000},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.svg","mtime":1422550073000},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.ttf","mtime":1422550073000},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.woff","mtime":1422550073000},{"_id":"themes/pacman/source/font/fontawesome-webfont.eot","mtime":1422550073000},{"_id":"themes/pacman/source/font/fontawesome-webfont.svg","mtime":1422550073000},{"_id":"themes/pacman/source/font/fontawesome-webfont.ttf","mtime":1422550073000},{"_id":"themes/pacman/source/font/fontawesome-webfont.woff","mtime":1422550073000},{"_id":"themes/pacman/source/img/author.jpg","mtime":1422550073000},{"_id":"themes/pacman/source/img/favicon.ico","mtime":1422585930000},{"_id":"themes/pacman/source/img/icon.png","mtime":1422585930000},{"_id":"themes/pacman/source/img/logo.svg","mtime":1422550073000},{"_id":"themes/pacman/source/img/pacman.jpg","mtime":1422550073000},{"_id":"themes/pacman/source/js/jquery-2.1.0.min.js","mtime":1422550073000},{"_id":"themes/pacman/source/css/style.styl","mtime":1422550073000},{"_id":"themes/pacman/source/css/_base/code.styl","mtime":1422550073000},{"_id":"themes/pacman/source/css/_base/font.styl","mtime":1422550073000},{"_id":"themes/pacman/source/css/_base/public.styl","mtime":1422550073000},{"_id":"themes/pacman/source/css/_base/variable.styl","mtime":1422550073000},{"_id":"themes/pacman/source/css/_partial/article.styl","mtime":1422550073000},{"_id":"themes/pacman/source/css/_partial/aside.styl","mtime":1422550073000},{"_id":"themes/pacman/source/css/_partial/duoshuo.styl","mtime":1422550073000},{"_id":"themes/pacman/source/css/_partial/footer.styl","mtime":1422550073000},{"_id":"themes/pacman/source/css/_partial/gallery.styl","mtime":1422550073000},{"_id":"themes/pacman/source/css/_partial/header.styl","mtime":1422550073000},{"_id":"themes/pacman/source/css/_partial/helper.styl","mtime":1422550073000},{"_id":"themes/pacman/source/css/_partial/index.styl","mtime":1422550073000},{"_id":"themes/pacman/source/fancybox/blank.gif","mtime":1422550073000},{"_id":"themes/pacman/source/fancybox/fancybox_loading.gif","mtime":1422550073000},{"_id":"themes/pacman/source/fancybox/fancybox_loading@2x.gif","mtime":1422550073000},{"_id":"themes/pacman/source/fancybox/fancybox_overlay.png","mtime":1422550073000},{"_id":"themes/pacman/source/fancybox/fancybox_sprite.png","mtime":1422550073000},{"_id":"themes/pacman/source/fancybox/fancybox_sprite@2x.png","mtime":1422550073000},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.css","mtime":1422550073000},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.js","mtime":1422550073000},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.pack.js","mtime":1422550073000},{"_id":"themes/pacman/source/fancybox/helpers/fancybox_buttons.png","mtime":1422550073000},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-buttons.css","mtime":1422550073000},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-buttons.js","mtime":1422550073000},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-media.js","mtime":1422550073000},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","mtime":1422550073000},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","mtime":1422550073000},{"_id":"source/CNAME","mtime":1427276013000},{"_id":"source/_drafts/oneday-1.md","mtime":1425103752000},{"_id":"source/_drafts/oneday-2.md","mtime":1425103776000},{"_id":"source/_drafts/resume.md","mtime":1425430804000},{"_id":"source/_posts/2012-02-22-github-pages.md","mtime":1422544870000},{"_id":"source/_posts/2015-01-27-arguments-callee.md","mtime":1422544878000},{"_id":"source/_posts/2015-01-27-element-select.md","mtime":1422551271000},{"_id":"source/_posts/2015-01-27-jquery-plugns.md","mtime":1422544925000},{"_id":"source/_posts/2015-01-27-js-apply-call.md","mtime":1422544938000},{"_id":"source/_posts/2015-01-27-js-base64decode.md","mtime":1423790144000},{"_id":"source/_posts/javascript-design-pattern-constructor.md","mtime":1423702784000},{"_id":"source/_posts/javascript-design-pattern-module.md","mtime":1425516981000},{"_id":"source/_posts/javascript-design-pattern-revealing.md","mtime":1423790102000},{"_id":"source/_posts/javascript-design-pattern-singleton.md","mtime":1427073877000},{"_id":"source/_posts/jquery-plugin.md","mtime":1427273549000},{"_id":"source/_posts/jshint.md","mtime":1423702784000},{"_id":"source/_posts/music-hebe-solo.md","mtime":1423701648000},{"_id":"source/_posts/music-regret-for-life.md","mtime":1423701716000},{"_id":"source/_posts/music-what-i-miss-most.md","mtime":1423701318000},{"_id":"source/img/favicon.ico","mtime":1422585930000},{"_id":"source/img/icon.png","mtime":1422585930000},{"_id":"source/resume/index.md","mtime":1425104399000},{"_id":"source/test/audio.html","mtime":1423009361000},{"_id":"source/test/constructor.js","mtime":1423096944000},{"_id":"source/test/myfile.js","mtime":1423184878000},{"_id":"source/test/test_singleton.js","mtime":1425710083000},{"_id":"source/test/javascript_design_module/contructor.js","mtime":1423529227000},{"_id":"source/test/javascript_design_module/module.js","mtime":1423789637000},{"_id":"source/test/javascript_design_module/revealing_module.js","mtime":1423787439000},{"_id":"source/web/md/jquery_plugin.md","mtime":1426228511000},{"_id":"source/web/css/animate.html","mtime":1426214702000},{"_id":"source/web/css/button.html","mtime":1426214702000},{"_id":"source/web/css/center.html","mtime":1426841406000},{"_id":"source/web/css/circle.html","mtime":1426214702000},{"_id":"source/web/css/inputplaceholder.html","mtime":1427269984000},{"_id":"source/web/css/normalize.html","mtime":1426217415000},{"_id":"source/web/css/photo.html","mtime":1426857807000},{"_id":"source/web/css/photos.html","mtime":1426858545000},{"_id":"source/web/css/slide.html","mtime":1426839376000},{"_id":"source/web/css/watch.sh","mtime":1426214702000},{"_id":"source/web/css/css/animate.css","mtime":1426214702000},{"_id":"source/web/css/css/button.css","mtime":1426214702000},{"_id":"source/web/css/css/circle.css","mtime":1426214702000},{"_id":"source/web/css/css/normalize.css","mtime":1426822896000},{"_id":"source/web/css/css/normalizev1.css","mtime":1426216899000},{"_id":"source/web/css/css/slide.css","mtime":1426838067000},{"_id":"source/web/css/img/1.jpg","mtime":1426818402000},{"_id":"source/web/css/img/10.jpg","mtime":1422954763000},{"_id":"source/web/css/img/11.jpg","mtime":1422954758000},{"_id":"source/web/css/img/12.jpg","mtime":1422954759000},{"_id":"source/web/css/img/13.jpg","mtime":1422954752000},{"_id":"source/web/css/img/14.jpg","mtime":1422954747000},{"_id":"source/web/css/img/15.jpg","mtime":1422954752000},{"_id":"source/web/css/img/16.jpg","mtime":1423553093000},{"_id":"source/web/css/img/2.jpg","mtime":1426818402000},{"_id":"source/web/css/img/3.jpg","mtime":1426818402000},{"_id":"source/web/css/img/4.jpg","mtime":1426818404000},{"_id":"source/web/css/img/5.jpg","mtime":1426818404000},{"_id":"source/web/css/img/6.jpg","mtime":1426818404000},{"_id":"source/web/css/img/7.jpg","mtime":1426818404000},{"_id":"source/web/css/img/8.jpg","mtime":1422954777000},{"_id":"source/web/css/img/9.jpg","mtime":1422954771000},{"_id":"source/web/css/img/9.png","mtime":1406083874000},{"_id":"source/web/css/img/favicon.ico","mtime":1422529076000},{"_id":"source/web/css/scss/_mixin.scss","mtime":1426858829000},{"_id":"source/web/css/scss/animate.scss","mtime":1426214702000},{"_id":"source/web/css/scss/button.scss","mtime":1426214702000},{"_id":"source/web/css/scss/circle.scss","mtime":1426214702000},{"_id":"source/web/css/scss/normalize.scss","mtime":1426822896000},{"_id":"source/web/css/scss/slide.scss","mtime":1426838067000},{"_id":"source/web/index.md","mtime":1427269907000}],"Category":[{"name":"JavaScript","_id":"0ce12qxrahzsdo1s","posts":["8arnedbxpkfpj4qw","lk62aliey21ne4ce","yzheao46zvq8k2m6","ul4edxxukgx2yju9","v60fzsz9722mweik","unb1k5wtmgcnwxu5","cbfm29bimnetxw6j"]}],"Page":[{"content":"<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n    <meta name=\"viewport\" content=\"width=device-width\">\n\n    <title>createMediaElementSource example</title>\n\n    <link rel=\"stylesheet\" href=\"\">\n    <!--[if lt IE 9]>\n    <script src=\"//html5shiv.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n</head>\n\n<body>\n<h1>createMediaElementSource example</h1>\n<audio controls>\n    <source src=\"http://192.168.10.110:9966?action=media&path=%2Fstorage%2Femulated%2F0%2FConnectMe%2Fringtones%2F%E6%9C%80%E4%BD%B3%E6%8D%9F%E5%8F%8B.mp3\" type=\"audio/ogg\">\n    <source src=\"http://192.168.10.110:9966?action=media&path=%2Fstorage%2Femulated%2F0%2FConnectMe%2Fringtones%2F%E6%9C%80%E4%BD%B3%E6%8D%9F%E5%8F%8B.mp3\" type=\"audio/mp3\">\n    <p>Browser too old to support HTML5 audio? How depressing!</p>\n</audio>\n<pre></pre>\n</body>\n<script>\n    var audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n    var myAudio = document.querySelector('audio');\n    var pre = document.querySelector('pre');\n    var myScript = document.querySelector('script');\n    pre.innerHTML = myScript.innerHTML;\n    // Create a MediaElementAudioSourceNode\n    // Feed the HTMLMediaElement into it\n    var source = audioCtx.createMediaElementSource(myAudio);\n    // Create a gain node\n    var gainNode = audioCtx.createGain();\n    // Create variables to store mouse pointer Y coordinate\n    // and HEIGHT of screen\n    var CurY;\n    var HEIGHT = window.innerHeight;\n    // Get new mouse pointer coordinates when mouse is moved\n    // then set new gain value\n//    document.onmousemove = updatePage;\n    console.log(gainNode);\n    function updatePage(e) {\n        console.log(e);\n        CurY = (window.Event) ? e.pageY : event.clientY + (document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop);\n        gainNode.gain.value = CurY/HEIGHT;\n    }\n    // connect the AudioBufferSourceNode to the gainNode\n    // and the gainNode to the destination, so we can play the\n    // music and adjust the volume using the mouse cursor\n\n</script>\n</html>","source":"test/audio.html","raw":"<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n    <meta name=\"viewport\" content=\"width=device-width\">\n\n    <title>createMediaElementSource example</title>\n\n    <link rel=\"stylesheet\" href=\"\">\n    <!--[if lt IE 9]>\n    <script src=\"//html5shiv.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n</head>\n\n<body>\n<h1>createMediaElementSource example</h1>\n<audio controls>\n    <source src=\"http://192.168.10.110:9966?action=media&path=%2Fstorage%2Femulated%2F0%2FConnectMe%2Fringtones%2F%E6%9C%80%E4%BD%B3%E6%8D%9F%E5%8F%8B.mp3\" type=\"audio/ogg\">\n    <source src=\"http://192.168.10.110:9966?action=media&path=%2Fstorage%2Femulated%2F0%2FConnectMe%2Fringtones%2F%E6%9C%80%E4%BD%B3%E6%8D%9F%E5%8F%8B.mp3\" type=\"audio/mp3\">\n    <p>Browser too old to support HTML5 audio? How depressing!</p>\n</audio>\n<pre></pre>\n</body>\n<script>\n    var audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n    var myAudio = document.querySelector('audio');\n    var pre = document.querySelector('pre');\n    var myScript = document.querySelector('script');\n    pre.innerHTML = myScript.innerHTML;\n    // Create a MediaElementAudioSourceNode\n    // Feed the HTMLMediaElement into it\n    var source = audioCtx.createMediaElementSource(myAudio);\n    // Create a gain node\n    var gainNode = audioCtx.createGain();\n    // Create variables to store mouse pointer Y coordinate\n    // and HEIGHT of screen\n    var CurY;\n    var HEIGHT = window.innerHeight;\n    // Get new mouse pointer coordinates when mouse is moved\n    // then set new gain value\n//    document.onmousemove = updatePage;\n    console.log(gainNode);\n    function updatePage(e) {\n        console.log(e);\n        CurY = (window.Event) ? e.pageY : event.clientY + (document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop);\n        gainNode.gain.value = CurY/HEIGHT;\n    }\n    // connect the AudioBufferSourceNode to the gainNode\n    // and the gainNode to the destination, so we can play the\n    // music and adjust the volume using the mouse cursor\n\n</script>\n</html>","date":1423009361000,"updated":1423009361000,"path":"test/audio.html","excerpt":"","_id":"moq6zkjjialdg3ky","title":"","comments":true,"layout":"page"},{"content":"<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title></title>\n    <link href=\"css/animate.css\" rel=\"stylesheet\">\n</head>\n<body>\n    <div class=\"fadein\"></div>\n</body>\n\n</html>","source":"web/css/animate.html","raw":"<!DOCTYPE html>\r\n<html>\r\n<head lang=\"en\">\r\n    <meta charset=\"UTF-8\">\r\n    <title></title>\r\n    <link href=\"css/animate.css\" rel=\"stylesheet\">\r\n</head>\r\n<body>\r\n    <div class=\"fadein\"></div>\r\n</body>\r\n\r\n</html>","date":1427273007000,"updated":1426214702000,"path":"web/css/animate.html","excerpt":"","_id":"wcj8ahdyd5f4fb2n","title":"","comments":true,"layout":"page"},{"content":"<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title></title>\n    <link href=\"css/button.css\" rel=\"stylesheet\">\n</head>\n<body>\n    <button class=\"button\" data-word=\"Hover Me!\"></button>\n</body>\n</html>","source":"web/css/button.html","raw":"<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title></title>\n    <link href=\"css/button.css\" rel=\"stylesheet\">\n</head>\n<body>\n    <button class=\"button\" data-word=\"Hover Me!\"></button>\n</body>\n</html>","date":1427273007000,"updated":1426214702000,"path":"web/css/button.html","excerpt":"","_id":"dmybyc8xjsxfhp15","title":"","comments":true,"layout":"page"},{"content":"<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title>图片垂直居中</title>\n    <style>\n        div {\n            float: left;\n            margin: 10px 10px 0 0;\n        }\n        .imgbox {\n            position: relative;\n            border: 1px solid #ddd;\n            width: 300px; /*也可以写入百分比*/\n            height: 300px;\n        }\n        .imgbox img {\n            /* 垂直居中精华 -.- */\n            position: absolute;\n            top: 0;\n            bottom: 0;\n            right: 0;\n            left: 0;\n            margin: auto;\n\n            /* max-width max-height 防止图片大的时候溢出 */\n            max-width: 100%;\n            max-height: 100%;\n        }\n    </style>\n</head>\n<body>\n<h3>即使盒子和图片的尺寸都不固定, 也可以使用该方式的哦, 很强悍又木有</h3>\n<div class=\"imgbox\">\n    <img src=\"img/1.jpg\">\n</div>\n<div class=\"imgbox\">\n    <img src=\"img/8.jpg\">\n</div>\n<div class=\"imgbox\">\n    <img src=\"img/9.png\">\n</div>\n</body>\n</html>","source":"web/css/center.html","raw":"<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title>图片垂直居中</title>\n    <style>\n        div {\n            float: left;\n            margin: 10px 10px 0 0;\n        }\n        .imgbox {\n            position: relative;\n            border: 1px solid #ddd;\n            width: 300px; /*也可以写入百分比*/\n            height: 300px;\n        }\n        .imgbox img {\n            /* 垂直居中精华 -.- */\n            position: absolute;\n            top: 0;\n            bottom: 0;\n            right: 0;\n            left: 0;\n            margin: auto;\n\n            /* max-width max-height 防止图片大的时候溢出 */\n            max-width: 100%;\n            max-height: 100%;\n        }\n    </style>\n</head>\n<body>\n<h3>即使盒子和图片的尺寸都不固定, 也可以使用该方式的哦, 很强悍又木有</h3>\n<div class=\"imgbox\">\n    <img src=\"img/1.jpg\">\n</div>\n<div class=\"imgbox\">\n    <img src=\"img/8.jpg\">\n</div>\n<div class=\"imgbox\">\n    <img src=\"img/9.png\">\n</div>\n</body>\n</html>","date":1427273007000,"updated":1426841406000,"path":"web/css/center.html","excerpt":"","_id":"3qvtcw8y6izagihc","title":"","comments":true,"layout":"page"},{"content":"<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title></title>\n    <link rel=\"stylesheet\" href=\"css/circle.css\">\n</head>\n<body>\n    <div class=\"main\">\n        <button id=\"button\" data-word=\"I am button\"></button>\n    </div>\n    <script>\n        window.onload = function() {\n            document.getElementById('button').onmousedown = function(e) {\n                circle(e);\n            };\n        };\n        function circle(e) {\n            var $btn = document.getElementById('button');\n            $btn.innerHTML = '<div class=\"circle\" id=\"circle\"></div>';\n\n            var $c = document.getElementById('circle');\n            $c.style.left = (e.offsetX - 25) + 'px';\n            $c.style.top = (e.offsetY - 25)+ 'px';\n\n            window.setTimeout(function() {\n                $btn.innerHTML = '';\n            }, 600);\n        }\n    </script>\n</body>\n</html>","source":"web/css/circle.html","raw":"<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title></title>\n    <link rel=\"stylesheet\" href=\"css/circle.css\">\n</head>\n<body>\n    <div class=\"main\">\n        <button id=\"button\" data-word=\"I am button\"></button>\n    </div>\n    <script>\n        window.onload = function() {\n            document.getElementById('button').onmousedown = function(e) {\n                circle(e);\n            };\n        };\n        function circle(e) {\n            var $btn = document.getElementById('button');\n            $btn.innerHTML = '<div class=\"circle\" id=\"circle\"></div>';\n\n            var $c = document.getElementById('circle');\n            $c.style.left = (e.offsetX - 25) + 'px';\n            $c.style.top = (e.offsetY - 25)+ 'px';\n\n            window.setTimeout(function() {\n                $btn.innerHTML = '';\n            }, 600);\n        }\n    </script>\n</body>\n</html>","date":1427273007000,"updated":1426214702000,"path":"web/css/circle.html","excerpt":"","_id":"ckqwjkaqk4dsq8sd","title":"","comments":true,"layout":"page"},{"content":"<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title>使用CSS 修改 input placeholder 占位文本样式</title>\n    <style>\n        /*WebKit和Blink（Safari,Google Chrome, Opera15+）使用伪元素*/\n        input::-webkit-input-placeholder {color: deeppink; }\n\n        /*Mozilla Firefox 4-18使用伪类*/\n        input:-moz-placeholder {color: deeppink;}\n\n        /*Mozilla Firefox 19+ 使用伪元素*/\n        input::-moz-placeholder {color: deeppink;}\n\n        /*IE10使用伪类*/\n        input:-ms-input-placeholder {color: deeppink;}\n\n        .code {\n            line-height: 25px;\n            padding: 10px;\n            border: 1px solid #ddd;\n            margin: 10px 0;\n            background-color: rgba(0,0,0,.9);\n            color: #ddd;\n        }\n    </style>\n</head>\n<body>\n<h3>使用CSS 修改 input placeholder 占位文本样式</h3>\n\n<hr>\nDemo:<br><br>\n<input type=\"text\" placeholder=\"我是placeholder\">\n\n<hr>\n样式定义:<br>\n<div class=\"code\">\n    /*WebKit和Blink（Safari,Google Chrome, Opera15+）使用伪元素*/<br>\n    input::-webkit-input-placeholder {color: deeppink; }<br><br>\n\n    /*Mozilla Firefox 4-18使用伪类*/<br>\n    input:-moz-placeholder {color: deeppink;}<br><br>\n\n    /*Mozilla Firefox 19+ 使用伪元素*/<br>\n    input::-moz-placeholder {color: deeppink;}<br><br>\n\n    /*IE10使用伪类*/<br>\n    input:-ms-input-placeholder {color: deeppink;}\n</div>\n\n\n</body>\n</html>","source":"web/css/inputplaceholder.html","raw":"<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title>使用CSS 修改 input placeholder 占位文本样式</title>\n    <style>\n        /*WebKit和Blink（Safari,Google Chrome, Opera15+）使用伪元素*/\n        input::-webkit-input-placeholder {color: deeppink; }\n\n        /*Mozilla Firefox 4-18使用伪类*/\n        input:-moz-placeholder {color: deeppink;}\n\n        /*Mozilla Firefox 19+ 使用伪元素*/\n        input::-moz-placeholder {color: deeppink;}\n\n        /*IE10使用伪类*/\n        input:-ms-input-placeholder {color: deeppink;}\n\n        .code {\n            line-height: 25px;\n            padding: 10px;\n            border: 1px solid #ddd;\n            margin: 10px 0;\n            background-color: rgba(0,0,0,.9);\n            color: #ddd;\n        }\n    </style>\n</head>\n<body>\n<h3>使用CSS 修改 input placeholder 占位文本样式</h3>\n\n<hr>\nDemo:<br><br>\n<input type=\"text\" placeholder=\"我是placeholder\">\n\n<hr>\n样式定义:<br>\n<div class=\"code\">\n    /*WebKit和Blink（Safari,Google Chrome, Opera15+）使用伪元素*/<br>\n    input::-webkit-input-placeholder {color: deeppink; }<br><br>\n\n    /*Mozilla Firefox 4-18使用伪类*/<br>\n    input:-moz-placeholder {color: deeppink;}<br><br>\n\n    /*Mozilla Firefox 19+ 使用伪元素*/<br>\n    input::-moz-placeholder {color: deeppink;}<br><br>\n\n    /*IE10使用伪类*/<br>\n    input:-ms-input-placeholder {color: deeppink;}\n</div>\n\n\n</body>\n</html>","date":1427273007000,"updated":1427269984000,"path":"web/css/inputplaceholder.html","excerpt":"","_id":"xzku9957duvmov5j","title":"","comments":true,"layout":"page"},{"content":"<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <link rel=\"stylesheet\" href=\"css/normalize.css\">\n    <title></title>\n</head>\n<body>\n    <form>\n        <input type=\"text\"><br>\n        <input type=\"number\"><br>\n        <input type=\"password\"><br>\n        <a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"external\">baidu.com</a><br>\n    </form>\n</body>\n</html>","source":"web/css/normalize.html","raw":"<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <link rel=\"stylesheet\" href=\"css/normalize.css\">\n    <title></title>\n</head>\n<body>\n    <form>\n        <input type=\"text\"><br>\n        <input type=\"number\"><br>\n        <input type=\"password\"><br>\n        <a href=\"http://www.baidu.com\">baidu.com</a><br>\n    </form>\n</body>\n</html>","date":1427273007000,"updated":1426217415000,"path":"web/css/normalize.html","excerpt":"","_id":"n31fkgxov4dhc0mu","title":"","comments":true,"layout":"page"},{"content":"<!DOCTYPE html>\n<html lang=\"zh-cn\">\n<head>\n    <title>Pseudo Demo</title>\n    <style>\n        body{background-color:#ccd3d7;padding:40px;}\n        h2{display:block;border-bottom:1px solid #ddd;padding:15px;}\n        p.myquote{padding:1em;font-size:16px;margin:8px 1em;position:relative;color:blue;line-height:1.7em;}\n        p.myquote:before,p.myquote:after{font-size:40px;position:absolute;padding:0;margin:0;color:green;}\n        p.myquote:hover:before,p.myquote:hover:after{color:red;font-size:50px;}\n        p.myquote:before{content:\"“\";left:0;left:-10px;}\n        p.myquote:after{content:\"”\";padding-left:15px;bottom:4px;}\n        .shbox{\n            background:#fff;\n            padding:10px;\n            width:90%;\n            margin:40px auto;\n            height:auto;\n            margin:40px auto;\n        }\n        .sh-down-lr{position:relative;}\n        .sh-down-lr:before,.sh-down-lr:after{\n            z-index: -1;\n            position: absolute;\n            content: \"\";\n            bottom: 15px;\n            left: 10px;\n            width: 50%;\n            top: 80%;\n            max-width:300px;\n            background: #777;\n            -webkit-box-shadow: 0 15px 10px #777;\n            -moz-box-shadow: 0 15px 10px #777;\n            box-shadow: 0 15px 10px #777;\n            -webkit-transform: rotate(-3deg);\n            -moz-transform: rotate(-3deg);\n            -o-transform: rotate(-3deg);\n            -ms-transform: rotate(-3deg);\n            transform: rotate(-3deg);\n        }\n        .sh-down-lr:after{\n            -webkit-transform: rotate(3deg);\n            -moz-transform: rotate(3deg);\n            -o-transform: rotate(3deg);\n            -ms-transform: rotate(3deg);\n            transform: rotate(3deg);\n            right:10px;\n            left:auto;\n        }\n        .stackone {\n            border: 6px solid #fff;\n            width: 400px;\n            height:225px;\n            margin: 50px;\n            position: relative;\n            -webkit-box-shadow: 2px 2px 5px rgba(0,0,0,0.3);\n            -moz-box-shadow: 2px 2px 5px rgba(0,0,0,0.3);\n            box-shadow: 2px 2px 5px rgba(0,0,0,0.3);\n        }\n        .stackone img{width:100%;heigth:100%;}\n        .stackone:before,.stackone:after {\n            content: \"\";\n            width: 400px;\n            height:225px;\n            background: #aaa;\n            border: 6px solid #fff;\n            position:absolute;\n            z-index:-1;\n            top:0;\n            left:-10px;\n            -webkit-box-shadow: 2px 2px 5px rgba(0,0,0,0.3);\n            -moz-box-shadow: 2px 2px 5px rgba(0,0,0,0.3);\n            box-shadow: 2px 2px 5px rgba(0,0,0,0.3);\n            -webkit-transform: rotate(-5deg);\n            -moz-transform: rotate(-5deg);\n            -o-transform: rotate(-5deg);\n            -ms-transform: rotate(-5deg);\n            transform: rotate(-5deg);\n        }\n        .stackone:after {\n            top:5px;\n            left:0;\n            -webkit-transform: rotate(3deg);\n            -moz-transform: rotate(3deg);\n            -o-transform: rotate(3deg);\n            -ms-transform: rotate(3deg);\n            transform: rotate(3deg);\n        }\n\n    </style>\n</head>\n<body>\n<div class=\"shbox sh-down-lr\">\n    <h2>CSS Demo :before, :after, box-shadow</h2>\n    <p class=\"myquote\">人最宝贵的是生命。生命属于人只有一次。人的一生应当这样度过：当回忆往事的时候，他不会因为虚度年华而悔恨，也不会因为碌碌无为而羞愧.</p>\n    <p class=\"myquote\">钢是在烈火里燃烧、高度冷却中炼成的，因此它很坚固。我们这一代人也是在斗争中和艰苦考验中锻炼出来的，并且学会了在生活中从不灰心丧气。</p>\n</div>\n<div class=\"shbox\" style=\"background:none;\">\n    <div class=\"stackone\">\n        <img src=\"http://photos.tuchong.com/392707/f/6512410.jpg\">\n    </div>\n</div>\n</body>\n</html>","source":"web/css/photo.html","raw":"<!DOCTYPE html>\n<html lang=\"zh-cn\">\n<head>\n    <title>Pseudo Demo</title>\n    <style>\n        body{background-color:#ccd3d7;padding:40px;}\n        h2{display:block;border-bottom:1px solid #ddd;padding:15px;}\n        p.myquote{padding:1em;font-size:16px;margin:8px 1em;position:relative;color:blue;line-height:1.7em;}\n        p.myquote:before,p.myquote:after{font-size:40px;position:absolute;padding:0;margin:0;color:green;}\n        p.myquote:hover:before,p.myquote:hover:after{color:red;font-size:50px;}\n        p.myquote:before{content:\"“\";left:0;left:-10px;}\n        p.myquote:after{content:\"”\";padding-left:15px;bottom:4px;}\n        .shbox{\n            background:#fff;\n            padding:10px;\n            width:90%;\n            margin:40px auto;\n            height:auto;\n            margin:40px auto;\n        }\n        .sh-down-lr{position:relative;}\n        .sh-down-lr:before,.sh-down-lr:after{\n            z-index: -1;\n            position: absolute;\n            content: \"\";\n            bottom: 15px;\n            left: 10px;\n            width: 50%;\n            top: 80%;\n            max-width:300px;\n            background: #777;\n            -webkit-box-shadow: 0 15px 10px #777;\n            -moz-box-shadow: 0 15px 10px #777;\n            box-shadow: 0 15px 10px #777;\n            -webkit-transform: rotate(-3deg);\n            -moz-transform: rotate(-3deg);\n            -o-transform: rotate(-3deg);\n            -ms-transform: rotate(-3deg);\n            transform: rotate(-3deg);\n        }\n        .sh-down-lr:after{\n            -webkit-transform: rotate(3deg);\n            -moz-transform: rotate(3deg);\n            -o-transform: rotate(3deg);\n            -ms-transform: rotate(3deg);\n            transform: rotate(3deg);\n            right:10px;\n            left:auto;\n        }\n        .stackone {\n            border: 6px solid #fff;\n            width: 400px;\n            height:225px;\n            margin: 50px;\n            position: relative;\n            -webkit-box-shadow: 2px 2px 5px rgba(0,0,0,0.3);\n            -moz-box-shadow: 2px 2px 5px rgba(0,0,0,0.3);\n            box-shadow: 2px 2px 5px rgba(0,0,0,0.3);\n        }\n        .stackone img{width:100%;heigth:100%;}\n        .stackone:before,.stackone:after {\n            content: \"\";\n            width: 400px;\n            height:225px;\n            background: #aaa;\n            border: 6px solid #fff;\n            position:absolute;\n            z-index:-1;\n            top:0;\n            left:-10px;\n            -webkit-box-shadow: 2px 2px 5px rgba(0,0,0,0.3);\n            -moz-box-shadow: 2px 2px 5px rgba(0,0,0,0.3);\n            box-shadow: 2px 2px 5px rgba(0,0,0,0.3);\n            -webkit-transform: rotate(-5deg);\n            -moz-transform: rotate(-5deg);\n            -o-transform: rotate(-5deg);\n            -ms-transform: rotate(-5deg);\n            transform: rotate(-5deg);\n        }\n        .stackone:after {\n            top:5px;\n            left:0;\n            -webkit-transform: rotate(3deg);\n            -moz-transform: rotate(3deg);\n            -o-transform: rotate(3deg);\n            -ms-transform: rotate(3deg);\n            transform: rotate(3deg);\n        }\n\n    </style>\n</head>\n<body>\n<div class=\"shbox sh-down-lr\">\n    <h2>CSS Demo :before, :after, box-shadow</h2>\n    <p class=\"myquote\">人最宝贵的是生命。生命属于人只有一次。人的一生应当这样度过：当回忆往事的时候，他不会因为虚度年华而悔恨，也不会因为碌碌无为而羞愧.</p>\n    <p class='myquote'>钢是在烈火里燃烧、高度冷却中炼成的，因此它很坚固。我们这一代人也是在斗争中和艰苦考验中锻炼出来的，并且学会了在生活中从不灰心丧气。</p>\n</div>\n<div class=\"shbox\" style=\"background:none;\">\n    <div class=\"stackone\">\n        <img src=\"http://photos.tuchong.com/392707/f/6512410.jpg\" />\n    </div>\n</div>\n</body>\n</html>","date":1427273007000,"updated":1426857807000,"path":"web/css/photo.html","excerpt":"","_id":"20vze46f6itmp0cc","title":"","comments":true,"layout":"page"},{"content":"<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title>使用伪元素 ':before', ':after' 实现相册叠加效果</title>\n</head>\n<style>\n    div {\n        width: 400px;\n        height: 200px;\n        margin: 20px;\n        position: relative;\n        border: 5px solid #fff;\n        box-shadow: 0 0 10px 1px rgba(0,0,0,.5);\n    }\n    div:before,\n    div:after {\n        content: \"\";\n        z-index: -1;\n        position: absolute;\n        top: 0;\n        left: -10px;\n        width: 100%;\n        height: 100%;\n        border: 5px solid #fff;\n        background-color: #ddd;\n        -webkit-box-shadow: 0 0 10px 1px rgba(0,0,0,.5);\n        -moz-box-shadow: 0 0 10px 1px rgba(0,0,0,.5);\n        box-shadow: 0 0 10px 1px rgba(0,0,0,.5);\n        -webkit-transform: rotate(-5deg);\n        -moz-transform: rotate(-5deg);\n        -o-transform: rotate(-5deg);\n        -ms-transform: rotate(-5deg);\n        transform: rotate(-5deg);\n    }\n    div:after {\n        top: 5px;\n        left: 0;\n        -webkit-transform: rotate(3deg);\n        -moz-transform: rotate(3deg);\n        -o-transform: rotate(3deg);\n        -ms-transform: rotate(3deg);\n        transform: rotate(3deg);\n    }\n    img {\n        width: 100%;\n        height: 100%;\n    }\n</style>\n<body>\n    <h3>使用伪元素 ':before', ':after' 实现相册叠加效果</h3>\n    <div class=\"stackone\"><img src=\"img/1.jpg\"></div>\n</body>\n</html>","source":"web/css/photos.html","raw":"<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title>使用伪元素 ':before', ':after' 实现相册叠加效果</title>\n</head>\n<style>\n    div {\n        width: 400px;\n        height: 200px;\n        margin: 20px;\n        position: relative;\n        border: 5px solid #fff;\n        box-shadow: 0 0 10px 1px rgba(0,0,0,.5);\n    }\n    div:before,\n    div:after {\n        content: \"\";\n        z-index: -1;\n        position: absolute;\n        top: 0;\n        left: -10px;\n        width: 100%;\n        height: 100%;\n        border: 5px solid #fff;\n        background-color: #ddd;\n        -webkit-box-shadow: 0 0 10px 1px rgba(0,0,0,.5);\n        -moz-box-shadow: 0 0 10px 1px rgba(0,0,0,.5);\n        box-shadow: 0 0 10px 1px rgba(0,0,0,.5);\n        -webkit-transform: rotate(-5deg);\n        -moz-transform: rotate(-5deg);\n        -o-transform: rotate(-5deg);\n        -ms-transform: rotate(-5deg);\n        transform: rotate(-5deg);\n    }\n    div:after {\n        top: 5px;\n        left: 0;\n        -webkit-transform: rotate(3deg);\n        -moz-transform: rotate(3deg);\n        -o-transform: rotate(3deg);\n        -ms-transform: rotate(3deg);\n        transform: rotate(3deg);\n    }\n    img {\n        width: 100%;\n        height: 100%;\n    }\n</style>\n<body>\n    <h3>使用伪元素 ':before', ':after' 实现相册叠加效果</h3>\n    <div class=\"stackone\"><img src=\"img/1.jpg\"></div>\n</body>\n</html>","date":1427273007000,"updated":1426858545000,"path":"web/css/photos.html","excerpt":"","_id":"79w1oz9yd20tlv74","title":"","comments":true,"layout":"page"},{"content":"<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title>HTML + CSS 实现的简单的图片轮播</title>\n    <link rel=\"stylesheet\" href=\"css/slide.css\">\n</head>\n<body>\n    <h3>HTML + CSS 实现的简单的图片轮播, 里面用到了计算, 所以 css 使用 sass 生成, <a href=\"scss/slide.scss\">sass 源码</a></h3>\n    <a href=\"http://sassmeister.com/\" target=\"_blank\" rel=\"external\">在线 sass 转换 css</a><br>\n    <a href=\"http://www.ruanyifeng.com/blog/2012/06/sass.html\" target=\"_blank\" rel=\"external\">sass 用法指南</a><br>\n    <div class=\"slider-wapper\">\n        <ul class=\"wapper-box\">\n            <li><img src=\"img/1.jpg\"></li>\n            <li><img src=\"img/2.jpg\"></li>\n            <li><img src=\"img/3.jpg\"></li>\n            <li><img src=\"img/4.jpg\"></li>\n        </ul>\n    </div>\n</body>\n</html>","source":"web/css/slide.html","raw":"<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title>HTML + CSS 实现的简单的图片轮播</title>\n    <link rel=\"stylesheet\" href=\"css/slide.css\">\n</head>\n<body>\n    <h3>HTML + CSS 实现的简单的图片轮播, 里面用到了计算, 所以 css 使用 sass 生成, <a href=\"scss/slide.scss\">sass 源码</a></h3>\n    <a href=\"http://sassmeister.com/\">在线 sass 转换 css</a><br>\n    <a href=\"http://www.ruanyifeng.com/blog/2012/06/sass.html\">sass 用法指南</a><br>\n    <div class=\"slider-wapper\">\n        <ul class=\"wapper-box\">\n            <li><img src=\"img/1.jpg\"></li>\n            <li><img src=\"img/2.jpg\"></li>\n            <li><img src=\"img/3.jpg\"></li>\n            <li><img src=\"img/4.jpg\"></li>\n        </ul>\n    </div>\n</body>\n</html>","date":1427273007000,"updated":1426839376000,"path":"web/css/slide.html","excerpt":"","_id":"hp5607shentvyfjg","title":"","comments":true,"layout":"page"},{"content":"<h1 id=\"jQuery_自定义插件\">jQuery 自定义插件</h1>\n<h3 id=\"基本要点\">基本要点</h3>\n<ul>\n<li>命名: 以 jquery.[插件名].js 命令</li>\n<li>所有的对象方法都附加到 jQuery.fn 对象上, 所有的全局函数都附加到 jQuery 上.</li>\n<li>this 指向</li>\n<li>this.each</li>\n<li>为了稳妥, 可以在插件头部各添加分号</li>\n<li>插件应该返回一个 jQuery 对象, 以保证插件的链式操作. 除非插件需要返回的是一些需要获取的量, 比如字符串或者数组.</li>\n<li>在插件中, 尽量不要使用 $ 作为 jQuery 对象的别名. 如果使用闭包来回避这个问题.</li>\n</ul>\n<h3 id=\"基本格式\">基本格式</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">;(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($)</span> </span>{</div><div class=\"line\">    <span class=\"comment\">// 代码块</span></div><div class=\"line\">})(jQuery);</div></pre></td></tr></table></figure>\n\n","source":"web/md/jquery_plugin.md","raw":"# jQuery 自定义插件\n### 基本要点\n* 命名: 以 jquery.[插件名].js 命令\n* 所有的对象方法都附加到 jQuery.fn 对象上, 所有的全局函数都附加到 jQuery 上.\n* this 指向\n* this.each\n* 为了稳妥, 可以在插件头部各添加分号\n* 插件应该返回一个 jQuery 对象, 以保证插件的链式操作. 除非插件需要返回的是一些需要获取的量, 比如字符串或者数组.\n* 在插件中, 尽量不要使用 $ 作为 jQuery 对象的别名. 如果使用闭包来回避这个问题.\n\n### 基本格式\n````javascript\n;(function($) {\n    // 代码块\n})(jQuery);\n````\n\n\n\n","date":1427273003000,"updated":1426228511000,"path":"web/md/jquery_plugin.html","excerpt":"","_id":"kkb9uudc9zayhc1o","title":"","comments":true,"layout":"page"},{"content":"<h1 id=\"Fannie_love\">Fannie love</h1>\n<h2 id=\"2015,_新的开始\">2015, 新的开始</h2>\n<ul>\n<li>一个自己的网站</li>\n<li>一个 Android 应用</li>\n<li>JavaScript 锦集<ul>\n<li><a href=\"md/jquery_plugin.md\">jQuery 自定义插件</a></li>\n<li>元素选择器</li>\n<li>上传</li>\n<li>音乐播放器</li>\n<li>视频播放器</li>\n<li>大图展示</li>\n</ul>\n</li>\n<li>CSS Demo<ul>\n<li><a href=\"css/center.html\">图片垂直居中</a></li>\n<li><a href=\"css/photos.html\">使用伪元素 ‘:before’, ‘:after’ 实现相册叠加效果</a></li>\n<li><a href=\"css/slide.html\">div + css 实现图片轮播</a></li>\n<li><a href=\"css/inputplaceholder.html\">CSS 修改 input placeholder 占位文本颜色</a></li>\n</ul>\n</li>\n<li>浏览器兼容性</li>\n</ul>\n","source":"web/index.md","raw":"# Fannie love\n## 2015, 新的开始\n* 一个自己的网站\n* 一个 Android 应用\n* JavaScript 锦集\n    - [jQuery 自定义插件](md/jquery_plugin.md)\n    - 元素选择器\n    - 上传\n    - 音乐播放器\n    - 视频播放器\n    - 大图展示\n* CSS Demo\n    - [图片垂直居中](css/center.html)\n    - [使用伪元素 ':before', ':after' 实现相册叠加效果](css/photos.html)\n    - [div + css 实现图片轮播](css/slide.html)\n    - [CSS 修改 input placeholder 占位文本颜色](css/inputplaceholder.html)\n* 浏览器兼容性\n\n","date":1427276907000,"updated":1427276907000,"path":"web/index.html","excerpt":"","_id":"n11jx59mt3wcqsrp","title":"","comments":true,"layout":"page"}],"Post":[{"title":"关于 JavaScript 中 apply 和 call","content":"<h3 id=\"关于_JavaScript_中_apply_和_call\">关于 JavaScript 中 apply 和 call</h3>\n<p>首先 apply 和 call 都是为了改变某个函数运行时的 context 即上下文而存在的, 换句话说, 就是为了改变函数体内部 this 的指向.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span><span class=\"params\">(arg1, arg2)</span> </span>{</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'arg1&gt;&gt;&gt;: '</span> + arg1);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'arg2&gt;&gt;&gt;: '</span> + arg2);</div><div class=\"line\">    <span class=\"keyword\">return</span> arg1 + arg2;</div><div class=\"line\">}</div><div class=\"line\">a.apply(<span class=\"keyword\">this</span>, [<span class=\"number\">1</span>,<span class=\"number\">2</span>]);</div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-01-27-js-apply-call.md","raw":"title: 关于 JavaScript 中 apply 和 call\n---\n\n### 关于 JavaScript 中 apply 和 call\n\n\n首先 apply 和 call 都是为了改变某个函数运行时的 context 即上下文而存在的, 换句话说, 就是为了改变函数体内部 this 的指向.\n```\nfunction a(arg1, arg2) {\n    console.log('arg1>>>: ' + arg1);\n    console.log('arg2>>>: ' + arg2);\n    return arg1 + arg2;\n}\na.apply(this, [1,2]);\n```\n","slug":"2015-01-27-js-apply-call","date":1422544938000,"updated":1422544938000,"excerpt":"","_id":"mjefctp5szub8tor","categories":[],"tags":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"select 样式重定义","content":"<h3 id=\"select_样式重定义\">select 样式重定义</h3>\n<p>留个记录, 来源<a href=\"http://stackoverflow.com/questions/1895476/how-to-style-a-select-dropdown-with-css-only-without-javascript\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/1895476/how-to-style-a-select-dropdown-with-css-only-without-javascript</a></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">select</span> <span class=\"rules\">{</span></div><div class=\"line\">   <span class=\"rule\"><span class=\"attribute\">-webkit-appearance</span>:<span class=\"value\"> none</span></span>;</div><div class=\"line\">   <span class=\"rule\"><span class=\"attribute\">-moz-appearance</span>:<span class=\"value\"> none</span></span>;</div><div class=\"line\">   <span class=\"rule\"><span class=\"attribute\">appearance</span>:<span class=\"value\"> none</span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-01-27-element-select.md","raw":"title: select 样式重定义\n---\n\n### select 样式重定义\n\n\n留个记录, 来源[http://stackoverflow.com/questions/1895476/how-to-style-a-select-dropdown-with-css-only-without-javascript](http://stackoverflow.com/questions/1895476/how-to-style-a-select-dropdown-with-css-only-without-javascript)\n````\nselect {\n   -webkit-appearance: none;\n   -moz-appearance: none;\n   appearance: none;\n}\n````\n\n\n","slug":"2015-01-27-element-select","date":1422551271000,"updated":1422551271000,"excerpt":"","_id":"enjmsv5nf931n4up","categories":[],"tags":[],"comments":true,"layout":"post","photos":[],"link":""},{"toc":false,"title":"JavaScript Base64编码转换","date":1421887251000,"categories":["0ce12qxrahzsdo1s"],"tags":["6tb2yy8kt307effl"],"content":"<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> base64EncodeChars = <span class=\"string\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> base64DecodeChars = [</div><div class=\"line\">    -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>,</div><div class=\"line\">    -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>,</div><div class=\"line\">    -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, <span class=\"number\">62</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, <span class=\"number\">63</span>,</div><div class=\"line\">    <span class=\"number\">52</span>, <span class=\"number\">53</span>, <span class=\"number\">54</span>, <span class=\"number\">55</span>, <span class=\"number\">56</span>, <span class=\"number\">57</span>, <span class=\"number\">58</span>, <span class=\"number\">59</span>, <span class=\"number\">60</span>, <span class=\"number\">61</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>,</div><div class=\"line\">    -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>,</div><div class=\"line\">    <span class=\"number\">15</span>, <span class=\"number\">16</span>, <span class=\"number\">17</span>, <span class=\"number\">18</span>, <span class=\"number\">19</span>, <span class=\"number\">20</span>, <span class=\"number\">21</span>, <span class=\"number\">22</span>, <span class=\"number\">23</span>, <span class=\"number\">24</span>, <span class=\"number\">25</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>,</div><div class=\"line\">    -<span class=\"number\">1</span>, <span class=\"number\">26</span>, <span class=\"number\">27</span>, <span class=\"number\">28</span>, <span class=\"number\">29</span>, <span class=\"number\">30</span>, <span class=\"number\">31</span>, <span class=\"number\">32</span>, <span class=\"number\">33</span>, <span class=\"number\">34</span>, <span class=\"number\">35</span>, <span class=\"number\">36</span>, <span class=\"number\">37</span>, <span class=\"number\">38</span>, <span class=\"number\">39</span>, <span class=\"number\">40</span>,</div><div class=\"line\">    <span class=\"number\">41</span>, <span class=\"number\">42</span>, <span class=\"number\">43</span>, <span class=\"number\">44</span>, <span class=\"number\">45</span>, <span class=\"number\">46</span>, <span class=\"number\">47</span>, <span class=\"number\">48</span>, <span class=\"number\">49</span>, <span class=\"number\">50</span>, <span class=\"number\">51</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>];</div><div class=\"line\">function base64encode(str) {</div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"keyword\">out</span>, i, len;</div><div class=\"line\">    <span class=\"keyword\">var</span> c1, c2, c3;</div><div class=\"line\">    len = str.length;</div><div class=\"line\">    i = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">out</span> = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(i &lt; len) {</div><div class=\"line\">        c1 = str.charCodeAt(i++) & <span class=\"number\">0xff</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (i == len) {</div><div class=\"line\">            <span class=\"keyword\">out</span> += base64EncodeChars.charAt(c1 &gt;&gt; <span class=\"number\">2</span>);</div><div class=\"line\">            <span class=\"keyword\">out</span> += base64EncodeChars.charAt((c1 & <span class=\"number\">0x3</span>) &lt;&lt; <span class=\"number\">4</span>);</div><div class=\"line\">            <span class=\"keyword\">out</span> += <span class=\"string\">\"==\"</span>;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        }</div><div class=\"line\">        c2 = str.charCodeAt(i++);</div><div class=\"line\">        <span class=\"keyword\">if</span> (i == len) {</div><div class=\"line\">            <span class=\"keyword\">out</span> += base64EncodeChars.charAt(c1 &gt;&gt; <span class=\"number\">2</span>);</div><div class=\"line\">            <span class=\"keyword\">out</span> += base64EncodeChars.charAt(((c1 & <span class=\"number\">0x3</span>)&lt;&lt; <span class=\"number\">4</span>) | ((c2 & <span class=\"number\">0xF0</span>) &gt;&gt; <span class=\"number\">4</span>));</div><div class=\"line\">            <span class=\"keyword\">out</span> += base64EncodeChars.charAt((c2 & <span class=\"number\">0xF</span>) &lt;&lt; <span class=\"number\">2</span>);</div><div class=\"line\">            <span class=\"keyword\">out</span> += <span class=\"string\">\"=\"</span>;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        }</div><div class=\"line\">        c3 = str.charCodeAt(i++);</div><div class=\"line\">        <span class=\"keyword\">out</span> += base64EncodeChars.charAt(c1 &gt;&gt; <span class=\"number\">2</span>);</div><div class=\"line\">        <span class=\"keyword\">out</span> += base64EncodeChars.charAt(((c1 & <span class=\"number\">0x3</span>)&lt;&lt; <span class=\"number\">4</span>) | ((c2 & <span class=\"number\">0xF0</span>) &gt;&gt; <span class=\"number\">4</span>));</div><div class=\"line\">        <span class=\"keyword\">out</span> += base64EncodeChars.charAt(((c2 & <span class=\"number\">0xF</span>) &lt;&lt; <span class=\"number\">2</span>) | ((c3 & <span class=\"number\">0xC0</span>) &gt;&gt;<span class=\"number\">6</span>));</div><div class=\"line\">        <span class=\"keyword\">out</span> += base64EncodeChars.charAt(c3 & <span class=\"number\">0x3F</span>);</div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">out</span>;</div><div class=\"line\">}</div><div class=\"line\">function base64decode(str) {</div><div class=\"line\">    <span class=\"keyword\">var</span> c1, c2, c3, c4;</div><div class=\"line\">    <span class=\"keyword\">var</span> i, len, <span class=\"keyword\">out</span>;</div><div class=\"line\">    len = str.length;</div><div class=\"line\">    i = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">out</span> = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(i &lt; len) {</div><div class=\"line\">        <span class=\"comment\">/* c1 */</span></div><div class=\"line\">        <span class=\"keyword\">do</span> {</div><div class=\"line\">            c1 = base64DecodeChars[str.charCodeAt(i++) & <span class=\"number\">0xff</span>];</div><div class=\"line\">        } <span class=\"keyword\">while</span>(i &lt; len && c1 == -<span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span>(c1 == -<span class=\"number\">1</span>) {</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        }</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/* c2 */</span></div><div class=\"line\">        <span class=\"keyword\">do</span> {</div><div class=\"line\">            c2 = base64DecodeChars[str.charCodeAt(i++) & <span class=\"number\">0xff</span>];</div><div class=\"line\">        } <span class=\"keyword\">while</span>(i &lt; len && c2 == -<span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span>(c2 == -<span class=\"number\">1</span>)</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">out</span> += String.fromCharCode((c1 &lt;&lt; <span class=\"number\">2</span>) | ((c2 & <span class=\"number\">0x30</span>) &gt;&gt; <span class=\"number\">4</span>));</div><div class=\"line\">        <span class=\"comment\">/* c3 */</span></div><div class=\"line\">        <span class=\"keyword\">do</span> {</div><div class=\"line\">            c3 = str.charCodeAt(i++) & <span class=\"number\">0xff</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span>(c3 == <span class=\"number\">61</span>)</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">out</span>;</div><div class=\"line\">            c3 = base64DecodeChars[c3];</div><div class=\"line\">        } <span class=\"keyword\">while</span>(i &lt; len && c3 == -<span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span>(c3 == -<span class=\"number\">1</span>)</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">out</span> += String.fromCharCode(((c2 & <span class=\"number\">0XF</span>) &lt;&lt; <span class=\"number\">4</span>) | ((c3 & <span class=\"number\">0x3C</span>) &gt;&gt; <span class=\"number\">2</span>));</div><div class=\"line\">        <span class=\"comment\">/* c4 */</span></div><div class=\"line\">        <span class=\"keyword\">do</span> {</div><div class=\"line\">            c4 = str.charCodeAt(i++) & <span class=\"number\">0xff</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span>(c4 == <span class=\"number\">61</span>)</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">out</span>;</div><div class=\"line\">            c4 = base64DecodeChars[c4];</div><div class=\"line\">        } <span class=\"keyword\">while</span>(i &lt; len && c4 == -<span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span>(c4 == -<span class=\"number\">1</span>)</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">out</span> += String.fromCharCode(((c3 & <span class=\"number\">0x03</span>) &lt;&lt; <span class=\"number\">6</span>) | c4);</div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">out</span>;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<h3 id=\"下面附带两个utf8_和_utf16_之间转换方法\">下面附带两个utf8 和 utf16 之间转换方法</h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\">function utf16to8(str) {</div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"keyword\">out</span>, i, len, c;</div><div class=\"line\">    <span class=\"keyword\">out</span> = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    len = str.length;</div><div class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; len; i++) {</div><div class=\"line\">        c = str.charCodeAt(i);</div><div class=\"line\">        <span class=\"keyword\">if</span> ((c &gt;= <span class=\"number\">0x0001</span>) && (c &lt;= <span class=\"number\">0x007F</span>)) {</div><div class=\"line\">            <span class=\"keyword\">out</span> += str.charAt(i);</div><div class=\"line\">        } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (c &gt; <span class=\"number\">0x07FF</span>) {</div><div class=\"line\">            <span class=\"keyword\">out</span> += String.fromCharCode(<span class=\"number\">0xE0</span> | ((c &gt;&gt; <span class=\"number\">12</span>) & <span class=\"number\">0x0F</span>));</div><div class=\"line\">            <span class=\"keyword\">out</span> += String.fromCharCode(<span class=\"number\">0x80</span> | ((c &gt;&gt; <span class=\"number\">6</span>) & <span class=\"number\">0x3F</span>));</div><div class=\"line\">            <span class=\"keyword\">out</span> += String.fromCharCode(<span class=\"number\">0x80</span> | ((c &gt;&gt; <span class=\"number\">0</span>) & <span class=\"number\">0x3F</span>));</div><div class=\"line\">        } <span class=\"keyword\">else</span> {</div><div class=\"line\">            <span class=\"keyword\">out</span> += String.fromCharCode(<span class=\"number\">0xC0</span> | ((c &gt;&gt; <span class=\"number\">6</span>) & <span class=\"number\">0x1F</span>));</div><div class=\"line\">            <span class=\"keyword\">out</span> += String.fromCharCode(<span class=\"number\">0x80</span> | ((c &gt;&gt; <span class=\"number\">0</span>) & <span class=\"number\">0x3F</span>));</div><div class=\"line\">        }</div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">out</span>;</div><div class=\"line\">}</div><div class=\"line\">function utf8to16(str) {</div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"keyword\">out</span>, i, len, c;</div><div class=\"line\">    <span class=\"keyword\">var</span> char2, char3;</div><div class=\"line\">    <span class=\"keyword\">out</span> = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    len = str.length;</div><div class=\"line\">    i = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(i &lt; len) {</div><div class=\"line\">        c = str.charCodeAt(i++);</div><div class=\"line\">        <span class=\"keyword\">switch</span>(c &gt;&gt; <span class=\"number\">4</span>) {</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">0</span>: <span class=\"keyword\">case</span> <span class=\"number\">1</span>: <span class=\"keyword\">case</span> <span class=\"number\">2</span>: <span class=\"keyword\">case</span> <span class=\"number\">3</span>: <span class=\"keyword\">case</span> <span class=\"number\">4</span>: <span class=\"keyword\">case</span> <span class=\"number\">5</span>: <span class=\"keyword\">case</span> <span class=\"number\">6</span>: <span class=\"keyword\">case</span> <span class=\"number\">7</span>:</div><div class=\"line\">                <span class=\"comment\">// 0xxxxxxx</span></div><div class=\"line\">                <span class=\"keyword\">out</span> += str.charAt(i-<span class=\"number\">1</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">12</span>: <span class=\"keyword\">case</span> <span class=\"number\">13</span>:</div><div class=\"line\">                <span class=\"comment\">// 110x xxxx　 10xx xxxx</span></div><div class=\"line\">                char2 = str.charCodeAt(i++);</div><div class=\"line\">                <span class=\"keyword\">out</span> += String.fromCharCode(((c & <span class=\"number\">0x1F</span>) &lt;&lt; <span class=\"number\">6</span>) | (char2 & <span class=\"number\">0x3F</span>));</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">14</span>:</div><div class=\"line\">                <span class=\"comment\">// 1110 xxxx　10xx xxxx　10xx xxxx</span></div><div class=\"line\">                char2 = str.charCodeAt(i++);</div><div class=\"line\">                char3 = str.charCodeAt(i++);</div><div class=\"line\">                <span class=\"keyword\">out</span> += String.fromCharCode(((c & <span class=\"number\">0x0F</span>) &lt;&lt; <span class=\"number\">12</span>) | ((char2 & <span class=\"number\">0x3F</span>) &lt;&lt; <span class=\"number\">6</span>) | ((char3 & <span class=\"number\">0x3F</span>) &lt;&lt; <span class=\"number\">0</span>));</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        }</div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">out</span>;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">function doit() {</div><div class=\"line\">    <span class=\"keyword\">var</span> f = document.f;</div><div class=\"line\">    <span class=\"keyword\">if</span> (f.source.<span class=\"keyword\">value</span>) {</div><div class=\"line\">        f.output.<span class=\"keyword\">value</span> = base64encode(utf16to8(f.source.<span class=\"keyword\">value</span>));</div><div class=\"line\">    }</div><div class=\"line\">    f.decode.<span class=\"keyword\">value</span> = utf8to16(base64decode(f.output.<span class=\"keyword\">value</span>));</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>the end</p>\n","source":"_posts/2015-01-27-js-base64decode.md","raw":"toc: false\ntitle: JavaScript Base64编码转换\ndate: 2015-01-22 08:40:51\ncategories:\n- JavaScript\ntags:\n- JavaScript\n---\n\n\n````\nvar base64EncodeChars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nvar base64DecodeChars = [\n    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63,\n    52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1,\n    -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\n    15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1,\n    -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n    41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1];\nfunction base64encode(str) {\n    var out, i, len;\n    var c1, c2, c3;\n    len = str.length;\n    i = 0;\n    out = \"\";\n    while(i < len) {\n        c1 = str.charCodeAt(i++) & 0xff;\n        if (i == len) {\n            out += base64EncodeChars.charAt(c1 >> 2);\n            out += base64EncodeChars.charAt((c1 & 0x3) << 4);\n            out += \"==\";\n            break;\n        }\n        c2 = str.charCodeAt(i++);\n        if (i == len) {\n            out += base64EncodeChars.charAt(c1 >> 2);\n            out += base64EncodeChars.charAt(((c1 & 0x3)<< 4) | ((c2 & 0xF0) >> 4));\n            out += base64EncodeChars.charAt((c2 & 0xF) << 2);\n            out += \"=\";\n            break;\n        }\n        c3 = str.charCodeAt(i++);\n        out += base64EncodeChars.charAt(c1 >> 2);\n        out += base64EncodeChars.charAt(((c1 & 0x3)<< 4) | ((c2 & 0xF0) >> 4));\n        out += base64EncodeChars.charAt(((c2 & 0xF) << 2) | ((c3 & 0xC0) >>6));\n        out += base64EncodeChars.charAt(c3 & 0x3F);\n    }\n    return out;\n}\nfunction base64decode(str) {\n    var c1, c2, c3, c4;\n    var i, len, out;\n    len = str.length;\n    i = 0;\n    out = \"\";\n    while(i < len) {\n        /* c1 */\n        do {\n            c1 = base64DecodeChars[str.charCodeAt(i++) & 0xff];\n        } while(i < len && c1 == -1);\n        if(c1 == -1) {\n            break;\n        }\n\n        /* c2 */\n        do {\n            c2 = base64DecodeChars[str.charCodeAt(i++) & 0xff];\n        } while(i < len && c2 == -1);\n        if(c2 == -1)\n            break;\n        out += String.fromCharCode((c1 << 2) | ((c2 & 0x30) >> 4));\n        /* c3 */\n        do {\n            c3 = str.charCodeAt(i++) & 0xff;\n            if(c3 == 61)\n                return out;\n            c3 = base64DecodeChars[c3];\n        } while(i < len && c3 == -1);\n        if(c3 == -1)\n            break;\n        out += String.fromCharCode(((c2 & 0XF) << 4) | ((c3 & 0x3C) >> 2));\n        /* c4 */\n        do {\n            c4 = str.charCodeAt(i++) & 0xff;\n            if(c4 == 61)\n                return out;\n            c4 = base64DecodeChars[c4];\n        } while(i < len && c4 == -1);\n        if(c4 == -1)\n            break;\n        out += String.fromCharCode(((c3 & 0x03) << 6) | c4);\n    }\n    return out;\n}\n````\n\n### 下面附带两个utf8 和 utf16 之间转换方法\n\n````\nfunction utf16to8(str) {\n    var out, i, len, c;\n    out = \"\";\n    len = str.length;\n    for(i = 0; i < len; i++) {\n        c = str.charCodeAt(i);\n        if ((c >= 0x0001) && (c <= 0x007F)) {\n            out += str.charAt(i);\n        } else if (c > 0x07FF) {\n            out += String.fromCharCode(0xE0 | ((c >> 12) & 0x0F));\n            out += String.fromCharCode(0x80 | ((c >> 6) & 0x3F));\n            out += String.fromCharCode(0x80 | ((c >> 0) & 0x3F));\n        } else {\n            out += String.fromCharCode(0xC0 | ((c >> 6) & 0x1F));\n            out += String.fromCharCode(0x80 | ((c >> 0) & 0x3F));\n        }\n    }\n    return out;\n}\nfunction utf8to16(str) {\n    var out, i, len, c;\n    var char2, char3;\n    out = \"\";\n    len = str.length;\n    i = 0;\n    while(i < len) {\n        c = str.charCodeAt(i++);\n        switch(c >> 4) {\n            case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7:\n                // 0xxxxxxx\n                out += str.charAt(i-1);\n                break;\n            case 12: case 13:\n                // 110x xxxx　 10xx xxxx\n                char2 = str.charCodeAt(i++);\n                out += String.fromCharCode(((c & 0x1F) << 6) | (char2 & 0x3F));\n            break;\n            case 14:\n                // 1110 xxxx　10xx xxxx　10xx xxxx\n                char2 = str.charCodeAt(i++);\n                char3 = str.charCodeAt(i++);\n                out += String.fromCharCode(((c & 0x0F) << 12) | ((char2 & 0x3F) << 6) | ((char3 & 0x3F) << 0));\n                break;\n        }\n    }\n    return out;\n}\n\nfunction doit() {\n    var f = document.f;\n    if (f.source.value) {\n        f.output.value = base64encode(utf16to8(f.source.value));\n    }\n    f.decode.value = utf8to16(base64decode(f.output.value));\n}\n````\n\nthe end\n\n","slug":"2015-01-27-js-base64decode","updated":1423790144000,"excerpt":"","_id":"8arnedbxpkfpj4qw","comments":true,"layout":"post","photos":[],"link":""},{"title":"JavaScript 设计模式 - Module (模块) 模式","date":1423528936000,"categories":["0ce12qxrahzsdo1s"],"tags":["6tb2yy8kt307effl","mo48aazlcxxhl3ou"],"content":"<p>模块是任何强大应用程序架构中不可或缺的一部分, 它通常能够帮助我们清晰的分离和组织项目中的代码单元.<br>在 JavaScript 中, 有几种用于实现模块的方法:</p>\n<ul>\n<li>对象字面量表示法</li>\n<li>Module 模式</li>\n<li>AMD 模块</li>\n<li>CommonJs 模块</li>\n<li>ECMAScript Harmony 模块</li>\n</ul>\n<p>Module 模式在某种程度上是基于对象字面量, 因此首先重新认识一下对象字面量.</p>\n<h2 id=\"对象字面量\">对象字面量</h2>\n<p>在对象字面量表示法中, 一个对象被描述为一组包含在大括号 ({}) 中, 以逗号分隔的 name/value 对. 对象内的名称可以是字符串或者标志符, 后面跟着一个冒号. 对象的最后一个 name/value 对的后面不用加都好, 如果加逗号某些浏览器(IE)将会报错.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myObj = {</div><div class=\"line\">    variableKey: variableValue,</div><div class=\"line\">    functionKey: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">        <span class=\"comment\">// dosomething</span></div><div class=\"line\">    }</div><div class=\"line\">};</div></pre></td></tr></table></figure>\n\n<p>对象字面量不需要使用 new 运算符进行实例化, 但不能用在一个语句的开头, 因为开始的可能被解读为一个块的开始. 在对象的外部, 新成员可以使用如下赋值语句添加到对象字面量上, 如: myObj.property = ‘somevalue’;<br>使用对象字面量有助于封装和组织代码<br>也就是说, 如果我们选择了这种技术, 我们可能同样也对 Module 模式感兴趣.他仍然使用对象字面量, 但只是作为一个作用域函数的返回值.</p>\n<h2 id=\"Module_(模块)_模式\">Module (模块) 模式</h2>\n<p>Module 模式最初被定义为一种在传统软件工程中为类提供私有和公有封装的方法.<br>在 JavaScript 中, Module 模式用于进一步模拟类的概念, 通过这种方式, 能够使一个单独的对象拥有公有/私有方法和变量, 从而屏蔽来自全局作用域的特殊部分.<br>产生的结果是: 函数名与在页面上其它脚本定义的函数冲突的可能性降低.</p>\n<h3 id=\"私有\">私有</h3>\n<p>Module 模式使用闭包封装 “私有” 状态和组织. 它提供一种包装混合公有/私有方法和变量的方式, 防止其泄漏致全局作用域, 并与别的开发人员接口发生冲突.通过该模式, 只需返回一个公有API, 而其他一切都维持在私有的闭包里.<br>这种形式为我们提供了一个屏蔽处理底层事件逻辑的整洁解决方案, 同时只暴露一个接口供应用程序的其它部分使用. 该模式除了返回一个对象而非一个函数外, 非常类似于一个自调用的函数表达式.<br>注意: 在 JavaScript 中, 没有真正意义上的 “私有”, JavaScript 没有访问修饰符. 因此, 我们使用函数作用域来模拟公有/私有的概念. 在 Module 模式内, 由于闭包的存在, 声明的变量和方法只在模式内部可用, 但是在返回对象上定义的变量和方法, 则对外部使用者都是可用的.</p>\n<h3 id=\"示例,_购物车\">示例, 购物车</h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 购物车</span></div><div class=\"line\"><span class=\"keyword\">var</span> basketModule = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">var</span> basket = [];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkItem</span><span class=\"params\">(item)</span> </span>{</div><div class=\"line\">        <span class=\"keyword\">if</span> (!item.id || !item.name) {</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">        }</div><div class=\"line\">        item.price = item.price || <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> {</div><div class=\"line\">        addItem: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item)</span> </span>{</div><div class=\"line\">            <span class=\"keyword\">if</span> (checkItem(item)) {</div><div class=\"line\">                basket.push(item);</div><div class=\"line\">            } <span class=\"keyword\">else</span> {</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'item is error'</span>);</div><div class=\"line\">            }</div><div class=\"line\">        },</div><div class=\"line\">        getItemCount: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">            <span class=\"keyword\">return</span> basket.length;</div><div class=\"line\">        },</div><div class=\"line\">        getTotal: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">            <span class=\"keyword\">var</span> itemCount = <span class=\"keyword\">this</span>.getItemCount(),</div><div class=\"line\">                total = <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">while</span> (itemCount--) {</div><div class=\"line\">                total += basket[itemCount].price;</div><div class=\"line\">            }</div><div class=\"line\">            <span class=\"keyword\">return</span> total;</div><div class=\"line\">        }</div><div class=\"line\">    };</div><div class=\"line\">}();</div><div class=\"line\">basketModule.addItem({</div><div class=\"line\">    id: <span class=\"number\">1</span>,</div><div class=\"line\">    name: <span class=\"string\">'JavaScript 设计模式'</span>,</div><div class=\"line\">    price: <span class=\"number\">10.4</span></div><div class=\"line\">});</div><div class=\"line\">basketModule.addItem({</div><div class=\"line\">    id: <span class=\"number\">1</span>,</div><div class=\"line\">    name: <span class=\"string\">'JavaScript 高级教程'</span>,</div><div class=\"line\">    price: <span class=\"number\">20</span></div><div class=\"line\">});</div><div class=\"line\"><span class=\"built_in\">console</span>.log(basketModule.getItemCount()); <span class=\"comment\">// 输出: 2</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(basketModule.getTotal()); <span class=\"comment\">// 输出: 30.4</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(basketModule.basket); <span class=\"comment\">// 输出: undefined</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(basketModule.basket); <span class=\"comment\">// 输出: undefined</span></div></pre></td></tr></table></figure>\n\n<p>Module 模式将私有的方法和属性都封装在闭包内, 防止外部访问, 可以被外部访问的方法和属性都定义在返回的对象上.<br>请注意上面的 basket模块中的作用域函数是如何包裹在所有函数周围, 然后调用并立即存储返回值. 这有很多优点:</p>\n<ul>\n<li>只有我们的模块才能享有拥有私有函数的自由. 因为它们不会暴露于页面的其余部分(只会暴露与我们输出的 API)</li>\n<li>函数往往已声明并命名, 在试图找到有哪些函数抛出异常时, 这将使得在调试器中显示调用堆栈变得更容易</li>\n</ul>\n<h2 id=\"Module_模式变化\">Module 模式变化</h2>\n<h3 id=\"引入混入\">引入混入</h3>\n<p>模式的这种变化演示了全局变量如何作为参数传递给模块的匿名函数. 这允许我们引入它们, 并按照我们希望的方式为它们取个本地别名.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> TestModule = (<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(j, w)</span> </span>{</div><div class=\"line\">    <span class=\"comment\">// dosomething</span></div><div class=\"line\">})(jQuery, <span class=\"built_in\">window</span>);</div></pre></td></tr></table></figure>\n\n<p>引入的这种变化可以自定义使用的全局变量的名称, 即使外部全局变量名称改变, 该模块也只需要修改传入的参数名.</p>\n<h3 id=\"引出\">引出</h3>\n<p>引出变化允许我们声明全局变量, 而不需要实现它们.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> TestModule = (<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">module</span> = {},</div><div class=\"line\">        privateVariable = <span class=\"string\">'hello world'</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">module</span>.publicProperty = <span class=\"string\">'Foobar'</span>;</div><div class=\"line\">    <span class=\"built_in\">module</span>.publicMethod = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">        <span class=\"comment\">// dosomething</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(privateVariable);</div><div class=\"line\">    };</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">module</span>;</div><div class=\"line\">})();</div></pre></td></tr></table></figure>\n\n","source":"_posts/javascript-design-pattern-module.md","raw":"title: JavaScript 设计模式 - Module (模块) 模式\ndate: 2015-02-10 08:42:16\ncategories:\n- JavaScript\ntags:\n- JavaScript\n- Javascript Design Pattern\n---\n\n模块是任何强大应用程序架构中不可或缺的一部分, 它通常能够帮助我们清晰的分离和组织项目中的代码单元.\n在 JavaScript 中, 有几种用于实现模块的方法:\n* 对象字面量表示法\n* Module 模式\n* AMD 模块\n* CommonJs 模块\n* ECMAScript Harmony 模块\n\nModule 模式在某种程度上是基于对象字面量, 因此首先重新认识一下对象字面量.\n## 对象字面量\n在对象字面量表示法中, 一个对象被描述为一组包含在大括号 ({}) 中, 以逗号分隔的 name/value 对. 对象内的名称可以是字符串或者标志符, 后面跟着一个冒号. 对象的最后一个 name/value 对的后面不用加都好, 如果加逗号某些浏览器(IE)将会报错.\n````\nvar myObj = {\n    variableKey: variableValue,\n    functionKey: function() {\n        // dosomething\n    }\n};\n````\n对象字面量不需要使用 new 运算符进行实例化, 但不能用在一个语句的开头, 因为开始的可能被解读为一个块的开始. 在对象的外部, 新成员可以使用如下赋值语句添加到对象字面量上, 如: myObj.property = 'somevalue';\n使用对象字面量有助于封装和组织代码\n也就是说, 如果我们选择了这种技术, 我们可能同样也对 Module 模式感兴趣.他仍然使用对象字面量, 但只是作为一个作用域函数的返回值.\n\n## Module (模块) 模式\nModule 模式最初被定义为一种在传统软件工程中为类提供私有和公有封装的方法.\n在 JavaScript 中, Module 模式用于进一步模拟类的概念, 通过这种方式, 能够使一个单独的对象拥有公有/私有方法和变量, 从而屏蔽来自全局作用域的特殊部分.\n产生的结果是: 函数名与在页面上其它脚本定义的函数冲突的可能性降低.\n\n### 私有\nModule 模式使用闭包封装 \"私有\" 状态和组织. 它提供一种包装混合公有/私有方法和变量的方式, 防止其泄漏致全局作用域, 并与别的开发人员接口发生冲突.通过该模式, 只需返回一个公有API, 而其他一切都维持在私有的闭包里.\n这种形式为我们提供了一个屏蔽处理底层事件逻辑的整洁解决方案, 同时只暴露一个接口供应用程序的其它部分使用. 该模式除了返回一个对象而非一个函数外, 非常类似于一个自调用的函数表达式.\n注意: 在 JavaScript 中, 没有真正意义上的 \"私有\", JavaScript 没有访问修饰符. 因此, 我们使用函数作用域来模拟公有/私有的概念. 在 Module 模式内, 由于闭包的存在, 声明的变量和方法只在模式内部可用, 但是在返回对象上定义的变量和方法, 则对外部使用者都是可用的.\n\n### 示例, 购物车\n````\n// 购物车\nvar basketModule = function() {\n    var basket = [];\n\n    function checkItem(item) {\n        if (!item.id || !item.name) {\n            return false;\n        }\n        item.price = item.price || 0;\n        return true;\n    }\n\n    return {\n        addItem: function(item) {\n            if (checkItem(item)) {\n                basket.push(item);\n            } else {\n                console.log('item is error');\n            }\n        },\n        getItemCount: function() {\n            return basket.length;\n        },\n        getTotal: function() {\n            var itemCount = this.getItemCount(),\n                total = 0;\n            while (itemCount--) {\n                total += basket[itemCount].price;\n            }\n            return total;\n        }\n    };\n}();\nbasketModule.addItem({\n    id: 1,\n    name: 'JavaScript 设计模式',\n    price: 10.4\n});\nbasketModule.addItem({\n    id: 1,\n    name: 'JavaScript 高级教程',\n    price: 20\n});\nconsole.log(basketModule.getItemCount()); // 输出: 2\nconsole.log(basketModule.getTotal()); // 输出: 30.4\nconsole.log(basketModule.basket); // 输出: undefined\nconsole.log(basketModule.basket); // 输出: undefined\n````\nModule 模式将私有的方法和属性都封装在闭包内, 防止外部访问, 可以被外部访问的方法和属性都定义在返回的对象上.\n请注意上面的 basket模块中的作用域函数是如何包裹在所有函数周围, 然后调用并立即存储返回值. 这有很多优点:\n* 只有我们的模块才能享有拥有私有函数的自由. 因为它们不会暴露于页面的其余部分(只会暴露与我们输出的 API)\n* 函数往往已声明并命名, 在试图找到有哪些函数抛出异常时, 这将使得在调试器中显示调用堆栈变得更容易\n\n## Module 模式变化\n### 引入混入\n模式的这种变化演示了全局变量如何作为参数传递给模块的匿名函数. 这允许我们引入它们, 并按照我们希望的方式为它们取个本地别名.\n````\nvar TestModule = (function(j, w) {\n    // dosomething\n})(jQuery, window);\n````\n引入的这种变化可以自定义使用的全局变量的名称, 即使外部全局变量名称改变, 该模块也只需要修改传入的参数名.\n### 引出\n引出变化允许我们声明全局变量, 而不需要实现它们.\n````\nvar TestModule = (function() {\n    var module = {},\n        privateVariable = 'hello world';\n\n    module.publicProperty = 'Foobar';\n    module.publicMethod = function() {\n        // dosomething\n        console.log(privateVariable);\n    };\n    return module;\n})();\n````\n\n\n\n","slug":"javascript-design-pattern-module","updated":1425516981000,"excerpt":"","_id":"lk62aliey21ne4ce","comments":true,"layout":"post","photos":[],"link":""},{"title":"JavaScript 设计模式 - Contructor (构造器) 模式","date":1423442451000,"categories":["0ce12qxrahzsdo1s"],"tags":["6tb2yy8kt307effl","mo48aazlcxxhl3ou"],"content":"<h1 id=\"JavaScript_设计模式_-_Contructor_(构造器)_模式\">JavaScript 设计模式 - Contructor (构造器) 模式</h1>\n<h2 id=\"基本_Contructor\">基本 Contructor</h2>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span><span class=\"params\">(name, age)</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">    <span class=\"keyword\">this</span>.toString = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'我是'</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">', 今年'</span> + <span class=\"keyword\">this</span>.age + <span class=\"string\">'岁'</span>;</div><div class=\"line\">    };</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 用法, 创建 Person 的新实例:</span></div><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'fannie'</span>, <span class=\"number\">27</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'job'</span>, <span class=\"number\">28</span>);</div></pre></td></tr></table></figure>\n\n<h2 id=\"带原型的_Contructor_(构造器)\">带原型的 Contructor (构造器)</h2>\n<p>JavaScript 中有一个名为 prototype 的属性. 调用 JAvaScript 构造器创建一个对象后, 新对象就会具有构造器原型的所有属性. 通过这种方式, 可以创建多个对象并访问相同的原型.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span><span class=\"params\">(name, age)</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 注意: 在这里我们使用 Object.prototype.newMethod 而不是 Object.prototype 是为了避免重新定义 prototype 对象.</span></div><div class=\"line\">Person.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'我是'</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">', 今年'</span> + <span class=\"keyword\">this</span>.age + <span class=\"string\">'岁'</span>;</div><div class=\"line\">};</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 用法</span></div><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'fannie'</span>, <span class=\"number\">27</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'job'</span>, <span class=\"number\">28</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(p1.toString());</div><div class=\"line\"><span class=\"built_in\">console</span>.log(p2.toString());</div></pre></td></tr></table></figure>\n\n<p>现在 toString() 的单一实例就能够在所有 Person 对象之间共享.</p>\n","source":"_posts/javascript-design-pattern-constructor.md","raw":"title: JavaScript 设计模式 - Contructor (构造器) 模式\ndate: 2015-02-09 08:40:51\ncategories:\n- JavaScript\ntags:\n- JavaScript\n- Javascript Design Pattern\n---\n\n# JavaScript 设计模式 - Contructor (构造器) 模式\n## 基本 Contructor\n````\nfunction Person(name, age) {\n    this.name = name;\n    this.age = age;\n    this.toString = function() {\n        return '我是' + this.name + ', 今年' + this.age + '岁';\n    };\n}\n\n// 用法, 创建 Person 的新实例:\nvar p1 = new Person('fannie', 27);\nvar p2 = new Person('job', 28);\n````\n\n## 带原型的 Contructor (构造器)\nJavaScript 中有一个名为 prototype 的属性. 调用 JAvaScript 构造器创建一个对象后, 新对象就会具有构造器原型的所有属性. 通过这种方式, 可以创建多个对象并访问相同的原型.\n````\nfunction Person(name, age) {\n    this.name = name;\n    this.age = age;\n}\n\n// 注意: 在这里我们使用 Object.prototype.newMethod 而不是 Object.prototype 是为了避免重新定义 prototype 对象.\nPerson.prototype.toString = function() {\n    return '我是' + this.name + ', 今年' + this.age + '岁';\n};\n\n// 用法\nvar p1 = new Person('fannie', 27);\nvar p2 = new Person('job', 28);\n\nconsole.log(p1.toString());\nconsole.log(p2.toString());\n````\n现在 toString() 的单一实例就能够在所有 Person 对象之间共享.\n","slug":"javascript-design-pattern-constructor","updated":1423702784000,"excerpt":"","_id":"yzheao46zvq8k2m6","comments":true,"layout":"post","photos":[],"link":""},{"title":"JavaScript 设计模式 - Revealing Module (揭示模块) 模式","date":1423702471000,"categories":["0ce12qxrahzsdo1s"],"tags":["6tb2yy8kt307effl","mo48aazlcxxhl3ou"],"content":"<p>Revealing Module 模式 是 Module 模式 的改进模式,<br>使用 Module 模式, 当我们想从另外一个方法调用一个公有方法或者访问共有变量时, 必须要重复主对象的名称. 并且在使用 Module 模式时, 必须要切换到对象字面量表示法来让某种方法变成公有方法.<br>用一个栗子展示Module 模式的缺点:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> testModule = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'dosomething'</span>);</div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> {</div><div class=\"line\">        func1: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'func1'</span>);</div><div class=\"line\">            doSomething();</div><div class=\"line\">        },</div><div class=\"line\">        func2: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'func2'</span>);</div><div class=\"line\">            <span class=\"comment\">// 如果我想在这儿调用 func1..</span></div><div class=\"line\">            testModule.func1();</div><div class=\"line\">        }</div><div class=\"line\">    };</div><div class=\"line\">}();</div></pre></td></tr></table></figure>\n\n<p>在上个例子中, 我想在 func2 中调用 func1 方法, 需要加上主对象的名字. 针对这一问题, Christian Heilmann 创建了 Revealing Module, 它能够在私有范围内简单定义所有的函数和变量, 并返回一个匿名对象, 返回的对象中拥有指向私有函数的指针, 该函数是他希望展示为公有的方法.<br>使用示例:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myRevealingModule = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">var</span> privateVar = <span class=\"string\">\"Fannie\"</span>,</div><div class=\"line\">        publicVar = <span class=\"string\">\"Job\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">privateFunction</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"name is \"</span> + privateVar);</div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">publicSetName</span><span class=\"params\">(name)</span> </span>{</div><div class=\"line\">        privateVar = name;</div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">publicGetName</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">        privateFunction();</div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 将暴漏的共有指针指向私有函数和属性</span></div><div class=\"line\">    <span class=\"keyword\">return</span> {</div><div class=\"line\">        setName: publicSetName,</div><div class=\"line\">        greeting: publicVar,</div><div class=\"line\">        getName: publicGetName</div><div class=\"line\">    };</div><div class=\"line\">}();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(myRevealingModule.greeting);</div><div class=\"line\">myRevealingModule.getName();</div><div class=\"line\">myRevealingModule.setName(<span class=\"string\">'zhangff'</span>);</div><div class=\"line\">myRevealingModule.getName();</div></pre></td></tr></table></figure>\n\n<p>优点: 该模式可以使脚本语法更加一致. 在模块代码底部, 它会很容易指出哪些函数和变量可以被公开访问, 从而改善可读性.<br>缺点: 如果一个私有函数引用一个共有函数, 在需要打补丁时, 公有函数是不能被覆盖的. 这是因为私有函数将继续引用私有实现, 该模式并不适用于共有成员, 只适用于函数.</p>\n","source":"_posts/javascript-design-pattern-revealing.md","raw":"title: JavaScript 设计模式 - Revealing Module (揭示模块) 模式\ndate: 2015-02-12 08:54:31\ncategories:\n- JavaScript\ntags:\n- JavaScript\n- Javascript Design Pattern\n---\nRevealing Module 模式 是 Module 模式 的改进模式,\n使用 Module 模式, 当我们想从另外一个方法调用一个公有方法或者访问共有变量时, 必须要重复主对象的名称. 并且在使用 Module 模式时, 必须要切换到对象字面量表示法来让某种方法变成公有方法.\n用一个栗子展示Module 模式的缺点:\n````\nvar testModule = function() {\n    function doSomething() {\n        console.log('dosomething');\n    }\n\n    return {\n        func1: function() {\n            console.log('func1');\n            doSomething();\n        },\n        func2: function() {\n            console.log('func2');\n            // 如果我想在这儿调用 func1..\n            testModule.func1();\n        }\n    };\n}();\n````\n在上个例子中, 我想在 func2 中调用 func1 方法, 需要加上主对象的名字. 针对这一问题, Christian Heilmann 创建了 Revealing Module, 它能够在私有范围内简单定义所有的函数和变量, 并返回一个匿名对象, 返回的对象中拥有指向私有函数的指针, 该函数是他希望展示为公有的方法.\n使用示例:\n````\nvar myRevealingModule = function() {\n    var privateVar = \"Fannie\",\n        publicVar = \"Job\";\n\n    function privateFunction() {\n        console.log(\"name is \" + privateVar);\n    }\n\n    function publicSetName(name) {\n        privateVar = name;\n    }\n    function publicGetName() {\n        privateFunction();\n    }\n\n    // 将暴漏的共有指针指向私有函数和属性\n    return {\n        setName: publicSetName,\n        greeting: publicVar,\n        getName: publicGetName\n    };\n}();\nconsole.log(myRevealingModule.greeting);\nmyRevealingModule.getName();\nmyRevealingModule.setName('zhangff');\nmyRevealingModule.getName();\n````\n优点: 该模式可以使脚本语法更加一致. 在模块代码底部, 它会很容易指出哪些函数和变量可以被公开访问, 从而改善可读性.\n缺点: 如果一个私有函数引用一个共有函数, 在需要打补丁时, 公有函数是不能被覆盖的. 这是因为私有函数将继续引用私有实现, 该模式并不适用于共有成员, 只适用于函数.","slug":"javascript-design-pattern-revealing","updated":1423790102000,"excerpt":"","_id":"ul4edxxukgx2yju9","comments":true,"layout":"post","photos":[],"link":""},{"title":"JavaScript 设计模式 -  Singleton (单例) 模式","date":1425517496000,"categories":["0ce12qxrahzsdo1s"],"tags":["6tb2yy8kt307effl","mo48aazlcxxhl3ou"],"content":"<p>单例模式限制了类的实例化次数只能一次. 它的实现是, 在该实例不存在的情况下, 通过一个方法创建一个类来实现创建类的新实例; 如果实例已经存在, 则直接返回该实例的引用.<br>Singleton 不同于静态类, 因为我们可以推迟它的初始化, 这通常是因为它们需要一些信息, 而这些信息在初始化期间无法获取.<br>在 Javascript 中, Singleton 充当共享资源命名空间, 从全局命名空间中隔离出代码实现, 从而为函数提供单一访问节点.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> mySingleton = (<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">var</span> instance;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'init instance'</span>);</div><div class=\"line\">        <span class=\"keyword\">var</span> initTime = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">privateFunction</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'it is private function'</span>);</div><div class=\"line\">        }</div><div class=\"line\">        <span class=\"keyword\">return</span> {</div><div class=\"line\">            publicProperty: <span class=\"string\">'I am public property'</span>,</div><div class=\"line\">            getInitTime: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">                <span class=\"keyword\">return</span> initTime;</div><div class=\"line\">            }</div><div class=\"line\">        }</div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"keyword\">return</span> {</div><div class=\"line\">        getInstance: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">            <span class=\"keyword\">if</span> (!instance) {</div><div class=\"line\">                instance = init();</div><div class=\"line\">            }</div><div class=\"line\">            <span class=\"keyword\">return</span> instance;</div><div class=\"line\">        }</div><div class=\"line\">    }</div><div class=\"line\">})();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> my1 = mySingleton.getInstance(),<span class=\"comment\">// 第一次获取实例</span></div><div class=\"line\">    my2 = mySingleton.getInstance();<span class=\"comment\">// 第二次获取实例</span></div><div class=\"line\">initTime1 = my1.getInitTime();</div><div class=\"line\">initTime2 = my2.getInitTime();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'initTime1: '</span>, initTime1);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'initTime2: '</span>, initTime2);</div></pre></td></tr></table></figure>\n\n<p>在上面例子中, 两次获取 getInstance, 只调用了一次 init() 方法.</p>\n<p>Singleton 模式适用性:</p>\n<ul>\n<li>当类只能有一个实例而且客户可以从一个统一的访问点访问它时.</li>\n<li>该唯一的实例应该是通过子类化可扩展的, 并且客户端应该无需更改代码就能使用一个扩展的实例时.</li>\n</ul>\n","source":"_posts/javascript-design-pattern-singleton.md","raw":"title: JavaScript 设计模式 -  Singleton (单例) 模式\ndate: 2015-03-05 09:04:56\ncategories:\n- JavaScript\ntags:\n- JavaScript\n- Javascript Design Pattern\n---\n单例模式限制了类的实例化次数只能一次. 它的实现是, 在该实例不存在的情况下, 通过一个方法创建一个类来实现创建类的新实例; 如果实例已经存在, 则直接返回该实例的引用.\nSingleton 不同于静态类, 因为我们可以推迟它的初始化, 这通常是因为它们需要一些信息, 而这些信息在初始化期间无法获取.\n在 Javascript 中, Singleton 充当共享资源命名空间, 从全局命名空间中隔离出代码实现, 从而为函数提供单一访问节点.\n````\nvar mySingleton = (function() {\n    var instance;\n\n    function init() {\n        console.log('init instance');\n        var initTime = new Date();\n        function privateFunction() {\n            console.log('it is private function');\n        }\n        return {\n            publicProperty: 'I am public property',\n            getInitTime: function() {\n                return initTime;\n            }\n        }\n    }\n    return {\n        getInstance: function() {\n            if (!instance) {\n                instance = init();\n            }\n            return instance;\n        }\n    }\n})();\n\nvar my1 = mySingleton.getInstance(),// 第一次获取实例\n    my2 = mySingleton.getInstance();// 第二次获取实例\ninitTime1 = my1.getInitTime();\ninitTime2 = my2.getInitTime();\nconsole.log('initTime1: ', initTime1);\nconsole.log('initTime2: ', initTime2);\n````\n在上面例子中, 两次获取 getInstance, 只调用了一次 init() 方法.\n\nSingleton 模式适用性:\n* 当类只能有一个实例而且客户可以从一个统一的访问点访问它时.\n* 该唯一的实例应该是通过子类化可扩展的, 并且客户端应该无需更改代码就能使用一个扩展的实例时.\n","slug":"javascript-design-pattern-singleton","updated":1427073877000,"excerpt":"","_id":"v60fzsz9722mweik","comments":true,"layout":"post","photos":[],"link":""},{"title":"jQuery 自定义插件","date":1427273506000,"categories":["0ce12qxrahzsdo1s"],"tags":["6tb2yy8kt307effl"],"content":"<h1 id=\"jQuery_自定义插件\">jQuery 自定义插件</h1>\n<h3 id=\"基本要点\">基本要点</h3>\n<ul>\n<li>命名: 以 jquery.[插件名].js 命令</li>\n<li>所有的对象方法都附加到 jQuery.fn 对象上, 所有的全局函数都附加到 jQuery 上.</li>\n<li>this 指向</li>\n<li>this.each</li>\n<li>为了稳妥, 可以在插件头部各添加分号</li>\n<li>插件应该返回一个 jQuery 对象, 以保证插件的链式操作. 除非插件需要返回的是一些需要获取的量, 比如字符串或者数组.</li>\n<li>在插件中, 尽量不要使用 $ 作为 jQuery 对象的别名. 如果使用闭包来回避这个问题.</li>\n</ul>\n<h3 id=\"基本格式\">基本格式</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">;(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($)</span> </span>{</div><div class=\"line\">    <span class=\"comment\">// 代码块</span></div><div class=\"line\">})(jQuery);</div></pre></td></tr></table></figure>\n\n","source":"_posts/jquery-plugin.md","raw":"title: jQuery 自定义插件\ndate: 2015-03-25 16:51:46\ncategories:\n- JavaScript\ntags:\n- JavaScript\n---\n# jQuery 自定义插件\n### 基本要点\n* 命名: 以 jquery.[插件名].js 命令\n* 所有的对象方法都附加到 jQuery.fn 对象上, 所有的全局函数都附加到 jQuery 上.\n* this 指向\n* this.each\n* 为了稳妥, 可以在插件头部各添加分号\n* 插件应该返回一个 jQuery 对象, 以保证插件的链式操作. 除非插件需要返回的是一些需要获取的量, 比如字符串或者数组.\n* 在插件中, 尽量不要使用 $ 作为 jQuery 对象的别名. 如果使用闭包来回避这个问题.\n\n### 基本格式\n````javascript\n;(function($) {\n    // 代码块\n})(jQuery);\n````\n\n\n\n","slug":"jquery-plugin","updated":1427273549000,"excerpt":"","_id":"unb1k5wtmgcnwxu5","comments":true,"layout":"post","photos":[],"link":""},{"title":"jshint","date":1422922934000,"categories":["0ce12qxrahzsdo1s"],"tags":["6tb2yy8kt307effl"],"content":"<h1 id=\"jshint\">jshint</h1>\n<h2 id=\"安装\">安装</h2>\n<p>安装 JSHint 最简单的方法是使用 node. 只需要在你的终端输入下面的命令行(标记 -g 表示要在你的系统中全局安装, 如果你仅仅想安装在你的项目中, 请删除 -g).</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"operator\"><span class=\"keyword\">install</span> jshint -g</span></div></pre></td></tr></table></figure>\n\n<p>下面你就可以使用 jshint 程序了, 一个简单的用法是检测单个文件或者指定目录下的所有 js 文件:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">localhos<span class=\"variable\">t:blog</span> fan$ jshint <span class=\"keyword\">source</span>/test/myfile.js</div><div class=\"line\"><span class=\"keyword\">source</span>/test/myfile.<span class=\"keyword\">j</span><span class=\"variable\">s:</span> <span class=\"built_in\">line</span> <span class=\"number\">2</span>, <span class=\"built_in\">col</span> <span class=\"number\">6</span>, Missing semicolon.</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">1</span> error</div></pre></td></tr></table></figure>\n\n<p>? 如果文件路径是一个破折号(-), jshint 将从标准输入读取</p>\n<h2 id=\"配置\">配置</h2>\n<p>配置方式:</p>\n<ul>\n<li>通过 —config 标记手动指定特殊的配置文件(.jshintrc)</li>\n<li>将配置写入项目的 package.json 文件中的 jshintConfig 属性下</li>\n</ul>\n<p>如果使用 .jshintrc, 开始时, JSHint 将在被检测的 js 文件目录下寻找 .jshintrc 文件. 如果没有找到, 将向上层目录树查找一直到根目录.(注意: 如果输入是标准输入, JSHint 不接受查找配置文件).</p>\n<p>这种设置允许你为每一个项目分配配置文件. 放配置文件在项目的根目录下, 不论你在项目的哪个位置执行 JSHint, 使用的都是同一个配置.</p>\n<p>配置文件是一个简单的 json 文件, 它指明 JSHint 参数是打开还是关闭. 例如下面的这个配置, 未定义和未使用的变量将被标记为警告, 并且告诉 JSHint 全局变量的名字是 MY_GLOBAL.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">{</div><div class=\"line\">    \"<span class=\"attribute\">undef</span>\": <span class=\"value\"><span class=\"literal\">true</span></span>,</div><div class=\"line\">    \"<span class=\"attribute\">unused</span>\": <span class=\"value\"><span class=\"literal\">true</span></span>,</div><div class=\"line\">    \"<span class=\"attribute\">predef</span>\": <span class=\"value\">[ <span class=\"string\">\"MY_GLOBAL\"</span> ]</span></div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<h2 id=\"内联配置\">内联配置</h2>\n<p>除了(In addition to)使用配置文件之外, 你能使用特殊的注解在文件内部. 该注解以 jshint 或者 global 开始, 后面跟着以逗号分隔的参数. 例如, 下面的小片段和上面的配置有相同的作用.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">/<span class=\"keyword\">*</span> jshint undef: true, unused: true <span class=\"keyword\">*</span>/</div><div class=\"line\">/<span class=\"keyword\">*</span> global MY_GLOBAL <span class=\"keyword\">*</span>/</div></pre></td></tr></table></figure>\n\n<p>你能使用单行或者多行注释来配置 jshint. 如果你将注释写在函数内部, 配置将只在函数内部生效.</p>\n<h2 id=\"指令,_下面是_JSHint_支持的指令列表\">指令, 下面是 JSHint 支持的指令列表</h2>\n<p>jshint  设置 JSHint 参数的指令:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/<span class=\"keyword\">*</span> jshint strict: true <span class=\"keyword\">*</span>/</div></pre></td></tr></table></figure>\n\n<p>JSHint  设置 JSHint 兼容 JSLint 参数的指令:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/<span class=\"keyword\">*</span> jslint vars: true <span class=\"keyword\">*</span>/</div></pre></td></tr></table></figure>\n\n<p>global  global 指令用于告诉 JSHint 在别处定义的全局变量. 如果值为 false(默认为 false), JSHint 认为该变量为只读. 该属性和 undef 属性一起使用.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/<span class=\"keyword\">*</span> global MY_LIB: false <span class=\"keyword\">*</span>/</div></pre></td></tr></table></figure>\n\n<p>你也可以针对某几个全局变量设置黑名单, 确保它们在当前文件的任何地方都不可以使用.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/<span class=\"keyword\">*</span> global -BAD_LIB <span class=\"keyword\">*</span>/</div></pre></td></tr></table></figure>\n\n<p>exported  用于告诉 JSHint 在当前文件定义了一个在别处使用的全局变量, 通常和 unused 参数一起使用.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/<span class=\"keyword\">*</span> exported EXPORTED_LIB <span class=\"keyword\">*</span>/</div></pre></td></tr></table></figure>\n\n<p>members  这个指令用于告诉 JSHint 所有你打算使用的属性. 该指令是被弃用的, 不赞成使用</p>\n<p>ignore  指令告诉 JSHint 忽略某快代码</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Code here will be linted with JSHint</span></div><div class=\"line\"><span class=\"comment\">/* jshint ignore:start */</span></div><div class=\"line\"><span class=\"comment\">// Code here will be ignore by JSHint</span></div><div class=\"line\"><span class=\"comment\">/* jshint ignore:end */</span></div></pre></td></tr></table></figure>\n\n<p>所有在 ignore:start 和 ignore:end 之间的代码都将被 JSHint 忽略. 另外, 你能通过尾随注释忽略一行代码:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">ignoreThis</span>(); <span class=\"comment\">// jshint ignore:line</span></div></pre></td></tr></table></figure>\n\n<h2 id=\"参数\">参数</h2>\n<p>大部分情况下, 当你在自己的代码中调整 JSHint 时, 你需要在所有的 JSHint 参数中寻找适合自己的那一个. 尝试找出 JSHint 参数是如何工作的是恰当的参数是混乱的和令人沮丧的(我们正在努力修复) 请仔细阅读下面的两段文章.</p>\n<p>JSHint 有两种类型的参数: 强制的和松懈的. 前者使 JSHint 更严格后者压制一些警告. 看下面这个栗子的代码:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span><span class=\"params\">(a, b)</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">return</span> a == <span class=\"literal\">null</span>;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>当使用默认的 jshint 参数检测这段代码时, 会报出如下警告:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">fan:test fan$ jshint myfile.js</div><div class=\"line\">myfile.js: line 2, col 14, <span class=\"operator\"><span class=\"keyword\">Use</span> <span class=\"string\">'==='</span> <span class=\"keyword\">to</span> compare <span class=\"keyword\">with</span> <span class=\"string\">'null'</span>.</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">1</span> error</div></pre></td></tr></table></figure>\n\n","source":"_posts/jshint.md","raw":"title: jshint\ndate: 2015-02-03 08:22:14\ncategories:\n- JavaScript\ntags:\n- JavaScript\n---\n# jshint\n\n## 安装\n\n安装 JSHint 最简单的方法是使用 node. 只需要在你的终端输入下面的命令行(标记 -g 表示要在你的系统中全局安装, 如果你仅仅想安装在你的项目中, 请删除 -g).\n\n````\nnpm install jshint -g\n````\n\n下面你就可以使用 jshint 程序了, 一个简单的用法是检测单个文件或者指定目录下的所有 js 文件:\n\n````\nlocalhost:blog fan$ jshint source/test/myfile.js\nsource/test/myfile.js: line 2, col 6, Missing semicolon.\n\n1 error\n````\n\n? 如果文件路径是一个破折号(-), jshint 将从标准输入读取\n\n## 配置\n配置方式:\n* 通过 --config 标记手动指定特殊的配置文件(.jshintrc)\n* 将配置写入项目的 package.json 文件中的 jshintConfig 属性下\n\n如果使用 .jshintrc, 开始时, JSHint 将在被检测的 js 文件目录下寻找 .jshintrc 文件. 如果没有找到, 将向上层目录树查找一直到根目录.(注意: 如果输入是标准输入, JSHint 不接受查找配置文件).\n\n这种设置允许你为每一个项目分配配置文件. 放配置文件在项目的根目录下, 不论你在项目的哪个位置执行 JSHint, 使用的都是同一个配置.\n\n\n配置文件是一个简单的 json 文件, 它指明 JSHint 参数是打开还是关闭. 例如下面的这个配置, 未定义和未使用的变量将被标记为警告, 并且告诉 JSHint 全局变量的名字是 MY_GLOBAL.\n````\n{\n    \"undef\": true,\n    \"unused\": true,\n    \"predef\": [ \"MY_GLOBAL\" ]\n}\n````\n\n## 内联配置\n除了(In addition to)使用配置文件之外, 你能使用特殊的注解在文件内部. 该注解以 jshint 或者 global 开始, 后面跟着以逗号分隔的参数. 例如, 下面的小片段和上面的配置有相同的作用.\n````\n/* jshint undef: true, unused: true */\n/* global MY_GLOBAL */\n````\n你能使用单行或者多行注释来配置 jshint. 如果你将注释写在函数内部, 配置将只在函数内部生效.\n\n## 指令, 下面是 JSHint 支持的指令列表\n\njshint  设置 JSHint 参数的指令:\n````\n/* jshint strict: true */\n````\n\nJSHint  设置 JSHint 兼容 JSLint 参数的指令:\n````\n/* jslint vars: true */\n````\n\nglobal  global 指令用于告诉 JSHint 在别处定义的全局变量. 如果值为 false(默认为 false), JSHint 认为该变量为只读. 该属性和 undef 属性一起使用.\n````\n/* global MY_LIB: false */\n````\n你也可以针对某几个全局变量设置黑名单, 确保它们在当前文件的任何地方都不可以使用.\n````\n/* global -BAD_LIB */\n````\n\nexported  用于告诉 JSHint 在当前文件定义了一个在别处使用的全局变量, 通常和 unused 参数一起使用.\n````\n/* exported EXPORTED_LIB */\n````\n\nmembers  这个指令用于告诉 JSHint 所有你打算使用的属性. 该指令是被弃用的, 不赞成使用\n\n\nignore  指令告诉 JSHint 忽略某快代码\n````\n// Code here will be linted with JSHint\n/* jshint ignore:start */\n// Code here will be ignore by JSHint\n/* jshint ignore:end */\n````\n所有在 ignore:start 和 ignore:end 之间的代码都将被 JSHint 忽略. 另外, 你能通过尾随注释忽略一行代码:\n````\nignoreThis(); // jshint ignore:line\n````\n\n## 参数\n大部分情况下, 当你在自己的代码中调整 JSHint 时, 你需要在所有的 JSHint 参数中寻找适合自己的那一个. 尝试找出 JSHint 参数是如何工作的是恰当的参数是混乱的和令人沮丧的(我们正在努力修复) 请仔细阅读下面的两段文章.\n\nJSHint 有两种类型的参数: 强制的和松懈的. 前者使 JSHint 更严格后者压制一些警告. 看下面这个栗子的代码:\n````\nfunction main(a, b) {\n    return a == null;\n}\n````\n当使用默认的 jshint 参数检测这段代码时, 会报出如下警告:\n````\nfan:test fan$ jshint myfile.js\nmyfile.js: line 2, col 14, Use '===' to compare with 'null'.\n\n1 error\n````\n","slug":"jshint","updated":1423702784000,"excerpt":"","_id":"cbfm29bimnetxw6j","comments":true,"layout":"post","photos":[],"link":""},{"title":"Music-笑忘书","date":1423701515000,"tags":["83qjshq3y7imj1ll"],"content":"<p>没 没有蜡烛 就不用勉强庆祝<br>没 没想到答案 就不要寻找题目<br>没 没有退路 问我也不要思路<br>没 没人去仰慕 那我就继续忙碌<br>来来 思前想后<br>差一点忘记了怎么投诉<br>来来 从此以后 不要犯同一个错误<br>将这样的感触 写一封情书送给我自己<br>感动得要哭 很久没哭<br>不失为天大的幸福 将这一份礼物<br>这一封情书 给自己祝福<br>可以不在乎 才能对别人在乎<br>有 一点帮助 就可以对谁倾诉<br>有 一个人保护 就不用自我保护<br>有 一点满足 就准备如何结束<br>有 一点点领悟 就可以往后回顾<br>来来 思前想后<br>差一点忘记了怎么投诉<br>来来 从此以后 不要犯同一个错误<br>将这样的感触 写一封情书送给我自己<br>感动得要哭 很久没哭<br>不失为天大的幸福 将这一份礼物<br>这一封情书 给自己祝福<br>可以不在乎 才能对别人在乎<br>Lalalala……. Lalalala…….<br>从开始哭着忌妒 变成了笑着羡慕<br>时间是怎么样爬过了我皮肤<br>只有我自己最清楚<br>将这样的感触 写一封情书送给我自己<br>感动得要哭 很久没哭<br>不失为天大的幸福 将这一份礼物<br>这一封情书 给自己祝福<br>可以不在乎 才能对别人在乎<br>让我亲手 将这样的感触<br>写一封情书送给我自己<br>感动得要哭 很久没哭<br>不失为天大的幸福<br>就好好将这一份礼物<br>这一封情书 给自己祝福<br>可以不在乎 才能对别人在乎</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"http://music.163.com/outchain/player?type=2&id=299601&auto=1&height=66\"></iframe>\n","source":"_posts/music-hebe-solo.md","raw":"title: Music-笑忘书\ndate: 2015-02-12 08:38:35\ntags: Music\n---\n\n没 没有蜡烛 就不用勉强庆祝\n没 没想到答案 就不要寻找题目\n没 没有退路 问我也不要思路\n没 没人去仰慕 那我就继续忙碌\n来来 思前想后\n差一点忘记了怎么投诉\n来来 从此以后 不要犯同一个错误\n将这样的感触 写一封情书送给我自己\n感动得要哭 很久没哭\n不失为天大的幸福 将这一份礼物\n这一封情书 给自己祝福\n可以不在乎 才能对别人在乎\n有 一点帮助 就可以对谁倾诉\n有 一个人保护 就不用自我保护\n有 一点满足 就准备如何结束\n有 一点点领悟 就可以往后回顾\n来来 思前想后\n差一点忘记了怎么投诉\n来来 从此以后 不要犯同一个错误\n将这样的感触 写一封情书送给我自己\n感动得要哭 很久没哭\n不失为天大的幸福 将这一份礼物\n这一封情书 给自己祝福\n可以不在乎 才能对别人在乎\nLalalala....... Lalalala.......\n从开始哭着忌妒 变成了笑着羡慕\n时间是怎么样爬过了我皮肤\n只有我自己最清楚\n将这样的感触 写一封情书送给我自己\n感动得要哭 很久没哭\n不失为天大的幸福 将这一份礼物\n这一封情书 给自己祝福\n可以不在乎 才能对别人在乎\n让我亲手 将这样的感触\n写一封情书送给我自己\n感动得要哭 很久没哭\n不失为天大的幸福\n就好好将这一份礼物\n这一封情书 给自己祝福\n可以不在乎 才能对别人在乎\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"http://music.163.com/outchain/player?type=2&id=299601&auto=1&height=66\"></iframe>\n","slug":"music-hebe-solo","updated":1423701648000,"excerpt":"","_id":"47nns2yjb27el2kk","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"Music-后会无期","date":1422664459000,"tags":["83qjshq3y7imj1ll"],"content":"<p>当一艘船沉入海底<br>当一个人成了谜<br>你不知道<br>他们为何离去<br>那声再见竟是他最后一句<br>当一辆车消失天际<br>当一个人成了谜<br>你不知道<br>他们为何离去<br>就像你不知道这竟是结局<br>在每个繁星抛弃银河的夜里<br>我会告别 告别我自己<br>因为我不知道 我也不想知道<br>和相聚之间的距离<br>当一辆车消失天际<br>当一个人成了谜<br>你不知道<br>他们为何离去<br>就像你不知道这竟是结局<br>在每个银河坠入山谷的梦里<br>我会醒来 也忘记梦境<br>因为你不知道 你也不会知道<br>逝去的就已经失去<br>当一艘船沉入海底<br>当一个人成了谜<br>你不知道<br>他们为何离去<br>那声再见竟是他最后一句<br>当一辆车消失天际<br>当一个人成了谜<br>你不知道<br>他们为何离去<br>就像你不知道这竟是结局</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"http://music.163.com/outchain/player?type=2&id=28793502&auto=1&height=66\"></iframe>\n\n","source":"_posts/music-regret-for-life.md","raw":"title: Music-后会无期\ndate: 2015-01-31 08:34:19\ntags: Music\n---\n\n当一艘船沉入海底\n当一个人成了谜\n你不知道\n他们为何离去\n那声再见竟是他最后一句\n当一辆车消失天际\n当一个人成了谜\n你不知道\n他们为何离去\n就像你不知道这竟是结局\n在每个繁星抛弃银河的夜里\n我会告别 告别我自己\n因为我不知道 我也不想知道\n和相聚之间的距离\n当一辆车消失天际\n当一个人成了谜\n你不知道\n他们为何离去\n就像你不知道这竟是结局\n在每个银河坠入山谷的梦里\n我会醒来 也忘记梦境\n因为你不知道 你也不会知道\n逝去的就已经失去\n当一艘船沉入海底\n当一个人成了谜\n你不知道\n他们为何离去\n那声再见竟是他最后一句\n当一辆车消失天际\n当一个人成了谜\n你不知道\n他们为何离去\n就像你不知道这竟是结局\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"http://music.163.com/outchain/player?type=2&id=28793502&auto=1&height=66\"></iframe>\n\n","slug":"music-regret-for-life","updated":1423701716000,"excerpt":"","_id":"ek3xq4ygfykc8u0b","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"Music-我怀念的","date":1423495063000,"tags":["83qjshq3y7imj1ll"],"content":"<p>我问为什么 那女孩传简讯给我<br>而你为什么<br>不解释 低着头沉默<br>我该相信你很爱我<br>不愿意敷衍我<br>还是明白你已不想挽回什么<br>想问为什么<br>我不再是你的快乐<br>可是为什么<br>却苦笑说我都懂了<br>自尊常常将人拖着<br>把爱都走曲折<br>假装了解是怕真相太赤裸裸<br>狼狈比失去难受<br>我怀念的是无话不说<br>我怀念的是一起做梦<br>我怀念的是争吵以后<br>还是想要爱你的冲动<br>我记得那年生日<br>也记得那一首歌<br>记得那片星空<br>最紧的右手<br>最暖的胸口<br>谁记得<br>谁忘了<br>想问为什么<br>我不再是你的快乐<br>可是为什么<br>却苦笑说我都懂了<br>自尊常常将人拖着<br>把爱都走曲折<br>假装了解是怕真相太赤裸裸<br>狼狈比失去难受<br>我怀念的是无话不说<br>我怀念的是一起做梦<br>我怀念的是争吵以后<br>还是想要爱你的冲动<br>我记得那年生日<br>也记得那一首歌<br>记得那片星空<br>最紧的右手<br>最暖的胸口<br>谁忘了<br>我怀念的是无言感动<br>我怀念的是绝对炽热<br>我怀念的是你很激动<br>求我原谅抱得我都痛<br>我记得你在背后<br>我记得我颤抖着<br>记得感觉汹涌<br>最美的烟火<br>最长的相拥<br>谁爱得太自由<br>谁过头太远了<br>谁要走我的心<br>谁忘了那就是承诺<br>谁自顾自地走<br>谁忘了看着我<br>谁让爱变沉重<br>谁忘了要给你温柔<br>啊</p>\n<figure class=\"highlight ~\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">呼呼</div></pre></td></tr></table></figure>\n\n<p>我怀念的~~~<br>我还有想要爱你的冲动<br>我记得那年的生日<br>也记得那一首歌<br>记得那片星空<br>最紧的右手<br>最暖的胸口<br>我放手<br>我让座<br>假洒脱<br>谁懂我多么不舍得<br>太爱了<br>所以我<br>没有哭<br>没有痛</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"http://music.163.com/outchain/player?type=2&id=287063&auto=1&height=66\"></iframe>\n","source":"_posts/music-what-i-miss-most.md","raw":"title: Music-我怀念的\ndate: 2015-02-09 23:17:43\ntags: Music\n---\n\n我问为什么 那女孩传简讯给我\n而你为什么\n不解释 低着头沉默\n我该相信你很爱我\n不愿意敷衍我\n还是明白你已不想挽回什么\n想问为什么\n我不再是你的快乐\n可是为什么\n却苦笑说我都懂了\n自尊常常将人拖着\n把爱都走曲折\n假装了解是怕真相太赤裸裸\n狼狈比失去难受\n我怀念的是无话不说\n我怀念的是一起做梦\n我怀念的是争吵以后\n还是想要爱你的冲动\n我记得那年生日\n也记得那一首歌\n记得那片星空\n最紧的右手\n最暖的胸口\n谁记得\n谁忘了\n想问为什么\n我不再是你的快乐\n可是为什么\n却苦笑说我都懂了\n自尊常常将人拖着\n把爱都走曲折\n假装了解是怕真相太赤裸裸\n狼狈比失去难受\n我怀念的是无话不说\n我怀念的是一起做梦\n我怀念的是争吵以后\n还是想要爱你的冲动\n我记得那年生日\n也记得那一首歌\n记得那片星空\n最紧的右手\n最暖的胸口\n谁忘了\n我怀念的是无言感动\n我怀念的是绝对炽热\n我怀念的是你很激动\n求我原谅抱得我都痛\n我记得你在背后\n我记得我颤抖着\n记得感觉汹涌\n最美的烟火\n最长的相拥\n谁爱得太自由\n谁过头太远了\n谁要走我的心\n谁忘了那就是承诺\n谁自顾自地走\n谁忘了看着我\n谁让爱变沉重\n谁忘了要给你温柔\n啊~~~~\n呼呼~~~\n我怀念的~~~\n我还有想要爱你的冲动\n我记得那年的生日\n也记得那一首歌\n记得那片星空\n最紧的右手\n最暖的胸口\n我放手\n我让座\n假洒脱\n谁懂我多么不舍得\n太爱了\n所以我\n没有哭\n没有痛\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"http://music.163.com/outchain/player?type=2&id=287063&auto=1&height=66\"></iframe>\n","slug":"music-what-i-miss-most","updated":1423701318000,"excerpt":"","_id":"sdb2ynmwva2ci21d","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"使用Github Pages建独立博客","content":"<p><a href=\"http://github.com\" title=\"Github\" target=\"_blank\" rel=\"external\">Github</a>很好的将代码和社区联系在了一起，于是发生了很多有趣的事情，世界也因为他美好了一点点。Github作为现在最流行的代码仓库，已经得到很多大公司和项目的青睐，比如<a href=\"https://github.com/jquery/jquery\" title=\"jQuery@github\" target=\"_blank\" rel=\"external\">jQuery</a>、<a href=\"https://github.com/twitter/bootstrap\" title=\"Twitter@github\" target=\"_blank\" rel=\"external\">Twitter</a>等。为使项目更方便的被人理解，介绍页面少不了，甚至会需要完整的文档站，Github替你想到了这一点，他提供了<a href=\"http://pages.github.com/\" title=\"Github Pages\" target=\"_blank\" rel=\"external\">Github Pages</a>的服务，不仅可以方便的为项目建立介绍站点，也可以用来建立个人博客。</p>\n<p>Github Pages有以下几个优点：</p>\n<ul><br>    <li>轻量级的博客系统，没有麻烦的配置</li><br>    <li>使用标记语言，比如<a href=\"http://markdown.tw\" target=\"_blank\" rel=\"external\">Markdown</a></li><br>    <li>无需自己搭建服务器</li><br>    <li>根据Github的限制，对应的每个站有300MB空间</li><br>    <li>可以绑定自己的域名</li><br></ul>\n\n<p>当然他也有缺点：</p>\n<ul>\n<li>使用<a href=\"https://github.com/mojombo/jekyll\" title=\"Jekyll\" target=\"_blank\" rel=\"external\">Jekyll</a>模板系统，相当于静态页发布，适合博客，文档介绍等。</li>\n<li>动态程序的部分相当局限，比如没有评论，不过还好我们有解决方案。</li>\n<li>基于Git，很多东西需要动手，不像Wordpress有强大的后台</li>\n</ul>\n<p>大致介绍到此，作为个人博客来说，简洁清爽的表达自己的工作、心得，就已达目标，所以Github Pages是我认为此需求最完美的解决方案了。</p>\n<h2 id=\"购买、绑定独立域名\">购买、绑定独立域名</h2>\n<p>虽说<a href=\"http://www.godaddy.com/\" title=\"Godaddy\" target=\"_blank\" rel=\"external\">Godaddy</a>曾支持过SOPA，并且首页放着极其不专业的大胸美女，但是作为域名服务商他做的还不赖，选择它最重要的原因是他支持支付宝，没有信用卡有时真的很难过。</p>\n<p>域名的购买不用多讲，注册、选域名、支付，有网购经验的都毫无压力，优惠码也遍地皆是。域名的配置需要提醒一下，因为伟大英明的GFW的存在，我们必须多做些事情。</p>\n<p>流传Godaddy的域名解析服务器被墙掉，导致域名无法访问，后来这个事情在<a href=\"http://beiyuu.com\" title=\"BeiYuu\" target=\"_blank\" rel=\"external\">BeiYuu</a>也发生了，不得已需要把域名解析服务迁移到国内比较稳定的服务商处，这个迁移对于域名来说没有什么风险，最终的控制权还是在Godaddy那里，你随时都可以改回去。</p>\n<p>我们选择<a href=\"https://www.dnspod.cn/\" title=\"DNSPod\" target=\"_blank\" rel=\"external\">DNSPod</a>的服务，他们的产品做得不错，易用、免费，收费版有更高端的功能，暂不需要。注册登录之后，按照DNSPod的说法，只需三步（我们插入一步）：</p>\n<ul><br>    <li>首先添加域名记录，可参考DNSPod的帮助文档：<a href=\"https://www.dnspod.cn/Support\" target=\"_blank\" rel=\"external\">https://www.dnspod.cn/Support</a></li><br>    <li>在DNSPod自己的域名下添加一条<a href=\"http://baike.baidu.com/view/65575.htm\" target=\"_blank\" rel=\"external\">A记录</a>，地址就是Github Pages的服务IP地址：207.97.227.245</li><br>    <li>在域名注册商处修改DNS服务:去Godaddy修改Nameservers为这两个地址：f1g1ns1.dnspod.net、f1g1ns2.dnspod.net。如果你不明白在哪里修改，可以参考这里：<a href=\"https://www.dnspod.cn/support/index/fid/119\" target=\"_blank\" rel=\"external\">Godaddy注册的域名如何使用DNSPod</a></li><br>    <li>等待域名解析生效</li><br></ul>\n\n<p>域名的配置部分完成，跪谢方校长。</p>\n<h2 id=\"配置和使用Github\">配置和使用Github</h2>\n<p>Git是版本管理的未来，他的优点我不再赘述，相关资料很多。推荐这本<a href=\"http://progit.org/book/zh/\" title=\"Pro Git中文版\" target=\"_blank\" rel=\"external\">Git中文教程</a>。</p>\n<p>要使用Git，需要安装它的客户端，推荐在Linux下使用Git，会比较方便。Windows版的下载地址在这里：<a href=\"http://code.google.com/p/msysgit/downloads/list\" title=\"Windows版Git客户端\" target=\"_blank\" rel=\"external\">http://code.google.com/p/msysgit/downloads/list</a>。其他系统的安装也可以参考官方的<a href=\"http://help.github.com/mac-set-up-git/\" title=\"Mac下Git安装\" target=\"_blank\" rel=\"external\">安装教程</a>。</p>\n<p>下载安装客户端之后，各个系统的配置就类似了，我们使用windows作为例子，Linux和Mac与此类似。</p>\n<p>在Windows下，打开Git Bash，其他系统下面则打开终端（Terminal）：<br><img src=\"/images/githubpages/bootcamp_1_win_gitbash.jpg\" alt=\"Git Bash\"></p>\n<h3 id=\"1、检查SSH_keys的设置\">1、检查SSH keys的设置</h3>\n<p>首先我们需要检查你电脑上现有的ssh key：</p>\n<pre><code>$ <span class=\"built_in\">cd</span> ~/.ssh\n</code></pre><p>如果显示“No such file or directory”，跳到第三步，否则继续。</p>\n<h3 id=\"2、备份和移除原来的ssh_key设置：\">2、备份和移除原来的ssh key设置：</h3>\n<p>因为已经存在key文件，所以需要备份旧的数据并删除：</p>\n<pre><code><span class=\"variable\">$ </span>ls\nconfig    id_rsa    id_rsa.pub    known_hosts\n<span class=\"variable\">$ </span>mkdir key_backup\n<span class=\"variable\">$ </span>cp id_rsa* key_backup\n<span class=\"variable\">$ </span>rm id_rsa*\n</code></pre><h3 id=\"3、生成新的SSH_Key：\">3、生成新的SSH Key：</h3>\n<p>输入下面的代码，就可以生成新的key文件，我们只需要默认设置就好，所以当需要输入文件名的时候，回车就好。</p>\n<pre><code>$ ssh-keygen -t rsa -C <span class=\"string\">\"邮件地址@youremail.com\"</span>\nGenerating <span class=\"keyword\">public</span>/<span class=\"keyword\">private</span> rsa <span class=\"keyword\">key</span> pair.\nEnter file <span class=\"keyword\">in</span> which <span class=\"keyword\">to</span> save the <span class=\"keyword\">key</span> (/Users/your_user_directory/.ssh/id_rsa):&lt;回车就好&gt;\n</code></pre><p>然后系统会要你输入加密串（<a href=\"http://help.github.com/ssh-key-passphrases/\" target=\"_blank\" rel=\"external\">Passphrase</a>）：</p>\n<pre><code><span class=\"constant\">Enter</span> passphrase (empty <span class=\"keyword\">for</span> no passphrase)<span class=\"symbol\">:&lt;</span>输入加密串&gt;\n<span class=\"constant\">Enter</span> same passphrase <span class=\"symbol\">again:</span>&lt;再次输入加密串&gt;\n</code></pre><p>最后看到这样的界面，就成功设置ssh key了：<br><img src=\"/images/githubpages/ssh-key-set.png\" alt=\"ssh key success\"></p>\n<h3 id=\"4、添加SSH_Key到GitHub：\">4、添加SSH Key到GitHub：</h3>\n<p>在本机设置SSH Key之后，需要添加到GitHub上，以完成SSH链接的设置。</p>\n<p>用文本编辑工具打开id_rsa.pub文件，如果看不到这个文件，你需要设置显示隐藏文件。准确的复制这个文件的内容，才能保证设置的成功。</p>\n<p>在GitHub的主页上点击设置按钮：<br><img src=\"/images/githubpages/github-account-setting.png\" alt=\"github account setting\"></p>\n<p>选择SSH Keys项，把复制的内容粘贴进去，然后点击Add Key按钮即可：<br><img src=\"/images/githubpages/bootcamp_1_ssh.jpg\" alt=\"set ssh keys\"></p>\n<p>PS：如果需要配置多个GitHub账号，可以参看这个<a href=\"http://omiga.org/blog/archives/2269\" target=\"_blank\" rel=\"external\">多个github帐号的SSH key切换</a>，不过需要提醒一下的是，如果你只是通过这篇文章中所述配置了Host，那么你多个账号下面的提交用户会是一个人，所以需要通过命令<code>git config --global --unset user.email</code>删除用户账户设置，在每一个repo下面使用<code>git config --local user.email &#39;你的github邮箱@mail.com&#39;</code> 命令单独设置用户账户信息</p>\n<h3 id=\"5、测试一下\">5、测试一下</h3>\n<p>可以输入下面的命令，看看设置是否成功，<code>git@github.com</code>的部分不要修改：</p>\n<pre><code><span class=\"variable\">$ </span>ssh -<span class=\"constant\">T</span> git<span class=\"variable\">@github</span>.com\n</code></pre><p>如果是下面的反应：</p>\n<pre><code>The authenticity <span class=\"keyword\">of</span> host <span class=\"comment\">'github.com (207.97.227.239)' can't be established.</span>\nRSA <span class=\"keyword\">key</span> fingerprint <span class=\"keyword\">is</span> <span class=\"number\">16</span>:<span class=\"number\">27</span>:ac:a5:<span class=\"number\">76</span>:<span class=\"number\">28</span>:<span class=\"number\">2</span>d:<span class=\"number\">36</span>:<span class=\"number\">63</span>:<span class=\"number\">1</span>b:<span class=\"number\">56</span>:<span class=\"number\">4</span>d:eb:df:a6:<span class=\"number\">48.</span>\nAre you sure you want <span class=\"keyword\">to</span> <span class=\"keyword\">continue</span> connecting (yes/no)?\n</code></pre><p>不要紧张，输入<code>yes</code>就好，然后会看到：</p>\n<pre><code>Hi &lt;em&gt;username&lt;/em&gt;! You<span class=\"attribute\">'ve</span> successfully authenticated, but GitHub does <span class=\"keyword\">not</span> provide shell <span class=\"keyword\">access</span>.\n</code></pre><h3 id=\"6、设置你的账号信息\">6、设置你的账号信息</h3>\n<p>现在你已经可以通过SSH链接到GitHub了，还有一些个人信息需要完善的。</p>\n<p>Git会根据用户的名字和邮箱来记录提交。GitHub也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的，名字必须是你的真名，而不是GitHub的昵称。</p>\n<pre><code>$ git config --global <span class=\"literal\">user</span>.name <span class=\"string\">\"你的名字\"</span>\n$ git config --global <span class=\"literal\">user</span>.email <span class=\"string\">\"your_email@youremail.com\"</span>\n</code></pre><h4 id=\"设置GitHub的token\">设置GitHub的token</h4>\n<p>2012-4-28补充：新版的接口已经不需要配置token了，所以下面这段可以跳过了</p>\n<p>有些工具没有通过SSH来链接GitHub。如果要使用这类工具，你需要找到然后设置你的API Token。</p>\n<p>在GitHub上，你可以点击<em>Account Setting &gt; Account Admin</em>：<br><img src=\"/images/githubpages/bootcamp_1_token.jpg\" alt=\"set ssh keys\"></p>\n<p>然后在你的命令行中，输入下面的命令，把token添加进去：</p>\n<pre><code>$ git config --global <span class=\"literal\">user</span>.name <span class=\"string\">\"你的名字\"</span>\n$ git config --global <span class=\"literal\">user</span>.token <span class=\"number\">0123456789</span>your123456789token\n</code></pre><p>如果你改了GitHub的密码，需要重新设置token。</p>\n<h3 id=\"成功了\">成功了</h3>\n<p>好了，你已经可以成功连接GitHub了。</p>\n<h2 id=\"使用GitHub_Pages建立博客\">使用GitHub Pages建立博客</h2>\n<p>与GitHub建立好链接之后，就可以方便的使用它提供的Pages服务，GitHub Pages分两种，一种是你的GitHub用户名建立的<code>username.github.io</code>这样的用户&amp;组织页（站），另一种是依附项目的pages。</p>\n<h3 id=\"User_&amp;_Organization_Pages\">User &amp; Organization Pages</h3>\n<p>想建立个人博客是用的第一种，形如<code>beiyuu.github.io</code>这样的可访问的站，每个用户名下面只能建立一个，创建之后点击<code>Admin</code>进入项目管理，可以看到是这样的：<br><img src=\"/images/githubpages/user-pages.png\" alt=\"user pages\"><br>而普通的项目是这样的，即使你也是用的<code>othername.github.io</code>：<br><img src=\"/images/githubpages/other-pages.png\" alt=\"other pages\"></p>\n<p>创建好<code>username.github.io</code>项目之后，提交一个<code>index.html</code>文件，然后<code>push</code>到GitHub的<code>master</code>分支（也就是普通意义上的主干）。第一次页面生效需要一些时间，大概10分钟左右。</p>\n<p>生效之后，访问<code>username.github.io</code>就可以看到你上传的页面了，<a href=\"http://beiyuu.github.com\" target=\"_blank\" rel=\"external\">beiyuu.github.com</a>就是一个例子。</p>\n<p>关于第二种项目<code>pages</code>，简单提一下，他和用户pages使用的后台程序是同一套，只不过它的目的是项目的帮助文档等跟项目绑定的内容，所以需要在项目的<code>gh-pages</code>分支上去提交相应的文件，GitHub会自动帮你生成项目pages。具体的使用帮助可以参考<a href=\"http://pages.github.com/\" title=\"Github Pages\" target=\"_blank\" rel=\"external\">Github Pages</a>的官方文档：</p>\n<h3 id=\"绑定域名\">绑定域名</h3>\n<p>我们在第一部分就提到了在DNS部分的设置，再来看在GitHub的配置，要想让<code>username.github.io</code>能通过你自己的域名来访问，需要在项目的根目录下新建一个名为<code>CNAME</code>的文件，文件内容形如：</p>\n<pre><code>beiyuu.<span class=\"keyword\">com</span>\n</code></pre><p>你也可以绑定在二级域名上：</p>\n<pre><code>blog.beiyuu.<span class=\"keyword\">com</span>\n</code></pre><p>需要提醒的一点是，如果你使用形如<code>beiyuu.com</code>这样的一级域名的话，需要在DNS处设置A记录到<code>207.97.227.245</code>（<strong>这个地址会有变动，<a href=\"https://help.github.com/articles/my-custom-domain-isn-t-working\" target=\"_blank\" rel=\"external\">这里</a>查看</strong>），而不是在DNS处设置为CNAME的形式，否则可能会对其他服务（比如email）造成影响。</p>\n<p>设置成功后，根据DNS的情况，最长可能需要一天才能生效，耐心等待吧。</p>\n<h2 id=\"Jekyll模板系统\">Jekyll模板系统</h2>\n<p>GitHub Pages为了提供对HTML内容的支持，选择了<a href=\"https://github.com/mojombo/jekyll\" title=\"Jekyll\" target=\"_blank\" rel=\"external\">Jekyll</a>作为模板系统，Jekyll是一个强大的静态模板系统，作为个人博客使用，基本上可以满足要求，也能保持管理的方便，你可以查看<a href=\"https://github.com/mojombo/jekyll/blob/master/README.textile\" target=\"_blank\" rel=\"external\">Jekyll官方文档</a>。</p>\n<p>你可以直接fork<a href=\"https://github.com/beiyuu/beiyuu.github.com\" target=\"_blank\" rel=\"external\">我的项目</a>，然后改名，就有了你自己的满足Jekyll要求的文档了，当然你也可以按照下面的介绍自己创建。</p>\n<h3 id=\"Jekyll基本结构\">Jekyll基本结构</h3>\n<p>Jekyll的核心其实就是一个文本的转换引擎，用你最喜欢的标记语言写文档，可以是Markdown、Textile或者HTML等等，再通过<code>layout</code>将文档拼装起来，根据你设置的URL规则来展现，这些都是通过严格的配置文件来定义，最终的产出就是web页面。</p>\n<p>基本的Jekyll结构如下：</p>\n<pre><code><span class=\"comment\">|</span><span class=\"literal\">-</span><span class=\"literal\">-</span> <span class=\"comment\">_config</span><span class=\"string\">.</span><span class=\"comment\">yml</span>\n<span class=\"comment\">|</span><span class=\"literal\">-</span><span class=\"literal\">-</span> <span class=\"comment\">_includes</span>\n<span class=\"comment\">|</span><span class=\"literal\">-</span><span class=\"literal\">-</span> <span class=\"comment\">_layouts</span>\n<span class=\"comment\">|</span>   <span class=\"comment\">|</span><span class=\"literal\">-</span><span class=\"literal\">-</span> <span class=\"comment\">default</span><span class=\"string\">.</span><span class=\"comment\">html</span>\n<span class=\"comment\">|</span>   <span class=\"comment\">`</span><span class=\"literal\">-</span><span class=\"literal\">-</span> <span class=\"comment\">post</span><span class=\"string\">.</span><span class=\"comment\">html</span>\n<span class=\"comment\">|</span><span class=\"literal\">-</span><span class=\"literal\">-</span> <span class=\"comment\">_posts</span>\n<span class=\"comment\">|</span>   <span class=\"comment\">|</span><span class=\"literal\">-</span><span class=\"literal\">-</span> <span class=\"comment\">2007</span><span class=\"literal\">-</span><span class=\"comment\">10</span><span class=\"literal\">-</span><span class=\"comment\">29</span><span class=\"literal\">-</span><span class=\"comment\">why</span><span class=\"literal\">-</span><span class=\"comment\">every</span><span class=\"literal\">-</span><span class=\"comment\">programmer</span><span class=\"literal\">-</span><span class=\"comment\">should</span><span class=\"literal\">-</span><span class=\"comment\">play</span><span class=\"literal\">-</span><span class=\"comment\">nethack</span><span class=\"string\">.</span><span class=\"comment\">textile</span>\n<span class=\"comment\">|</span>   <span class=\"comment\">`</span><span class=\"literal\">-</span><span class=\"literal\">-</span> <span class=\"comment\">2009</span><span class=\"literal\">-</span><span class=\"comment\">04</span><span class=\"literal\">-</span><span class=\"comment\">26</span><span class=\"literal\">-</span><span class=\"comment\">barcamp</span><span class=\"literal\">-</span><span class=\"comment\">boston</span><span class=\"literal\">-</span><span class=\"comment\">4</span><span class=\"literal\">-</span><span class=\"comment\">roundup</span><span class=\"string\">.</span><span class=\"comment\">textile</span>\n<span class=\"comment\">|</span><span class=\"literal\">-</span><span class=\"literal\">-</span> <span class=\"comment\">_site</span>\n<span class=\"comment\">`</span><span class=\"literal\">-</span><span class=\"literal\">-</span> <span class=\"comment\">index</span><span class=\"string\">.</span><span class=\"comment\">html</span>\n</code></pre><p>简单介绍一下他们的作用：</p>\n<h4 id=\"_config-yml\">_config.yml</h4>\n<p>配置文件，用来定义你想要的效果，设置之后就不用关心了。</p>\n<h4 id=\"_includes\">_includes</h4>\n<p>可以用来存放一些小的可复用的模块，方便通过<code>{ % include file.ext %}</code>（去掉前两个{中或者{与%中的空格，下同）灵活的调用。这条命令会调用_includes/file.ext文件。</p>\n<h4 id=\"_layouts\">_layouts</h4>\n<p>这是模板文件存放的位置。模板需要通过<a href=\"https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter\" target=\"_blank\" rel=\"external\">YAML front matter</a>来定义，后面会讲到，<code>{ { content }}</code>标记用来将数据插入到这些模板中来。</p>\n<h4 id=\"_posts\">_posts</h4>\n<p>你的动态内容，一般来说就是你的博客正文存放的文件夹。他的命名有严格的规定，必须是<code>2012-02-22-artical-title.MARKUP</code>这样的形式，MARKUP是你所使用标记语言的文件后缀名，根据_config.yml中设定的链接规则，可以根据你的文件名灵活调整，文章的日期和标记语言后缀与文章的标题的独立的。</p>\n<h4 id=\"_site\">_site</h4>\n<p>这个是Jekyll生成的最终的文档，不用去关心。最好把他放在你的<code>.gitignore</code>文件中忽略它。</p>\n<h4 id=\"其他文件夹\">其他文件夹</h4>\n<p>你可以创建任何的文件夹，在根目录下面也可以创建任何文件，假设你创建了<code>project</code>文件夹，下面有一个<code>github-pages.md</code>的文件，那么你就可以通过<code>yoursite.com/project/github-pages</code>访问的到，如果你是使用一级域名的话。文件后缀可以是<code>.html</code>或者<code>markdown</code>或者<code>textile</code>。这里还有很多的例子：<a href=\"https://github.com/mojombo/jekyll/wiki/Sites\" target=\"_blank\" rel=\"external\">https://github.com/mojombo/jekyll/wiki/Sites</a></p>\n<h3 id=\"Jekyll的配置\">Jekyll的配置</h3>\n<p>Jekyll的配置写在_config.yml文件中，可配置项有很多，我们不去一一追究了，很多配置虽有用但是一般不需要去关心，<a href=\"https://github.com/mojombo/jekyll/wiki/configuration\" target=\"_blank\" rel=\"external\">官方配置文档</a>有很详细的说明，确实需要了可以去这里查，我们主要说两个比较重要的东西，一个是<code>Permalink</code>，还有就是自定义项。</p>\n<p><code>Permalink</code>项用来定义你最终的文章链接是什么形式，他有下面几个变量：</p>\n<ul>\n<li><code>year</code> 文件名中的年份</li>\n<li><code>month</code> 文件名中的月份</li>\n<li><code>day</code> 文件名中的日期</li>\n<li><code>title</code> 文件名中的文章标题</li>\n<li><code>categories</code> 文章的分类，如果文章没有分类，会忽略</li>\n<li><code>i-month</code> 文件名中的除去前缀0的月份</li>\n<li><code>i-day</code> 文件名中的除去前缀0的日期</li>\n</ul>\n<p>看看最终的配置效果：</p>\n<ul>\n<li><code>permalink: pretty</code> /2009/04/29/slap-chop/index.html</li>\n<li><code>permalink: /:month-:day-:year/:title.html</code> /04-29-2009/slap-chop.html</li>\n<li><code>permalink: /blog/:year/:month/:day/:title</code> /blog/2009/04/29/slap-chop/index.html</li>\n</ul>\n<p>我使用的是：</p>\n<ul>\n<li><code>permalink: /:title</code> /github-pages</li>\n</ul>\n<p>自定义项的内容，例如我们定义了<code>title:BeiYuu的博客</code>这样一项，那么你就可以在文章中使用<code>{ { site.title }}</code>来引用这个变量了，非常方便定义些全局变量。</p>\n<h3 id=\"YAML_Front_Matter和模板变量\">YAML Front Matter和模板变量</h3>\n<p>对于使用YAML定义格式的文章，Jekyll会特别对待，他的格式要求比较严格，必须是这样的形式：</p>\n<pre><code><span class=\"bullet\">---\n</span>layout: post\n<span class=\"header\">title: Blogging Like a Hacker\n---</span>\n</code></pre><p>前后的<code>---</code>不能省略，在这之间，你可以定一些你需要的变量，layout就是调用<code>_layouts</code>下面的某一个模板，他还有一些其他的变量可以使用：</p>\n<ul>\n<li><code>permalink</code> 你可以对某一篇文章使用通用设置之外的永久链接</li>\n<li><code>published</code> 可以单独设置某一篇文章是否需要发布</li>\n<li><code>category</code> 设置文章的分类</li>\n<li><code>tags</code> 设置文章的tag</li>\n</ul>\n<p>上面的<code>title</code>就是自定义的内容，你也可以设置其他的内容，在文章中可以通过<code>{ { page.title }}</code>这样的形式调用。</p>\n<p>模板变量，我们之前也涉及了不少了，还有其他需要的变量，可以参考官方的文档：<a href=\"https://github.com/mojombo/jekyll/wiki/template-data\" title=\"Jekyll Template Data\" target=\"_blank\" rel=\"external\">https://github.com/mojombo/jekyll/wiki/template-data</a></p>\n<h2 id=\"使用Disqus管理评论\">使用Disqus管理评论</h2>\n<p>模板部分到此就算是配置完毕了，但是Jekyll只是个静态页面的发布系统，想做到关爽场倒是很容易，如果想要评论呢？也很简单。</p>\n<p>现在专做评论模块的产品有很多，比如<a href=\"http://disqus.com/\" target=\"_blank\" rel=\"external\">Disqus</a>，还有国产的<a href=\"http://duoshuo.com/\" target=\"_blank\" rel=\"external\">多说</a>，Disqus对现在各种系统的支持都比较全面，到写博客为止，多说现在仅是WordPress的一个插件，所以我这里暂时也使用不了，多说与国内的社交网络紧密结合，还是有很多亮点的，值得期待一下。我先选择了Disqus。</p>\n<p>注册账号什么的就不提了，Disqus支持很多的博客平台，参见下图：<br><img src=\"/images/githubpages/disqus-site.jpg\" alt=\"Disqus sites\"></p>\n<p>我们选择最下面的<code>Universal Code</code>就好，然后会看到一个介绍页面，把下面这段代码复制到你的模板里面，可以只复制到显示文章的模板中：</p>\n<pre><code><span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"disqus_thread\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">script</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\">\n    <span class=\"comment\">/* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */</span>\n    <span class=\"keyword\">var</span> disqus_shortname = <span class=\"string\">'example'</span>; <span class=\"comment\">// required: replace example with your forum shortname 这个地方需要改成你配置的网站名</span>\n\n    <span class=\"comment\">/* * * DON'T EDIT BELOW THIS LINE * * */</span>\n    (<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n        <span class=\"keyword\">var</span> dsq = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>); dsq.type = <span class=\"string\">'text/javascript'</span>; dsq.async = <span class=\"literal\">true</span>;\n        dsq.src = <span class=\"string\">'http://'</span> + disqus_shortname + <span class=\"string\">'.disqus.com/embed.js'</span>;\n        (<span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>] || <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'body'</span>)[<span class=\"number\">0</span>]).appendChild(dsq);\n    })();\n</span><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">noscript</span>&gt;</span>Please enable JavaScript to view the <span class=\"tag\">&lt;<span class=\"title\">a</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"http://disqus.com/?ref_noscript\"</span>&gt;</span>comments powered by Disqus.<span class=\"tag\">&lt;/<span class=\"title\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">noscript</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">a</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"http://disqus.com\"</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"dsq-brlink\"</span>&gt;</span>blog comments powered by <span class=\"tag\">&lt;<span class=\"title\">span</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"logo-disqus\"</span>&gt;</span>Disqus<span class=\"tag\">&lt;/<span class=\"title\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">a</span>&gt;</span>\n</code></pre><p>配置完之后，你也可以做一些异步加载的处理，提高性能，比如我就在最开始页面打开的时候不显示评论，当你想看评论的时候，点击“显示评论”再加载Disqus的模块。代码很简单，你可以参考我的写法。</p>\n<pre><code>$(<span class=\"string\">'#disqus_container .comment'</span>).on(<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>{\n        $(<span class=\"keyword\">this</span>).html(<span class=\"string\">'加载中...'</span>);\n        <span class=\"keyword\">var</span> disqus_shortname = <span class=\"string\">'beiyuu'</span>;\n        <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;\n        BYB.includeScript(<span class=\"string\">'http://'</span> + disqus_shortname + <span class=\"string\">'.disqus.com/embed.js'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>{$(that).remove()}); <span class=\"comment\">//这是一个加载js的函数</span>\n});\n</code></pre><p>如果你不喜欢Disqus的样式，你也可以根据他生成的HTML结构，自己改写样式覆盖它的，Disqus现在也提供每个页面的评论数接口，<a href=\"http://docs.disqus.com/developers/universal/\" target=\"_blank\" rel=\"external\">帮助文档</a>在这里可以看到。</p>\n<h2 id=\"代码高亮插件\">代码高亮插件</h2>\n<p>如果写技术博客，代码高亮少不了，有两个可选插件<a href=\"http://mihai.bazon.net/projects/javascript-syntax-highlighting-engine\" target=\"_blank\" rel=\"external\">DlHightLight代码高亮组件</a>和<a href=\"http://code.google.com/p/google-code-prettify/\" target=\"_blank\" rel=\"external\">Google Code Prettify</a>。DLHightLight支持的语言相对较少一些，有js、css、xml和html，Google的高亮插件基本上任何语言都支持，也可以自定义语言，也支持自动识别，也有行号的特别支持。</p>\n<p>Google的高亮插件使用也比较方便，只需要在<code>&lt;pre&gt;</code>的标签上加入<code>prettyprint</code>即可。所以我选择了Google Code Prettify。</p>\n<h2 id=\"搭建本地jekyll环境\">搭建本地jekyll环境</h2>\n<p>这里主要介绍一下在Mac OS X下面的安装过程，其他操作系统可以参考官方的<a href=\"https://github.com/mojombo/jekyll/wiki/Install\" target=\"_blank\" rel=\"external\">jekyll安装</a>。</p>\n<p>作为生活在水深火热的墙内人民，有必要进行下面一步修改gem的源，方便我们更快的下载所需组建：</p>\n<pre><code><span class=\"built_in\">sudo</span> gem sources --remove http://rubygems.org/ \n<span class=\"built_in\">sudo</span> gem sources <span class=\"operator\">-a</span> http://ruby.taobao.org/ \n</code></pre><p>然后用Gem安装jekyll</p>\n<pre><code><span class=\"variable\">$ </span>gem install jekyll\n</code></pre><p>不过一般如果有出错提示，你可能需要这样安装：</p>\n<pre><code>$ <span class=\"built_in\">sudo</span> gem install jekyll\n</code></pre><p>我到了这一步的时候总是提示错误<code>Failed to build gem native extension</code>，很可能的一个原因是没有安装rvm，<a href=\"https://rvm.io/rvm/install/\" target=\"_blank\" rel=\"external\">rvm的安装</a>可以参考这里，或者敲入下面的命令：</p>\n<pre><code>$ curl -L http<span class=\"variable\">s:</span>//<span class=\"built_in\">get</span>.rvm.io | bash -<span class=\"keyword\">s</span> stable --<span class=\"keyword\">ruby</span>\n</code></pre><p>然后还需要安装Markdown的解释器，这个需要在你的_config.yml里面设置<code>markdown:rdiscount</code>：</p>\n<pre><code><span class=\"variable\">$ </span>gem install jekyll rdiscount\n</code></pre><p>好了，如果一切顺利的话，本地环境就基本搭建完成了，进入之前我们建立的博客目录，运行下面的命令：</p>\n<pre><code><span class=\"comment\">$</span> <span class=\"comment\">jekyll</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">server</span>\n</code></pre><p>这个时候，你就可以通过<code>localhost:4000</code>来访问了。还有关于<a href=\"http://jekyllbootstrap.com/\" target=\"_blank\" rel=\"external\">jekyll bootstrap</a>的资料，需要自己修改调试的，可以研究一下。</p>\n<p>我在这个过程中还遇到两个诡异的没有解决的问题，一个是我放在根目录下面的blog.md等文件，在GitHub的pages服务上一切正常，可以通过<code>beiyuu.com/blog</code>访问的到，但是在本地环境下，总是<code>not found</code>，很是让人郁闷，看生成的<code>_site</code>目录下面的文件，也是正常的<code>blog.html</code>，但就是找不到，只有当我把URL改为<code>localhost:4000/blog.html</code>的时候，才能访问的到，环境不同真糟糕。</p>\n<p>还有一个是关于<code>category</code>的问题，根据<code>YAML</code>的语法，我们在文章头部可以定义文章所属的类别，也可以定义为<code>category:[blog,rss]</code>这样子的多类别，我在本地试一切正常，但是push到GitHub之后，就无法读取了，真让人着急，没有办法，只能采用别的办法满足我的需求了。这里还有一篇<a href=\"http://chxt6896.github.com/blog/2012/02/13/blog-jekyll-native.html\" target=\"_blank\" rel=\"external\">Jekyll 本地调试之若干问题</a>，安装中如果有其他问题，也可以对照参考一下。</p>\n<h2 id=\"结语\">结语</h2>\n<p>如果你跟着这篇不那么详尽的教程，成功搭建了自己的博客，恭喜你！剩下的就是保持热情的去写自己的文章吧。</p>\n","source":"_posts/2012-02-22-github-pages.md","raw":"title: 使用Github Pages建独立博客\r\n---\r\n\r\n[Github][]很好的将代码和社区联系在了一起，于是发生了很多有趣的事情，世界也因为他美好了一点点。Github作为现在最流行的代码仓库，已经得到很多大公司和项目的青睐，比如[jQuery][]、[Twitter][]等。为使项目更方便的被人理解，介绍页面少不了，甚至会需要完整的文档站，Github替你想到了这一点，他提供了[Github Pages][]的服务，不仅可以方便的为项目建立介绍站点，也可以用来建立个人博客。\r\n\r\nGithub Pages有以下几个优点：\r\n\r\n<ul>\r\n    <li>轻量级的博客系统，没有麻烦的配置</li>\r\n    <li>使用标记语言，比如<a href=\"http://markdown.tw\">Markdown</a></li>\r\n    <li>无需自己搭建服务器</li>\r\n    <li>根据Github的限制，对应的每个站有300MB空间</li>\r\n    <li>可以绑定自己的域名</li>\r\n</ul>\r\n\r\n当然他也有缺点：\r\n\r\n* 使用[Jekyll][]模板系统，相当于静态页发布，适合博客，文档介绍等。\r\n* 动态程序的部分相当局限，比如没有评论，不过还好我们有解决方案。\r\n* 基于Git，很多东西需要动手，不像Wordpress有强大的后台\r\n\r\n大致介绍到此，作为个人博客来说，简洁清爽的表达自己的工作、心得，就已达目标，所以Github Pages是我认为此需求最完美的解决方案了。\r\n\r\n## 购买、绑定独立域名\r\n虽说[Godaddy][]曾支持过SOPA，并且首页放着极其不专业的大胸美女，但是作为域名服务商他做的还不赖，选择它最重要的原因是他支持支付宝，没有信用卡有时真的很难过。\r\n\r\n域名的购买不用多讲，注册、选域名、支付，有网购经验的都毫无压力，优惠码也遍地皆是。域名的配置需要提醒一下，因为伟大英明的GFW的存在，我们必须多做些事情。\r\n\r\n流传Godaddy的域名解析服务器被墙掉，导致域名无法访问，后来这个事情在[BeiYuu][]也发生了，不得已需要把域名解析服务迁移到国内比较稳定的服务商处，这个迁移对于域名来说没有什么风险，最终的控制权还是在Godaddy那里，你随时都可以改回去。\r\n\r\n我们选择[DNSPod][]的服务，他们的产品做得不错，易用、免费，收费版有更高端的功能，暂不需要。注册登录之后，按照DNSPod的说法，只需三步（我们插入一步）：\r\n\r\n<ul>\r\n\t<li>首先添加域名记录，可参考DNSPod的帮助文档：<a href=\"https://www.dnspod.cn/Support\">https://www.dnspod.cn/Support</a></li>\r\n\t<li>在DNSPod自己的域名下添加一条<a href=\"http://baike.baidu.com/view/65575.htm\">A记录</a>，地址就是Github Pages的服务IP地址：207.97.227.245</li>\r\n\t<li>在域名注册商处修改DNS服务:去Godaddy修改Nameservers为这两个地址：f1g1ns1.dnspod.net、f1g1ns2.dnspod.net。如果你不明白在哪里修改，可以参考这里：<a href=\"https://www.dnspod.cn/support/index/fid/119\">Godaddy注册的域名如何使用DNSPod</a></li>\r\n\t<li>等待域名解析生效</li>\r\n</ul>\r\n\r\n域名的配置部分完成，跪谢方校长。\r\n\r\n## 配置和使用Github\r\nGit是版本管理的未来，他的优点我不再赘述，相关资料很多。推荐这本[Git中文教程][4]。\r\n\r\n要使用Git，需要安装它的客户端，推荐在Linux下使用Git，会比较方便。Windows版的下载地址在这里：[http://code.google.com/p/msysgit/downloads/list](http://code.google.com/p/msysgit/downloads/list \"Windows版Git客户端\")。其他系统的安装也可以参考官方的[安装教程][5]。\r\n\r\n下载安装客户端之后，各个系统的配置就类似了，我们使用windows作为例子，Linux和Mac与此类似。\r\n\r\n在Windows下，打开Git Bash，其他系统下面则打开终端（Terminal）：\r\n![Git Bash](/images/githubpages/bootcamp_1_win_gitbash.jpg)\r\n\r\n###1、检查SSH keys的设置\r\n首先我们需要检查你电脑上现有的ssh key：\r\n\r\n    $ cd ~/.ssh\r\n\r\n如果显示“No such file or directory”，跳到第三步，否则继续。\r\n\r\n###2、备份和移除原来的ssh key设置：\r\n因为已经存在key文件，所以需要备份旧的数据并删除：\r\n\r\n    $ ls\r\n    config\tid_rsa\tid_rsa.pub\tknown_hosts\r\n    $ mkdir key_backup\r\n    $ cp id_rsa* key_backup\r\n    $ rm id_rsa*\r\n\r\n###3、生成新的SSH Key：\r\n输入下面的代码，就可以生成新的key文件，我们只需要默认设置就好，所以当需要输入文件名的时候，回车就好。\r\n\r\n    $ ssh-keygen -t rsa -C \"邮件地址@youremail.com\"\r\n    Generating public/private rsa key pair.\r\n    Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):<回车就好>\r\n\r\n然后系统会要你输入加密串（[Passphrase][6]）：\r\n\r\n    Enter passphrase (empty for no passphrase):<输入加密串>\r\n    Enter same passphrase again:<再次输入加密串>\r\n\r\n最后看到这样的界面，就成功设置ssh key了：\r\n![ssh key success](/images/githubpages/ssh-key-set.png)\r\n\r\n###4、添加SSH Key到GitHub：\r\n在本机设置SSH Key之后，需要添加到GitHub上，以完成SSH链接的设置。\r\n\r\n用文本编辑工具打开id_rsa.pub文件，如果看不到这个文件，你需要设置显示隐藏文件。准确的复制这个文件的内容，才能保证设置的成功。\r\n\r\n在GitHub的主页上点击设置按钮：\r\n![github account setting](/images/githubpages/github-account-setting.png)\r\n\r\n选择SSH Keys项，把复制的内容粘贴进去，然后点击Add Key按钮即可：\r\n![set ssh keys](/images/githubpages/bootcamp_1_ssh.jpg)\r\n\r\nPS：如果需要配置多个GitHub账号，可以参看这个[多个github帐号的SSH key切换](http://omiga.org/blog/archives/2269)，不过需要提醒一下的是，如果你只是通过这篇文章中所述配置了Host，那么你多个账号下面的提交用户会是一个人，所以需要通过命令`git config --global --unset user.email`删除用户账户设置，在每一个repo下面使用`git config --local user.email '你的github邮箱@mail.com'` 命令单独设置用户账户信息\r\n\r\n###5、测试一下\r\n可以输入下面的命令，看看设置是否成功，`git@github.com`的部分不要修改：\r\n\r\n    $ ssh -T git@github.com\r\n\r\n\r\n如果是下面的反应：\r\n\r\n    The authenticity of host 'github.com (207.97.227.239)' can't be established.\r\n    RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.\r\n    Are you sure you want to continue connecting (yes/no)?\r\n\r\n\r\n不要紧张，输入`yes`就好，然后会看到：\r\n\r\n    Hi <em>username</em>! You've successfully authenticated, but GitHub does not provide shell access.\r\n\r\n###6、设置你的账号信息\r\n现在你已经可以通过SSH链接到GitHub了，还有一些个人信息需要完善的。\r\n\r\nGit会根据用户的名字和邮箱来记录提交。GitHub也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的，名字必须是你的真名，而不是GitHub的昵称。\r\n\r\n    $ git config --global user.name \"你的名字\"\r\n    $ git config --global user.email \"your_email@youremail.com\"\r\n\r\n####设置GitHub的token\r\n\r\n2012-4-28补充：新版的接口已经不需要配置token了，所以下面这段可以跳过了\r\n\r\n有些工具没有通过SSH来链接GitHub。如果要使用这类工具，你需要找到然后设置你的API Token。\r\n\r\n在GitHub上，你可以点击*Account Setting > Account Admin*：\r\n![set ssh keys](/images/githubpages/bootcamp_1_token.jpg)\r\n\r\n然后在你的命令行中，输入下面的命令，把token添加进去：\r\n\r\n    $ git config --global user.name \"你的名字\"\r\n    $ git config --global user.token 0123456789your123456789token\r\n\r\n如果你改了GitHub的密码，需要重新设置token。\r\n\r\n###成功了\r\n好了，你已经可以成功连接GitHub了。\r\n\r\n## 使用GitHub Pages建立博客\r\n与GitHub建立好链接之后，就可以方便的使用它提供的Pages服务，GitHub Pages分两种，一种是你的GitHub用户名建立的`username.github.io`这样的用户&组织页（站），另一种是依附项目的pages。\r\n\r\n###User & Organization Pages\r\n想建立个人博客是用的第一种，形如`beiyuu.github.io`这样的可访问的站，每个用户名下面只能建立一个，创建之后点击`Admin`进入项目管理，可以看到是这样的：\r\n![user pages](/images/githubpages/user-pages.png)\r\n而普通的项目是这样的，即使你也是用的`othername.github.io`：\r\n![other pages](/images/githubpages/other-pages.png)\r\n\r\n创建好`username.github.io`项目之后，提交一个`index.html`文件，然后`push`到GitHub的`master`分支（也就是普通意义上的主干）。第一次页面生效需要一些时间，大概10分钟左右。\r\n\r\n生效之后，访问`username.github.io`就可以看到你上传的页面了，[beiyuu.github.com][7]就是一个例子。\r\n\r\n关于第二种项目`pages`，简单提一下，他和用户pages使用的后台程序是同一套，只不过它的目的是项目的帮助文档等跟项目绑定的内容，所以需要在项目的`gh-pages`分支上去提交相应的文件，GitHub会自动帮你生成项目pages。具体的使用帮助可以参考[Github Pages][]的官方文档：\r\n\r\n###绑定域名\r\n我们在第一部分就提到了在DNS部分的设置，再来看在GitHub的配置，要想让`username.github.io`能通过你自己的域名来访问，需要在项目的根目录下新建一个名为`CNAME`的文件，文件内容形如：\r\n\r\n    beiyuu.com\r\n\r\n你也可以绑定在二级域名上：\r\n\r\n    blog.beiyuu.com\r\n\r\n需要提醒的一点是，如果你使用形如`beiyuu.com`这样的一级域名的话，需要在DNS处设置A记录到`207.97.227.245`（**这个地址会有变动，[这里][a-record]查看**），而不是在DNS处设置为CNAME的形式，否则可能会对其他服务（比如email）造成影响。\r\n\r\n设置成功后，根据DNS的情况，最长可能需要一天才能生效，耐心等待吧。\r\n\r\n##Jekyll模板系统\r\nGitHub Pages为了提供对HTML内容的支持，选择了[Jekyll][]作为模板系统，Jekyll是一个强大的静态模板系统，作为个人博客使用，基本上可以满足要求，也能保持管理的方便，你可以查看[Jekyll官方文档][8]。\r\n\r\n你可以直接fork[我的项目][11]，然后改名，就有了你自己的满足Jekyll要求的文档了，当然你也可以按照下面的介绍自己创建。\r\n\r\n###Jekyll基本结构\r\nJekyll的核心其实就是一个文本的转换引擎，用你最喜欢的标记语言写文档，可以是Markdown、Textile或者HTML等等，再通过`layout`将文档拼装起来，根据你设置的URL规则来展现，这些都是通过严格的配置文件来定义，最终的产出就是web页面。\r\n\r\n基本的Jekyll结构如下：\r\n\r\n    |-- _config.yml\r\n    |-- _includes\r\n    |-- _layouts\r\n    |   |-- default.html\r\n    |   `-- post.html\r\n    |-- _posts\r\n    |   |-- 2007-10-29-why-every-programmer-should-play-nethack.textile\r\n    |   `-- 2009-04-26-barcamp-boston-4-roundup.textile\r\n    |-- _site\r\n    `-- index.html\r\n\r\n\r\n简单介绍一下他们的作用：\r\n####_config.yml\r\n配置文件，用来定义你想要的效果，设置之后就不用关心了。\r\n\r\n####_includes\r\n可以用来存放一些小的可复用的模块，方便通过`{ % include file.ext %}`（去掉前两个{中或者{与%中的空格，下同）灵活的调用。这条命令会调用_includes/file.ext文件。\r\n\r\n####_layouts\r\n这是模板文件存放的位置。模板需要通过[YAML front matter][9]来定义，后面会讲到，`{ { content }}`标记用来将数据插入到这些模板中来。\r\n\r\n####_posts\r\n你的动态内容，一般来说就是你的博客正文存放的文件夹。他的命名有严格的规定，必须是`2012-02-22-artical-title.MARKUP`这样的形式，MARKUP是你所使用标记语言的文件后缀名，根据_config.yml中设定的链接规则，可以根据你的文件名灵活调整，文章的日期和标记语言后缀与文章的标题的独立的。\r\n\r\n####_site\r\n这个是Jekyll生成的最终的文档，不用去关心。最好把他放在你的`.gitignore`文件中忽略它。\r\n\r\n####其他文件夹\r\n你可以创建任何的文件夹，在根目录下面也可以创建任何文件，假设你创建了`project`文件夹，下面有一个`github-pages.md`的文件，那么你就可以通过`yoursite.com/project/github-pages`访问的到，如果你是使用一级域名的话。文件后缀可以是`.html`或者`markdown`或者`textile`。这里还有很多的例子：[https://github.com/mojombo/jekyll/wiki/Sites](https://github.com/mojombo/jekyll/wiki/Sites)\r\n\r\n###Jekyll的配置\r\nJekyll的配置写在_config.yml文件中，可配置项有很多，我们不去一一追究了，很多配置虽有用但是一般不需要去关心，[官方配置文档][10]有很详细的说明，确实需要了可以去这里查，我们主要说两个比较重要的东西，一个是`Permalink`，还有就是自定义项。\r\n\r\n`Permalink`项用来定义你最终的文章链接是什么形式，他有下面几个变量：\r\n\r\n* `year` 文件名中的年份\r\n* `month` 文件名中的月份\r\n* `day` 文件名中的日期\r\n* `title` 文件名中的文章标题\r\n* `categories` 文章的分类，如果文章没有分类，会忽略\r\n* `i-month` 文件名中的除去前缀0的月份\r\n* `i-day` 文件名中的除去前缀0的日期\r\n\r\n看看最终的配置效果：\r\n\r\n* `permalink: pretty` /2009/04/29/slap-chop/index.html\r\n* `permalink: /:month-:day-:year/:title.html` /04-29-2009/slap-chop.html\r\n* `permalink: /blog/:year/:month/:day/:title` /blog/2009/04/29/slap-chop/index.html\r\n\r\n我使用的是：\r\n\r\n* `permalink: /:title` /github-pages\r\n\r\n自定义项的内容，例如我们定义了`title:BeiYuu的博客`这样一项，那么你就可以在文章中使用`{ { site.title }}`来引用这个变量了，非常方便定义些全局变量。\r\n\r\n###YAML Front Matter和模板变量\r\n对于使用YAML定义格式的文章，Jekyll会特别对待，他的格式要求比较严格，必须是这样的形式：\r\n\r\n    ---\r\n    layout: post\r\n    title: Blogging Like a Hacker\r\n    ---\r\n\r\n前后的`---`不能省略，在这之间，你可以定一些你需要的变量，layout就是调用`_layouts`下面的某一个模板，他还有一些其他的变量可以使用：\r\n\r\n* `permalink` 你可以对某一篇文章使用通用设置之外的永久链接\r\n* `published` 可以单独设置某一篇文章是否需要发布\r\n* `category` 设置文章的分类\r\n* `tags` 设置文章的tag\r\n\r\n上面的`title`就是自定义的内容，你也可以设置其他的内容，在文章中可以通过`{ { page.title }}`这样的形式调用。\r\n\r\n模板变量，我们之前也涉及了不少了，还有其他需要的变量，可以参考官方的文档：[https://github.com/mojombo/jekyll/wiki/template-data](https://github.com/mojombo/jekyll/wiki/template-data \"Jekyll Template Data\")\r\n\r\n## 使用Disqus管理评论\r\n模板部分到此就算是配置完毕了，但是Jekyll只是个静态页面的发布系统，想做到关爽场倒是很容易，如果想要评论呢？也很简单。\r\n\r\n现在专做评论模块的产品有很多，比如[Disqus][]，还有国产的[多说][]，Disqus对现在各种系统的支持都比较全面，到写博客为止，多说现在仅是WordPress的一个插件，所以我这里暂时也使用不了，多说与国内的社交网络紧密结合，还是有很多亮点的，值得期待一下。我先选择了Disqus。\r\n\r\n注册账号什么的就不提了，Disqus支持很多的博客平台，参见下图：\r\n![Disqus sites](/images/githubpages/disqus-site.jpg)\r\n\r\n我们选择最下面的`Universal Code`就好，然后会看到一个介绍页面，把下面这段代码复制到你的模板里面，可以只复制到显示文章的模板中：\r\n\r\n    <div id=\"disqus_thread\"></div>\r\n    <script type=\"text/javascript\">\r\n        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */\r\n        var disqus_shortname = 'example'; // required: replace example with your forum shortname 这个地方需要改成你配置的网站名\r\n\r\n        /* * * DON'T EDIT BELOW THIS LINE * * */\r\n        (function() {\r\n            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;\r\n            dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';\r\n            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);\r\n        })();\r\n    </script>\r\n    <noscript>Please enable JavaScript to view the <a href=\"http://disqus.com/?ref_noscript\">comments powered by Disqus.</a></noscript>\r\n    <a href=\"http://disqus.com\" class=\"dsq-brlink\">blog comments powered by <span class=\"logo-disqus\">Disqus</span></a>\r\n\r\n配置完之后，你也可以做一些异步加载的处理，提高性能，比如我就在最开始页面打开的时候不显示评论，当你想看评论的时候，点击“显示评论”再加载Disqus的模块。代码很简单，你可以参考我的写法。\r\n\r\n    $('#disqus_container .comment').on('click',function(){\r\n            $(this).html('加载中...');\r\n            var disqus_shortname = 'beiyuu';\r\n            var that = this;\r\n            BYB.includeScript('http://' + disqus_shortname + '.disqus.com/embed.js',function(){$(that).remove()}); //这是一个加载js的函数\r\n    });\r\n\r\n如果你不喜欢Disqus的样式，你也可以根据他生成的HTML结构，自己改写样式覆盖它的，Disqus现在也提供每个页面的评论数接口，[帮助文档][12]在这里可以看到。\r\n\r\n##代码高亮插件\r\n如果写技术博客，代码高亮少不了，有两个可选插件[DlHightLight代码高亮组件][13]和[Google Code Prettify][14]。DLHightLight支持的语言相对较少一些，有js、css、xml和html，Google的高亮插件基本上任何语言都支持，也可以自定义语言，也支持自动识别，也有行号的特别支持。\r\n\r\nGoogle的高亮插件使用也比较方便，只需要在`<pre>`的标签上加入`prettyprint`即可。所以我选择了Google Code Prettify。\r\n\r\n##搭建本地jekyll环境\r\n这里主要介绍一下在Mac OS X下面的安装过程，其他操作系统可以参考官方的[jekyll安装][15]。\r\n\r\n作为生活在水深火热的墙内人民，有必要进行下面一步修改gem的源，方便我们更快的下载所需组建：\r\n\r\n    sudo gem sources --remove http://rubygems.org/ \r\n    sudo gem sources -a http://ruby.taobao.org/ \r\n\r\n然后用Gem安装jekyll\r\n\r\n    $ gem install jekyll\r\n\r\n不过一般如果有出错提示，你可能需要这样安装：\r\n\r\n    $ sudo gem install jekyll\r\n\r\n我到了这一步的时候总是提示错误`Failed to build gem native extension`，很可能的一个原因是没有安装rvm，[rvm的安装][16]可以参考这里，或者敲入下面的命令：\r\n\r\n    $ curl -L https://get.rvm.io | bash -s stable --ruby\r\n\r\n然后还需要安装Markdown的解释器，这个需要在你的_config.yml里面设置`markdown:rdiscount`：\r\n\r\n    $ gem install jekyll rdiscount\r\n\r\n好了，如果一切顺利的话，本地环境就基本搭建完成了，进入之前我们建立的博客目录，运行下面的命令：\r\n\r\n    $ jekyll --server\r\n\r\n这个时候，你就可以通过`localhost:4000`来访问了。还有关于[jekyll bootstrap][17]的资料，需要自己修改调试的，可以研究一下。\r\n\r\n我在这个过程中还遇到两个诡异的没有解决的问题，一个是我放在根目录下面的blog.md等文件，在GitHub的pages服务上一切正常，可以通过`beiyuu.com/blog`访问的到，但是在本地环境下，总是`not found`，很是让人郁闷，看生成的`_site`目录下面的文件，也是正常的`blog.html`，但就是找不到，只有当我把URL改为`localhost:4000/blog.html`的时候，才能访问的到，环境不同真糟糕。\r\n\r\n还有一个是关于`category`的问题，根据`YAML`的语法，我们在文章头部可以定义文章所属的类别，也可以定义为`category:[blog,rss]`这样子的多类别，我在本地试一切正常，但是push到GitHub之后，就无法读取了，真让人着急，没有办法，只能采用别的办法满足我的需求了。这里还有一篇[Jekyll 本地调试之若干问题][18]，安装中如果有其他问题，也可以对照参考一下。\r\n\r\n##结语\r\n如果你跟着这篇不那么详尽的教程，成功搭建了自己的博客，恭喜你！剩下的就是保持热情的去写自己的文章吧。\r\n\r\n\r\n[BeiYuu]:    http://beiyuu.com  \"BeiYuu\"\r\n[Github]:   http://github.com \"Github\"\r\n[jQuery]:   https://github.com/jquery/jquery \"jQuery@github\"\r\n[Twitter]:  https://github.com/twitter/bootstrap \"Twitter@github\"\r\n[Github Pages]: http://pages.github.com/ \"Github Pages\"\r\n[Godaddy]:  http://www.godaddy.com/ \"Godaddy\"\r\n[Jekyll]:   https://github.com/mojombo/jekyll \"Jekyll\"\r\n[DNSPod]:   https://www.dnspod.cn/ \"DNSPod\"\r\n[Disqus]: http://disqus.com/\r\n[多说]: http://duoshuo.com/\r\n[1]:    {{ page.url}}  ({{ page.title }})\r\n[2]: http://markdown.tw/    \"Markdown语法\"\r\n[3]:    http://baike.baidu.com/view/65575.htm \"A记录\"\r\n[4]: http://progit.org/book/zh/ \"Pro Git中文版\"\r\n[5]: http://help.github.com/mac-set-up-git/ \"Mac下Git安装\"\r\n[6]: http://help.github.com/ssh-key-passphrases/\r\n[7]: http://beiyuu.github.com\r\n[8]: https://github.com/mojombo/jekyll/blob/master/README.textile\r\n[9]: https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter\r\n[10]: https://github.com/mojombo/jekyll/wiki/configuration\r\n[11]: https://github.com/beiyuu/beiyuu.github.com\r\n[12]: http://docs.disqus.com/developers/universal/\r\n[13]: http://mihai.bazon.net/projects/javascript-syntax-highlighting-engine\r\n[14]: http://code.google.com/p/google-code-prettify/\r\n[15]: https://github.com/mojombo/jekyll/wiki/Install\r\n[16]: https://rvm.io/rvm/install/\r\n[17]: http://jekyllbootstrap.com/\r\n[18]: http://chxt6896.github.com/blog/2012/02/13/blog-jekyll-native.html\r\n[a-record]: https://help.github.com/articles/my-custom-domain-isn-t-working\r\n","slug":"2012-02-22-github-pages","date":1422544870000,"updated":1422544870000,"excerpt":"","_id":"8gjb2appjnk4ubao","categories":[],"tags":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"关于 JavaScript arguments.callee","content":"<h3 id=\"关于_JavaScript_arguments-callee\">关于 JavaScript arguments.callee</h3>\n<p>昨天无意间看到 arguments.callee , 今天就真对这个名词查看一下吧</p>\n<h3 id=\"摘要\">摘要</h3>\n<p>arguments.callee 包含了当前正在执行的函数</p>\n<h3 id=\"描述\">描述</h3>\n<p>callee 是 arguments 的一个属性, 它被用于在当前正在执行的函数内部指当前函数, 当函数没有名字的时候这是有用的, 比如一个无名的函数表达式(或者匿名函数).</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">注意:在第五版的 <span class=\"variable\">ECMAScript</span> 规范中, 当处于严格模式(use strict)时, 禁止使用 arguments.callee().</div><div class=\"line\">当函数必须调用它自己时, 可以通过为一个函数表达式命名或者使用函数声明来避免使用函数表达式.</div></pre></td></tr></table></figure>\n\n<h3 id=\"为什么_ECMAScript5_严格模式下禁用_callee?\">为什么 ECMAScript5 严格模式下禁用 callee?</h3>\n<p>JavaScript 的早期版本不允许为函数表达式命名, 因为这个原因函数表达式不能被递归调用.</p>\n<p>比如, 下面这个语法是行得通的</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span> <span class=\"params\">(n)</span> {</span></div><div class=\"line\">    <span class=\"keyword\">return</span> !(n &gt; <span class=\"number\">1</span>) ? <span class=\"number\">1</span> : <span class=\"built_in\">factorial</span>(n - <span class=\"number\">1</span>) * n;</div><div class=\"line\">}</div><div class=\"line\"><span class=\"matrix\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>].</span>map(<span class=\"built_in\">factorial</span>);</div></pre></td></tr></table></figure>\n\n<p>但是, 这种方式</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>].map(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(n)</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">return</span> !(n &gt; <span class=\"number\">1</span>) ? <span class=\"number\">1</span> : <span class=\"comment\">/* what goes here? */</span> (n - <span class=\"number\">1</span>) * n;</div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n<p>是不行的. 为了解决这个问题 arguments.callee 被引入进来, 你可以使用下面的语法</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>].map(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(n)</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">return</span> !(n &gt; <span class=\"number\">1</span>) ? <span class=\"number\">1</span> : <span class=\"built_in\">arguments</span>.callee(n - <span class=\"number\">1</span>) * n;</div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n<p>然而, 这是一个糟糕的解决方案, 在通常情况下这个方案(连同其它 arguments, callee 和 callee 问题)不能使用内联和尾递归(你能通过调试一些实例来实现它, 但即使是最好的代码以被检测为最优的, 这种方式也不是必须的). 最主要的问题是, 这种方式的递归调用会改变 this 值.比如:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> global = <span class=\"keyword\">this</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> sillyFunction = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(recursed)</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">if</span> (!recursed) { <span class=\"keyword\">return</span> <span class=\"built_in\">arguments</span>.callee(<span class=\"literal\">true</span>); }</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> !== global) {</div><div class=\"line\">        alert(<span class=\"string\">\"This is: \"</span> + <span class=\"keyword\">this</span>);</div><div class=\"line\">    } <span class=\"keyword\">else</span> {</div><div class=\"line\">        alert(<span class=\"string\">\"This is the global\"</span>);</div><div class=\"line\">    }</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">sillyFunction();</div></pre></td></tr></table></figure>\n\n<p>ECMAScript3 解决了这个问题通过允许为函数表达式命名, 例如:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"matrix\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>].</span>map(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span> <span class=\"params\">(n)</span> {</span></div><div class=\"line\">    <span class=\"keyword\">return</span> !(n &gt; <span class=\"number\">1</span>) ? <span class=\"number\">1</span> : <span class=\"built_in\">factorial</span>(n-<span class=\"number\">1</span>)*n;</div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n<p>这个转变有很多好处:</p>\n<ul>\n<li>在你的函数代码内部这个函数能像其它函数一样被调用</li>\n<li>在不会在外部产生一个额外的变量(不包含IE8及以下)</li>\n<li>相比通过 arguments 对象调用, 这种方式性能更好.</li>\n</ul>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/callee\" target=\"_blank\" rel=\"external\">原文</a></p>\n","source":"_posts/2015-01-27-arguments-callee.md","raw":"title: 关于 JavaScript arguments.callee\n---\n\n### 关于 JavaScript arguments.callee\n\n\n昨天无意间看到 arguments.callee , 今天就真对这个名词查看一下吧\n\n### 摘要\narguments.callee 包含了当前正在执行的函数\n### 描述\ncallee 是 arguments 的一个属性, 它被用于在当前正在执行的函数内部指当前函数, 当函数没有名字的时候这是有用的, 比如一个无名的函数表达式(或者匿名函数).\n\n````\n注意:在第五版的 ECMAScript 规范中, 当处于严格模式(use strict)时, 禁止使用 arguments.callee().\n当函数必须调用它自己时, 可以通过为一个函数表达式命名或者使用函数声明来避免使用函数表达式.\n````\n### 为什么 ECMAScript5 严格模式下禁用 callee?\nJavaScript 的早期版本不允许为函数表达式命名, 因为这个原因函数表达式不能被递归调用.\n\n比如, 下面这个语法是行得通的\n\n````\nfunction factorial (n) {\n    return !(n > 1) ? 1 : factorial(n - 1) * n;\n}\n[1,2,3,4,5].map(factorial);\n````\n但是, 这种方式\n\n````\n[1,2,3,4,5].map(function (n) {\n    return !(n > 1) ? 1 : /* what goes here? */ (n - 1) * n;\n});\n````\n是不行的. 为了解决这个问题 arguments.callee 被引入进来, 你可以使用下面的语法\n\n````\n[1,2,3,4,5].map(function (n) {\n    return !(n > 1) ? 1 : arguments.callee(n - 1) * n;\n});\n````\n然而, 这是一个糟糕的解决方案, 在通常情况下这个方案(连同其它 arguments, callee 和 callee 问题)不能使用内联和尾递归(你能通过调试一些实例来实现它, 但即使是最好的代码以被检测为最优的, 这种方式也不是必须的). 最主要的问题是, 这种方式的递归调用会改变 this 值.比如:\n\n````\nvar global = this;\n\nvar sillyFunction = function (recursed) {\n    if (!recursed) { return arguments.callee(true); }\n    if (this !== global) {\n        alert(\"This is: \" + this);\n    } else {\n        alert(\"This is the global\");\n    }\n}\n\nsillyFunction();\n````\nECMAScript3 解决了这个问题通过允许为函数表达式命名, 例如:\n\n````\n[1,2,3,4,5].map(function factorial (n) {\n    return !(n > 1) ? 1 : factorial(n-1)*n;\n});\n````\n这个转变有很多好处:\n* 在你的函数代码内部这个函数能像其它函数一样被调用\n* 在不会在外部产生一个额外的变量(不包含IE8及以下)\n* 相比通过 arguments 对象调用, 这种方式性能更好.\n\n\n[原文](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/callee)\n","slug":"2015-01-27-arguments-callee","date":1422544878000,"updated":1422544878000,"excerpt":"","_id":"6uli5azd6kre0czb","categories":[],"tags":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"jQuery 自定义插件","content":"<h3 id=\"jQuery_自定义插件\">jQuery 自定义插件</h3>\n<h2 id=\"基本要点\">基本要点</h2>\n<ul>\n<li>命名: 以 jquery.[插件名].js 命令</li>\n<li>所有的对象方法都附加到 jQuery.fn 对象上, 所有的全局函数都附加到 jQuery 上.</li>\n<li>this 指向</li>\n<li>this.each</li>\n<li>为了稳妥, 可以在插件头部各添加分号</li>\n<li>插件应该返回一个 jQuery 对象, 以保证插件的链式操作. 除非插件需要返回的是一些需要获取的量, 比如字符串或者数组.</li>\n<li>在插件中, 尽量不要使用 $ 作为 jQuery 对象的别名. 如果使用闭包来回避这个问题.</li>\n</ul>\n<h2 id=\"基本格式\">基本格式</h2>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">;(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($)</span> </span>{</div><div class=\"line\">    <span class=\"comment\">// 代码块</span></div><div class=\"line\">})(jQuery);</div></pre></td></tr></table></figure>\n\n<h2 id=\"插件类型\">插件类型</h2>\n<ul>\n<li>封装 jQuery 对象方法的插件</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">;(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($)</span> </span>{</div><div class=\"line\">    $.fn.extend({</div><div class=\"line\">        <span class=\"string\">'对象方法名'</span>: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">            <span class=\"comment\">// 方法内容</span></div><div class=\"line\">        }</div><div class=\"line\">    });</div><div class=\"line\">})(jQuery);</div></pre></td></tr></table></figure>\n\n<ul>\n<li>封装全局函数的插件</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">;(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($)</span> </span>{</div><div class=\"line\">    $.extend({</div><div class=\"line\">        <span class=\"string\">'方法名'</span>: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">            <span class=\"comment\">// 方法内容</span></div><div class=\"line\">        }</div><div class=\"line\">    });</div><div class=\"line\">})(jQuery);</div></pre></td></tr></table></figure>\n\n<ul>\n<li>自定义选择器<br>  这个实验了一下, 只有 jQuery1.7.2可用, 故而..</li>\n</ul>\n","source":"_posts/2015-01-27-jquery-plugns.md","raw":"title: jQuery 自定义插件\n---\n\n### jQuery 自定义插件\n## 基本要点\n* 命名: 以 jquery.[插件名].js 命令\n* 所有的对象方法都附加到 jQuery.fn 对象上, 所有的全局函数都附加到 jQuery 上.\n* this 指向\n* this.each\n* 为了稳妥, 可以在插件头部各添加分号\n* 插件应该返回一个 jQuery 对象, 以保证插件的链式操作. 除非插件需要返回的是一些需要获取的量, 比如字符串或者数组.\n* 在插件中, 尽量不要使用 $ 作为 jQuery 对象的别名. 如果使用闭包来回避这个问题.\n\n## 基本格式\n````javascript\n;(function($) {\n    // 代码块\n})(jQuery);\n````\n## 插件类型\n* 封装 jQuery 对象方法的插件\n\n````\n;(function($) {\n    $.fn.extend({\n        '对象方法名': function() {\n            // 方法内容\n        }\n    });\n})(jQuery);\n````\n* 封装全局函数的插件\n\n````\n;(function($) {\n    $.extend({\n        '方法名': function() {\n            // 方法内容\n        }\n    });\n})(jQuery);\n````\n* 自定义选择器\n    这个实验了一下, 只有 jQuery1.7.2可用, 故而..\n\n\n\n\n","slug":"2015-01-27-jquery-plugns","date":1422544925000,"updated":1422544925000,"excerpt":"","_id":"tnvc4weqxgvbq78w","categories":[],"tags":[],"comments":true,"layout":"post","photos":[],"link":""}],"Tag":[{"name":"JavaScript","_id":"6tb2yy8kt307effl","posts":["8arnedbxpkfpj4qw","lk62aliey21ne4ce","yzheao46zvq8k2m6","ul4edxxukgx2yju9","v60fzsz9722mweik","unb1k5wtmgcnwxu5","cbfm29bimnetxw6j"]},{"name":"Javascript Design Pattern","_id":"mo48aazlcxxhl3ou","posts":["lk62aliey21ne4ce","yzheao46zvq8k2m6","ul4edxxukgx2yju9","v60fzsz9722mweik"]},{"name":"Music","_id":"83qjshq3y7imj1ll","posts":["47nns2yjb27el2kk","ek3xq4ygfykc8u0b","sdb2ynmwva2ci21d"]}]}